(()=>{"use strict";const e=function(){let e="all";function t(t,n){e=n,i(t)}function n(){return e}function a(e,t,n,a,i,r=!1){return{title:e,details:t,dueDate:n,priority:a,project:i,checked:r}}function i(e){localStorage.setItem("todos",JSON.stringify(e)),r(e)}function r(e){const t=n();if("all"===t)fe.renderFilterList(e),fe.renderProjectList(e),fe.renderHighlightedCategory(),fe.renderAllTodos(e);else if("today"===t)fe.renderFilterList(e),fe.renderProjectList(e),fe.renderHighlightedCategory(),fe.renderTodayTodos(e);else if("week"===t)fe.renderFilterList(e),fe.renderProjectList(e),fe.renderHighlightedCategory(),fe.renderWeekTodos(e);else{let n=e[t].length;e[t].forEach((e=>{e.checked&&n--})),n<1?(fe.renderHighlightedCategory(),fe.renderEmptyProjectPopup(e)):(fe.renderFilterList(e),fe.renderProjectList(e),fe.renderHighlightedCategory(),fe.renderProjectTodos(e))}}return{setSelectedProject:t,getSelectedProject:n,addProject:function(e,t){e.preventDefault();const n=document.querySelector("#add-project").value;if(n){if("all"===n.toLowerCase()||"today"===n.toLowerCase()||"week"===n.toLowerCase()||"this week"===n.toLowerCase()||n in t)return;t[n]=[],i(t)}},deleteProject:function(e){delete e[n()],t(e,"all")},addProjectTodo:function(e,t){e.preventDefault();const r=document.querySelector(".add-new-todo-input").value,o=document.querySelector(".add-new-todo-textarea").value,d=document.querySelector(".add-new-date-input").value,s=document.querySelector('[name="new-todo-priority"]:checked').value,c=n(),l=a(r,o,`${d.slice(5,10)}-${d.slice(0,4)}`,s,c);t[c].push(l),i(t)},createTodo:a,addTodo:function(e,t){e.preventDefault();const r=document.querySelector(".add-todo-input").value,o=document.querySelector(".add-todo-textarea").value,d=document.querySelector("#new-date").value,s=document.querySelector('[name="new-priority"]:checked').value,c=n(),l=a(r,o,`${d.slice(5,10)}-${d.slice(0,4)}`,s,c);t[c].push(l),i(t)},checkOffTodo:function(e,t,n){n[t][e].checked=!n[t][e].checked,i(n)},editTodo:function(e,t,n,a){n.preventDefault();const r=document.querySelector("#edit-date").value,o=`${r.slice(5,10)}-${r.slice(0,4)}`;a[t][e].title=document.querySelector(".edit-title-textarea").value,a[t][e].details=document.querySelector(".edit-details-textarea").value,a[t][e].dueDate=o,a[t][e].priority=document.querySelector('[name="edit-todo-priority"]:checked').value,i(a)},deleteTodo:function(e,t,n){n[t].splice(e,1),i(n)},updateTodos:i,manageRerender:r}}();function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function a(e){return t(1,arguments),e instanceof Date||"object"===n(e)&&"[object Date]"===Object.prototype.toString.call(e)}function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function r(e){t(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===i(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(e){if(t(1,arguments),!a(e)&&"number"!=typeof e)return!1;var n=r(e);return!isNaN(Number(n))}function d(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function s(e,n){t(2,arguments);var a=r(e).getTime(),i=d(n);return new Date(a+i)}function c(e,n){t(2,arguments);var a=d(n);return s(e,-a)}var l=864e5;function u(e){t(1,arguments);var n=1,a=r(e),i=a.getUTCDay(),o=(i<n?7:0)+i-n;return a.setUTCDate(a.getUTCDate()-o),a.setUTCHours(0,0,0,0),a}function m(e){t(1,arguments);var n=r(e),a=n.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(a+1,0,4),i.setUTCHours(0,0,0,0);var o=u(i),d=new Date(0);d.setUTCFullYear(a,0,4),d.setUTCHours(0,0,0,0);var s=u(d);return n.getTime()>=o.getTime()?a+1:n.getTime()>=s.getTime()?a:a-1}function h(e){t(1,arguments);var n=m(e),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=u(a);return i}var f=6048e5,p={};function g(){return p}function v(e,n){var a,i,o,s,c,l,u,m;t(1,arguments);var h=g(),f=d(null!==(a=null!==(i=null!==(o=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==o?o:h.weekStartsOn)&&void 0!==i?i:null===(u=h.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==a?a:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=r(e),v=p.getUTCDay(),L=(v<f?7:0)+v-f;return p.setUTCDate(p.getUTCDate()-L),p.setUTCHours(0,0,0,0),p}function L(e,n){var a,i,o,s,c,l,u,m;t(1,arguments);var h=r(e),f=h.getUTCFullYear(),p=g(),L=d(null!==(a=null!==(i=null!==(o=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==o?o:p.firstWeekContainsDate)&&void 0!==i?i:null===(u=p.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==a?a:1);if(!(L>=1&&L<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var y=new Date(0);y.setUTCFullYear(f+1,0,L),y.setUTCHours(0,0,0,0);var w=v(y,n),b=new Date(0);b.setUTCFullYear(f,0,L),b.setUTCHours(0,0,0,0);var E=v(b,n);return h.getTime()>=w.getTime()?f+1:h.getTime()>=E.getTime()?f:f-1}function y(e,n){var a,i,r,o,s,c,l,u;t(1,arguments);var m=g(),h=d(null!==(a=null!==(i=null!==(r=null!==(o=null==n?void 0:n.firstWeekContainsDate)&&void 0!==o?o:null==n||null===(s=n.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==r?r:m.firstWeekContainsDate)&&void 0!==i?i:null===(l=m.locale)||void 0===l||null===(u=l.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:1),f=L(e,n),p=new Date(0);p.setUTCFullYear(f,0,h),p.setUTCHours(0,0,0,0);var y=v(p,n);return y}var w=6048e5;function b(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}var E={y:function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return b("yy"===t?a%100:a,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):b(n+1,2)},d:function(e,t){return b(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return b(e.getUTCHours()%12||12,t.length)},H:function(e,t){return b(e.getUTCHours(),t.length)},m:function(e,t){return b(e.getUTCMinutes(),t.length)},s:function(e,t){return b(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,a=e.getUTCMilliseconds();return b(Math.floor(a*Math.pow(10,n-3)),t.length)}};const k=E;var T={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),i=a>0?a:1-a;return n.ordinalNumber(i,{unit:"year"})}return k.y(e,t)},Y:function(e,t,n,a){var i=L(e,a),r=i>0?i:1-i;return"YY"===t?b(r%100,2):"Yo"===t?n.ordinalNumber(r,{unit:"year"}):b(r,t.length)},R:function(e,t){return b(m(e),t.length)},u:function(e,t){return b(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return b(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return b(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return k.M(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return b(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,n,a,i){var o=function(e,n){t(1,arguments);var a=r(e),i=v(a,n).getTime()-y(a,n).getTime();return Math.round(i/w)+1}(e,i);return"wo"===n?a.ordinalNumber(o,{unit:"week"}):b(o,n.length)},I:function(e,n,a){var i=function(e){t(1,arguments);var n=r(e),a=u(n).getTime()-h(n).getTime();return Math.round(a/f)+1}(e);return"Io"===n?a.ordinalNumber(i,{unit:"week"}):b(i,n.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):k.d(e,t)},D:function(e,n,a){var i=function(e){t(1,arguments);var n=r(e),a=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var i=n.getTime(),o=a-i;return Math.floor(o/l)+1}(e);return"Do"===n?a.ordinalNumber(i,{unit:"dayOfYear"}):b(i,n.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var i=e.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(r);case"ee":return b(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var i=e.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(r);case"cc":return b(r,t.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),i=0===a?7:a;switch(t){case"i":return String(i);case"ii":return b(i,t.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,i=e.getUTCHours();switch(a=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,i=e.getUTCHours();switch(a=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return k.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):k.H(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):b(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):b(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):k.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):k.s(e,t)},S:function(e,t){return k.S(e,t)},X:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();if(0===i)return"Z";switch(t){case"X":return C(i);case"XXXX":case"XX":return S(i);default:return S(i,":")}},x:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return C(i);case"xxxx":case"xx":return S(i);default:return S(i,":")}},O:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+M(i,":");default:return"GMT"+S(i,":")}},z:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+M(i,":");default:return"GMT"+S(i,":")}},t:function(e,t,n,a){var i=a._originalDate||e;return b(Math.floor(i.getTime()/1e3),t.length)},T:function(e,t,n,a){return b((a._originalDate||e).getTime(),t.length)}};function M(e,t){var n=e>0?"-":"+",a=Math.abs(e),i=Math.floor(a/60),r=a%60;if(0===r)return n+String(i);var o=t||"";return n+String(i)+o+b(r,2)}function C(e,t){return e%60==0?(e>0?"-":"+")+b(Math.abs(e)/60,2):S(e,t)}function S(e,t){var n=t||"",a=e>0?"-":"+",i=Math.abs(e);return a+b(Math.floor(i/60),2)+n+b(i%60,2)}const x=T;var D=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},H=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},j={p:H,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],i=a[1],r=a[2];if(!r)return D(e,t);switch(i){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",D(i,t)).replace("{{time}}",H(r,t))}};const q=j;function P(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var N=["D","DD"],$=["YY","YYYY"];function U(e){return-1!==N.indexOf(e)}function O(e){return-1!==$.indexOf(e)}function W(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var Y={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function A(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,a=e.formats[n]||e.formats[e.defaultWidth];return a}}var F,B={date:A({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:A({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:A({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},I={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function z(e){return function(t,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,r=null!=n&&n.width?String(n.width):i;a=e.formattingValues[r]||e.formattingValues[i]}else{var o=e.defaultWidth,d=null!=n&&n.width?String(n.width):e.defaultWidth;a=e.values[d]||e.values[o]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function Q(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,i=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],r=t.match(i);if(!r)return null;var o,d=r[0],s=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?R(s,(function(e){return e.test(d)})):G(s,(function(e){return e.test(d)}));o=e.valueCallback?e.valueCallback(c):c,o=n.valueCallback?n.valueCallback(o):o;var l=t.slice(d.length);return{value:o,rest:l}}}function G(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function R(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const X={code:"en-US",formatDistance:function(e,t,n){var a,i=Y[e];return a="string"==typeof i?i:1===t?i.one:i.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:B,formatRelative:function(e,t,n,a){return I[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:z({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:z({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:z({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:z({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:z({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(F={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(F.matchPattern);if(!n)return null;var a=n[0],i=e.match(F.parsePattern);if(!i)return null;var r=F.valueCallback?F.valueCallback(i[0]):i[0];r=t.valueCallback?t.valueCallback(r):r;var o=e.slice(a.length);return{value:r,rest:o}}),era:Q({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Q({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:Q({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Q({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Q({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var J=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,K=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,_=/^'([^]*?)'?$/,V=/''/g,Z=/[a-zA-Z]/;function ee(e,n,a){var i,s,l,u,m,h,f,p,v,L,y,w,b,E,k,T,M,C;t(2,arguments);var S=String(n),D=g(),H=null!==(i=null!==(s=null==a?void 0:a.locale)&&void 0!==s?s:D.locale)&&void 0!==i?i:X,j=d(null!==(l=null!==(u=null!==(m=null!==(h=null==a?void 0:a.firstWeekContainsDate)&&void 0!==h?h:null==a||null===(f=a.locale)||void 0===f||null===(p=f.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==m?m:D.firstWeekContainsDate)&&void 0!==u?u:null===(v=D.locale)||void 0===v||null===(L=v.options)||void 0===L?void 0:L.firstWeekContainsDate)&&void 0!==l?l:1);if(!(j>=1&&j<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var N=d(null!==(y=null!==(w=null!==(b=null!==(E=null==a?void 0:a.weekStartsOn)&&void 0!==E?E:null==a||null===(k=a.locale)||void 0===k||null===(T=k.options)||void 0===T?void 0:T.weekStartsOn)&&void 0!==b?b:D.weekStartsOn)&&void 0!==w?w:null===(M=D.locale)||void 0===M||null===(C=M.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==y?y:0);if(!(N>=0&&N<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!H.localize)throw new RangeError("locale must contain localize property");if(!H.formatLong)throw new RangeError("locale must contain formatLong property");var $=r(e);if(!o($))throw new RangeError("Invalid time value");var Y=P($),A=c($,Y),F={firstWeekContainsDate:j,weekStartsOn:N,locale:H,_originalDate:$},B=S.match(K).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,q[t])(e,H.formatLong):e})).join("").match(J).map((function(t){if("''"===t)return"'";var i=t[0];if("'"===i)return te(t);var r=x[i];if(r)return null!=a&&a.useAdditionalWeekYearTokens||!O(t)||W(t,n,String(e)),null!=a&&a.useAdditionalDayOfYearTokens||!U(t)||W(t,n,String(e)),r(A,t,H.localize,F);if(i.match(Z))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return t})).join("");return B}function te(e){var t=e.match(_);return t?t[1].replace(V,"'"):e}const ne=new Date,ae=ee(ne,"MM"),ie=ee(ne,"dd"),re=ee(ne,"yyyy"),oe=`${ae}-${ie}-${re}`,de=`${re}-${ae}-${ie}`,se=new Date(ne.getFullYear(),ne.getMonth(),ne.getDate()-7),ce=`${ee(se,"MM")}-${ee(se,"dd")}-${ee(se,"yyyy")}`,le=new Date(ne.getFullYear(),ne.getMonth(),ne.getDate()+5),ue=`${ee(le,"MM")}-${ee(le,"dd")}-${ee(le,"yyyy")}`,me=new Date(ne.getFullYear(),ne.getMonth(),ne.getDate()+32),he=`${ee(me,"MM")}-${ee(me,"dd")}-${ee(me,"yyyy")}`,fe=function(){const t=document.querySelector(".main-list");function n(t,n){const a=n.children,i=a[0],r=a[1],o=i.children[0],d=i.children[1],s=r.children[0],c=r.children[1],l=r.children[2];o.classList.remove("fa-square"),o.classList.add("fa-square-check"),d.classList.toggle("selected"),d.classList.toggle("strike"),s.classList.toggle("done"),c.classList.toggle("selected"),l.classList.toggle("selected"),o.addEventListener("click",(n=>{let a,i;const r=n.target;if(r instanceof HTMLElement){const n=r.parentElement;if(n instanceof HTMLElement){const r=n.parentElement;r instanceof HTMLElement&&(a=Number(r.dataset.index),i=r.dataset.project,e.checkOffTodo(a,i,t))}}}))}function a(t){const n=document.querySelector(".popup-add-new-todo"),a=document.querySelector(".add-new-todo-project"),i=document.querySelector(".add-new-todo-form"),r=document.getElementById("new-todo-date"),o=document.querySelector(".add-new-delete-project"),d=document.getElementById("new-todo-low"),s=document.getElementById("new-todo-medium"),c=document.getElementById("new-todo-high"),l=document.querySelector(".low-new"),u=document.querySelector(".medium-new"),m=document.querySelector(".high-new"),h=e.getSelectedProject();a.textContent=h,r.setAttribute("value",de),n.classList.remove("invisible-add-new-todo"),i.addEventListener("submit",(a=>{e.addProjectTodo(a,t),n.classList.add("invisible-add-new-todo"),i.reset(),r.removeAttribute("value")})),o.addEventListener("click",(()=>{e.deleteProject(t),n.classList.add("invisible-add-new-todo"),i.reset(),r.removeAttribute("value")})),d.addEventListener("click",(()=>{l.classList.contains("low-new")&&(l.classList.remove("low-new"),l.classList.add("low-checked")),u.classList.contains("medium-checked")&&(u.classList.remove("medium-checked"),u.classList.add("medium-new")),m.classList.contains("high-checked")&&(m.classList.remove("high-checked"),m.classList.add("high-new"))})),s.addEventListener("click",(()=>{l.classList.contains("low-checked")&&(l.classList.remove("low-checked"),l.classList.add("low-new")),u.classList.contains("medium-new")&&(u.classList.remove("medium-new"),u.classList.add("medium-checked")),m.classList.contains("high-checked")&&(m.classList.remove("high-checked"),m.classList.add("high-new"))})),c.addEventListener("click",(()=>{l.classList.contains("low-checked")&&(l.classList.remove("low-checked"),l.classList.add("low-new")),u.classList.contains("medium-checked")&&(u.classList.remove("medium-checked"),u.classList.add("medium-new")),m.classList.contains("high-new")&&(m.classList.remove("high-new"),m.classList.add("high-checked"))}))}function i(e,t){const n=document.querySelector(".popup-notes"),a=document.querySelector(".notes-close"),i=document.querySelector(".notes-title"),r=document.querySelector(".notes-project"),o=document.querySelector(".notes-date"),d=document.querySelector(".notes-priority"),s=document.querySelector(".notes-details");let c,l;i.innerHTML="",r.innerHTML="",o.innerHTML="",d.innerHTML="",s.innerHTML="";const u=e.target;if(u instanceof HTMLElement){const e=u.parentElement;if(e instanceof HTMLElement){const u=e.parentElement;if(u instanceof HTMLElement){c=Number(u.dataset.index),l=u.dataset.project;const e=ee(new Date(t[l][c].dueDate),"do"),m=ee(new Date(t[l][c].dueDate),"MMM"),h=ee(new Date(t[l][c].dueDate),"yyyy");i.textContent=t[l][c].title,o.textContent=`${m} ${e}, ${h}`,d.textContent=t[l][c].priority[0].toUpperCase()+t[l][c].priority.slice(1),s.textContent=t[l][c].details,r.textContent="all"===l?"All":"today"===l?"Today":"week"===l?"This Week":t[l][c].project,n.classList.remove("invisible-notes"),a.addEventListener("click",(()=>n.classList.add("invisible-notes")))}}}}function r(t,n,a){const i=document.querySelector(".popup-edit"),r=document.querySelector(".edit-close"),o=document.querySelector(".edit-title-textarea"),d=document.querySelector(".edit-details-textarea"),s=document.getElementById("edit-date"),c=document.getElementById("edit-low"),l=document.getElementById("edit-medium"),u=document.getElementById("edit-high"),m=document.getElementById("edit-low-label"),h=document.getElementById("edit-medium-label"),f=document.getElementById("edit-high-label"),p=document.querySelector(".edit-form");o.innerHTML="",d.innerHTML="";const g=new Date(a[n][t].dueDate),v=ee(g,"MM"),L=ee(g,"dd"),y=`${ee(g,"yyyy")}-${v}-${L}`;o.textContent=a[n][t].title,d.textContent=a[n][t].details,s.removeAttribute("value"),s.setAttribute("value",y),m.classList.contains("low-checked")&&(m.classList.remove("low-checked"),m.classList.add("low")),h.classList.contains("medium-checked")&&(h.classList.remove("medium-checked"),h.classList.add("medium")),f.classList.contains("high-checked")&&(f.classList.remove("high-checked"),f.classList.add("high")),"low"===a[n][t].priority?(c.checked=!0,m.classList.remove("low"),m.classList.add("low-checked")):"medium"===a[n][t].priority?(l.checked=!0,h.classList.remove("medium"),h.classList.add("medium-checked")):"high"===a[n][t].priority&&(u.checked=!0,f.classList.remove("high"),f.classList.add("high-checked")),i.classList.remove("invisible-edit"),r.addEventListener("click",(()=>i.classList.add("invisible-edit"))),p.addEventListener("submit",(r=>{i.classList.add("invisible-edit"),e.editTodo(t,n,r,a)})),c.addEventListener("click",(()=>{m.classList.contains("low")&&(m.classList.remove("low"),m.classList.add("low-checked")),h.classList.contains("medium-checked")&&(h.classList.remove("medium-checked"),h.classList.add("medium")),f.classList.contains("high-checked")&&(f.classList.remove("high-checked"),f.classList.add("high"))})),l.addEventListener("click",(()=>{m.classList.contains("low-checked")&&(m.classList.remove("low-checked"),m.classList.add("low")),h.classList.contains("medium")&&(h.classList.remove("medium"),h.classList.add("medium-checked")),f.classList.contains("high-checked")&&(f.classList.remove("high-checked"),f.classList.add("high"))})),u.addEventListener("click",(()=>{m.classList.contains("low-checked")&&(m.classList.remove("low-checked"),m.classList.add("low")),h.classList.contains("medium-checked")&&(h.classList.remove("medium-checked"),h.classList.add("medium")),f.classList.contains("high")&&(f.classList.remove("high"),f.classList.add("high-checked"))}))}function o(t,n,a){const i=document.querySelector(".popup-delete-todo"),r=document.querySelector(".delete-todo-confirm-btn"),o=document.querySelector(".delete-todo-cancel-btn");i.classList.remove("invisible-delete-todo"),r.addEventListener("click",(()=>{e.deleteTodo(t,n,a),i.classList.add("invisible-delete-todo")})),o.addEventListener("click",(()=>i.classList.add("invisible-delete-todo")))}return{renderFilterList:function(e){const t=document.querySelector(".all"),n=document.querySelector(".today"),a=document.querySelector(".week"),i=Object.assign({},e),r=Object.assign({},e);delete i.today,delete r.week;const o=new Date;let d=0,s=0,c=0;s=e.today.reduce(((e,t)=>e+Number(!t.checked)),0),c=e.week.reduce(((e,t)=>e+Number(!t.checked)),0);for(const t in e)e[t].forEach((e=>{e.checked||d++}));for(const e in i)i[e].forEach((e=>{const t=new Date(e.dueDate);o.getDate()===t.getDate()&&o.getMonth()===t.getMonth()&&o.getFullYear()===t.getFullYear()&&(e.checked||s++)}));for(const e in r)r[e].forEach((e=>{const t=new Date(e.dueDate);Math.abs(o.getTime()-t.getTime())/864e5<=7&&(e.checked||c++)}));t.textContent=`${d}`,n.textContent=`${s}`,a.textContent=`${c}`},renderProjectList:function(t){const n=document.querySelector(".projects-list");n.innerHTML="";const a=Object.assign({},t);delete a.all,delete a.today,delete a.week;for(const i in a){let r=0;a[i].forEach((e=>{e.checked||r++}));const o=document.createElement("div"),d=document.createElement("button"),s=document.createElement("p");o.classList.add("project-item"),s.classList.add("project-counter"),s.textContent=`${r}`,d.classList.add("project-name"),d.textContent=i,d.addEventListener("click",(n=>{const a=n.target.textContent;e.setSelectedProject(t,a)})),o.appendChild(d),o.appendChild(s),n.appendChild(o)}},renderHighlightedCategory:function(){const t=document.querySelectorAll(".filters-btn"),n=document.querySelectorAll(".project-name"),a=e.getSelectedProject();t.forEach((e=>{e.classList.remove("clicked")})),n.forEach((e=>{e.classList.remove("clicked")})),t.forEach((e=>{("all"===a&&e.classList.contains("all-btn")||"today"===a&&e.classList.contains("today-btn")||"week"===a&&e.classList.contains("week-btn"))&&e.classList.add("clicked")})),n.forEach((e=>{e.textContent===a&&e.classList.add("clicked")}))},renderAllTodos:function(a){t.innerHTML="";for(const d in a)a[d].forEach(((d,s)=>{const c=new Date(d.dueDate),l=ee(c,"MMM"),u=ee(c,"do"),m=document.createElement("div"),h=document.createElement("div"),f=document.createElement("div"),p=document.createElement("i"),g=document.createElement("p"),v=document.createElement("button"),L=document.createElement("p"),y=document.createElement("i"),w=document.createElement("i");m.classList.add("list-item"),m.classList.add(`${d.priority}-priority`),m.setAttribute("data-index",`${s}`),m.setAttribute("data-project",`${d.project}`),h.classList.add("list-item-left"),f.classList.add("list-item-right"),p.classList.add("fa-regular","fa-square"),g.classList.add("item-description"),g.textContent=d.title,v.classList.add("item-notes"),v.textContent="NOTES",L.classList.add("item-date"),L.textContent=`${l} ${u}`,y.classList.add("fa-solid","fa-pen-to-square"),w.classList.add("fa-solid","fa-trash-can"),h.appendChild(p),h.appendChild(g),f.appendChild(v),f.appendChild(L),f.appendChild(y),f.appendChild(w),m.appendChild(h),m.appendChild(f),d.checked&&n(a,m),t.appendChild(m),p.addEventListener("click",(t=>{let n,i;const r=t.target;if(r instanceof HTMLElement){const t=r.parentElement;if(t instanceof HTMLElement){const r=t.parentElement;r instanceof HTMLElement&&(n=Number(r.dataset.index),i=r.dataset.project,e.checkOffTodo(n,i,a))}}})),v.addEventListener("click",(e=>i(e,a))),y.addEventListener("click",(e=>{let t,n;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),n=i.dataset.project,r(t,n,a))}}})),w.addEventListener("click",(e=>{let t,n;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),n=i.dataset.project,o(t,n,a))}}}))}))},renderTodayTodos:function(a){t.innerHTML="";for(const d in a)"today"!==d&&a[d].forEach(((d,s)=>{const c=new Date,l=new Date(d.dueDate);if(c.getDate()===l.getDate()&&c.getMonth()===l.getMonth()&&c.getFullYear()===l.getFullYear()){const c=new Date(d.dueDate),l=ee(c,"MMM"),u=ee(c,"do"),m=document.createElement("div"),h=document.createElement("div"),f=document.createElement("div"),p=document.createElement("i"),g=document.createElement("p"),v=document.createElement("button"),L=document.createElement("p"),y=document.createElement("i"),w=document.createElement("i");m.classList.add("list-item"),m.classList.add(`${d.priority}-priority`),m.setAttribute("data-index",`${s}`),m.setAttribute("data-project",`${d.project}`),h.classList.add("list-item-left"),f.classList.add("list-item-right"),p.classList.add("fa-regular","fa-square"),g.classList.add("item-description"),g.textContent=d.title,v.classList.add("item-notes"),v.textContent="NOTES",L.classList.add("item-date"),L.textContent=`${l} ${u}`,y.classList.add("fa-solid","fa-pen-to-square"),w.classList.add("fa-solid","fa-trash-can"),h.appendChild(p),h.appendChild(g),f.appendChild(v),f.appendChild(L),f.appendChild(y),f.appendChild(w),m.appendChild(h),m.appendChild(f),d.checked&&n(a,m),t.appendChild(m),p.addEventListener("click",(t=>{let n,i;const r=t.target;if(r instanceof HTMLElement){const t=r.parentElement;if(t instanceof HTMLElement){const r=t.parentElement;r instanceof HTMLElement&&(n=Number(r.dataset.index),i=r.dataset.project,e.checkOffTodo(n,i,a))}}})),v.addEventListener("click",(e=>i(e,a))),y.addEventListener("click",(e=>{let t,n;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),n=i.dataset.project,r(t,n,a))}}})),w.addEventListener("click",(e=>{let t,n;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),n=i.dataset.project,o(t,n,a))}}}))}}));const d=a[e.getSelectedProject()];0!==d.length&&d.forEach(((d,s)=>{const c=new Date(d.dueDate),l=ee(c,"MMM"),u=ee(c,"do"),m=document.createElement("div"),h=document.createElement("div"),f=document.createElement("div"),p=document.createElement("i"),g=document.createElement("p"),v=document.createElement("button"),L=document.createElement("p"),y=document.createElement("i"),w=document.createElement("i");m.classList.add("list-item"),m.classList.add(`${d.priority}-priority`),m.setAttribute("data-index",`${s}`),m.setAttribute("data-project",`${d.project}`),h.classList.add("list-item-left"),f.classList.add("list-item-right"),p.classList.add("fa-regular","fa-square"),g.classList.add("item-description"),g.textContent=d.title,v.classList.add("item-notes"),v.textContent="NOTES",L.classList.add("item-date"),L.textContent=`${l} ${u}`,y.classList.add("fa-solid","fa-pen-to-square"),w.classList.add("fa-solid","fa-trash-can"),h.appendChild(p),h.appendChild(g),f.appendChild(v),f.appendChild(L),f.appendChild(y),f.appendChild(w),m.appendChild(h),m.appendChild(f),d.checked&&n(a,m),t.appendChild(m),p.addEventListener("click",(t=>{let n,i;const r=t.target;if(r instanceof HTMLElement){const t=r.parentElement;if(t instanceof HTMLElement){const r=t.parentElement;r instanceof HTMLElement&&(n=Number(r.dataset.index),i=r.dataset.project,e.checkOffTodo(n,i,a))}}})),v.addEventListener("click",(e=>i(e,a))),y.addEventListener("click",(e=>{let t,n;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),n=i.dataset.project,r(t,n,a))}}})),w.addEventListener("click",(e=>{let t,n;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),n=i.dataset.project,o(t,n,a))}}}))}))},renderWeekTodos:function(a){t.innerHTML="";for(const d in a)"week"!==d&&a[d].forEach(((d,s)=>{const c=new Date,l=new Date(d.dueDate);if(Math.abs(c.getTime()-l.getTime())/864e5<=7){const c=new Date(d.dueDate),l=ee(c,"MMM"),u=ee(c,"do"),m=document.createElement("div"),h=document.createElement("div"),f=document.createElement("div"),p=document.createElement("i"),g=document.createElement("p"),v=document.createElement("button"),L=document.createElement("p"),y=document.createElement("i"),w=document.createElement("i");m.classList.add("list-item"),m.classList.add(`${d.priority}-priority`),m.setAttribute("data-index",`${s}`),m.setAttribute("data-project",`${d.project}`),h.classList.add("list-item-left"),f.classList.add("list-item-right"),p.classList.add("fa-regular","fa-square"),g.classList.add("item-description"),g.textContent=d.title,v.classList.add("item-notes"),v.textContent="NOTES",L.classList.add("item-date"),L.textContent=`${l} ${u}`,y.classList.add("fa-solid","fa-pen-to-square"),w.classList.add("fa-solid","fa-trash-can"),h.appendChild(p),h.appendChild(g),f.appendChild(v),f.appendChild(L),f.appendChild(y),f.appendChild(w),m.appendChild(h),m.appendChild(f),d.checked&&n(a,m),t.appendChild(m),p.addEventListener("click",(t=>{let n,i;const r=t.target;if(r instanceof HTMLElement){const t=r.parentElement;if(t instanceof HTMLElement){const r=t.parentElement;r instanceof HTMLElement&&(n=Number(r.dataset.index),i=r.dataset.project,e.checkOffTodo(n,i,a))}}})),v.addEventListener("click",(e=>i(e,a))),y.addEventListener("click",(e=>{let t,n;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),n=i.dataset.project,r(t,n,a))}}})),w.addEventListener("click",(e=>{let t,n;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),n=i.dataset.project,o(t,n,a))}}}))}}));const d=a[e.getSelectedProject()];0!==d.length&&d.forEach(((d,s)=>{const c=new Date(d.dueDate),l=ee(c,"MMM"),u=ee(c,"do"),m=document.createElement("div"),h=document.createElement("div"),f=document.createElement("div"),p=document.createElement("i"),g=document.createElement("p"),v=document.createElement("button"),L=document.createElement("p"),y=document.createElement("i"),w=document.createElement("i");m.classList.add("list-item"),m.classList.add(`${d.priority}-priority`),m.setAttribute("data-index",`${s}`),m.setAttribute("data-project",`${d.project}`),h.classList.add("list-item-left"),f.classList.add("list-item-right"),p.classList.add("fa-regular","fa-square"),g.classList.add("item-description"),g.textContent=d.title,v.classList.add("item-notes"),v.textContent="NOTES",L.classList.add("item-date"),L.textContent=`${l} ${u}`,y.classList.add("fa-solid","fa-pen-to-square"),w.classList.add("fa-solid","fa-trash-can"),h.appendChild(p),h.appendChild(g),f.appendChild(v),f.appendChild(L),f.appendChild(y),f.appendChild(w),m.appendChild(h),m.appendChild(f),d.checked&&n(a,m),t.appendChild(m),p.addEventListener("click",(t=>{let n,i;const r=t.target;if(r instanceof HTMLElement){const t=r.parentElement;if(t instanceof HTMLElement){const r=t.parentElement;r instanceof HTMLElement&&(n=Number(r.dataset.index),i=r.dataset.project,e.checkOffTodo(n,i,a))}}})),v.addEventListener("click",(e=>i(e,a))),y.addEventListener("click",(e=>{let t,n;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),n=i.dataset.project,r(t,n,a))}}})),w.addEventListener("click",(e=>{let t,n;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),n=i.dataset.project,o(t,n,a))}}}))}))},renderProjectTodos:function(a){t.innerHTML="";const d=a[e.getSelectedProject()];0!==d.length&&d.forEach(((d,s)=>{const c=new Date(d.dueDate),l=ee(c,"MMM"),u=ee(c,"do"),m=document.createElement("div"),h=document.createElement("div"),f=document.createElement("div"),p=document.createElement("i"),g=document.createElement("p"),v=document.createElement("button"),L=document.createElement("p"),y=document.createElement("i"),w=document.createElement("i");m.classList.add("list-item"),m.classList.add(`${d.priority}-priority`),m.setAttribute("data-index",`${s}`),m.setAttribute("data-project",`${d.project}`),h.classList.add("item-left"),f.classList.add("item-right"),p.classList.add("fa-regular","fa-square"),g.classList.add("item-description"),g.textContent=d.title,v.classList.add("item-notes"),v.textContent="NOTES",L.classList.add("item-date"),L.textContent=`${l} ${u}`,y.classList.add("fa-solid","fa-pen-to-square"),w.classList.add("fa-solid","fa-trash-can"),h.appendChild(p),h.appendChild(g),f.appendChild(v),f.appendChild(L),f.appendChild(y),f.appendChild(w),m.appendChild(h),m.appendChild(f),d.checked&&n(a,m),t.appendChild(m),p.addEventListener("click",(t=>{let n,i;const r=t.target;if(r instanceof HTMLElement){const t=r.parentElement;if(t instanceof HTMLElement){const r=t.parentElement;r instanceof HTMLElement&&(n=Number(r.dataset.index),i=r.dataset.project,e.checkOffTodo(n,i,a))}}})),v.addEventListener("click",(e=>i(e,a))),y.addEventListener("click",(e=>{let t,n;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),n=i.dataset.project,r(t,n,a))}}})),w.addEventListener("click",(e=>{let t,n;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),n=i.dataset.project,o(t,n,a))}}}))}))},renderCheckedTodo:n,renderAddNewPopup:function(t){const n=document.querySelector(".popup-add-new"),a=document.querySelector("#add-exit"),i=document.querySelector(".add-todo-form"),r=document.querySelector(".add-project-form"),o=document.querySelector(".add-todo-btn"),d=document.querySelector(".add-project-btn"),s=document.getElementById("new-date"),c=document.getElementById("new-low"),l=document.getElementById("new-medium"),u=document.getElementById("new-high"),m=document.querySelector(".low"),h=document.querySelector(".medium"),f=document.querySelector(".high");s.setAttribute("value",de),n.classList.remove("invisible-add-new"),a.addEventListener("click",(()=>{n.classList.add("invisible-add-new"),i.reset(),i.style.display="grid",r.reset(),r.style.display="none",o.classList.add("clicked"),d.classList.remove("clicked"),s.removeAttribute("value")})),o.addEventListener("click",(()=>{o.classList.add("clicked"),i.style.display="grid",d.classList.remove("clicked"),r.style.display="none"})),d.addEventListener("click",(()=>{d.classList.add("clicked"),r.style.display="grid",o.classList.remove("clicked"),i.style.display="none"})),i.addEventListener("submit",(a=>{e.addTodo(a,t),n.classList.add("invisible-add-new"),i.reset(),i.style.display="grid",r.reset(),r.style.display="none",o.classList.add("clicked"),d.classList.remove("clicked"),s.removeAttribute("value")})),r.addEventListener("submit",(a=>{e.addProject(a,t),n.classList.add("invisible-add-new"),i.reset(),i.style.display="grid",r.reset(),r.style.display="none",o.classList.add("clicked"),d.classList.remove("clicked"),s.removeAttribute("value")})),c.addEventListener("click",(()=>{m.classList.contains("low")&&(m.classList.remove("low"),m.classList.add("low-checked")),h.classList.contains("medium-checked")&&(h.classList.remove("medium-checked"),h.classList.add("medium")),f.classList.contains("high-checked")&&(f.classList.remove("high-checked"),f.classList.add("high"))})),l.addEventListener("click",(()=>{m.classList.contains("low-checked")&&(m.classList.remove("low-checked"),m.classList.add("low")),h.classList.contains("medium")&&(h.classList.remove("medium"),h.classList.add("medium-checked")),f.classList.contains("high-checked")&&(f.classList.remove("high-checked"),f.classList.add("high"))})),u.addEventListener("click",(()=>{m.classList.contains("low-checked")&&(m.classList.remove("low-checked"),m.classList.add("low")),h.classList.contains("medium-checked")&&(h.classList.remove("medium-checked"),h.classList.add("medium")),f.classList.contains("high")&&(f.classList.remove("high"),f.classList.add("high-checked"))}))},renderEmptyProjectPopup:function(t){const n=document.querySelector(".popup-empty-project"),i=document.querySelector(".empty-project-name"),r=document.querySelector(".empty-project-add-btn"),o=document.querySelector(".empty-project-delete-btn");i.innerHTML="",i.textContent=e.getSelectedProject(),r.addEventListener("click",(()=>{a(t),n.classList.add("invisible-empty-project")})),o.addEventListener("click",(()=>{e.deleteProject(t),n.classList.add("invisible-empty-project")})),n.classList.remove("invisible-empty-project")},renderAddTodoPopup:a,renderNotesPopup:i,renderEditPopup:r,renderDeletePopup:o}}(),pe=function(){var t,n,a,i;let r;const o=localStorage.getItem("todos");return null!==o?r=JSON.parse(o):(r={all:[],today:[],week:[],"Kitchen renovation":[]},null===(t=r["Kitchen renovation"])||void 0===t||t.push(e.createTodo("Remove vinyl floor","replace with subfloor",ue,"high","Kitchen renovation")),null===(n=r["Kitchen renovation"])||void 0===n||n.push(e.createTodo("Build cabinets","pre-painted cabinets only",ce,"low","Kitchen renovation",!0)),null===(a=r["Kitchen renovation"])||void 0===a||a.push(e.createTodo("Install countertop","leave room for butcher block",he,"medium","Kitchen renovation")),null===(i=r.all)||void 0===i||i.push(e.createTodo("Finish book for book club","let Angela borrow afterward",oe,"high","all"))),r}();!function(e){fe.renderFilterList(e),fe.renderProjectList(e),fe.renderHighlightedCategory(),fe.renderAllTodos(e)}(pe);const ge=document.querySelector(".main-dashboard"),ve=document.querySelector(".fa-bars"),Le=document.querySelectorAll(".filters-btn"),ye=document.querySelector(".projects-btn");ve.addEventListener("click",(()=>{ge.style.visibility="hidden"===ge.style.visibility?"visible":"hidden"})),Le.forEach((t=>{t.addEventListener("click",(t=>{let n;n=t.target.textContent,n="All"===n?"all":"Today"===n?"today":"week",e.setSelectedProject(pe,n)}))})),ye.addEventListener("click",(()=>{fe.renderAddNewPopup(pe)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,