(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(n){return e(1,arguments),n instanceof Date||"object"===t(n)&&"[object Date]"===Object.prototype.toString.call(n)}function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function a(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"===r(t)&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(t){if(e(1,arguments),!n(t)&&"number"!=typeof t)return!1;var r=a(t);return!isNaN(Number(r))}function i(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function s(t,n){e(2,arguments);var r=a(t).getTime(),o=i(n);return new Date(r+o)}function d(t,n){e(2,arguments);var r=i(n);return s(t,-r)}var c=864e5;function u(t){e(1,arguments);var n=1,r=a(t),o=r.getUTCDay(),i=(o<n?7:0)+o-n;return r.setUTCDate(r.getUTCDate()-i),r.setUTCHours(0,0,0,0),r}function l(t){e(1,arguments);var n=a(t),r=n.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(r+1,0,4),o.setUTCHours(0,0,0,0);var i=u(o),s=new Date(0);s.setUTCFullYear(r,0,4),s.setUTCHours(0,0,0,0);var d=u(s);return n.getTime()>=i.getTime()?r+1:n.getTime()>=d.getTime()?r:r-1}function m(t){e(1,arguments);var n=l(t),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var a=u(r);return a}var h=6048e5,f={};function g(){return f}function v(t,n){var r,o,s,d,c,u,l,m;e(1,arguments);var h=g(),f=i(null!==(r=null!==(o=null!==(s=null!==(d=null==n?void 0:n.weekStartsOn)&&void 0!==d?d:null==n||null===(c=n.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==s?s:h.weekStartsOn)&&void 0!==o?o:null===(l=h.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==r?r:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=a(t),y=v.getUTCDay(),w=(y<f?7:0)+y-f;return v.setUTCDate(v.getUTCDate()-w),v.setUTCHours(0,0,0,0),v}function y(t,n){var r,o,s,d,c,u,l,m;e(1,arguments);var h=a(t),f=h.getUTCFullYear(),y=g(),w=i(null!==(r=null!==(o=null!==(s=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(c=n.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==s?s:y.firstWeekContainsDate)&&void 0!==o?o:null===(l=y.locale)||void 0===l||null===(m=l.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==r?r:1);if(!(w>=1&&w<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var b=new Date(0);b.setUTCFullYear(f+1,0,w),b.setUTCHours(0,0,0,0);var p=v(b,n),T=new Date(0);T.setUTCFullYear(f,0,w),T.setUTCHours(0,0,0,0);var L=v(T,n);return h.getTime()>=p.getTime()?f+1:h.getTime()>=L.getTime()?f:f-1}function w(t,n){var r,a,o,s,d,c,u,l;e(1,arguments);var m=g(),h=i(null!==(r=null!==(a=null!==(o=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(d=n.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==o?o:m.firstWeekContainsDate)&&void 0!==a?a:null===(u=m.locale)||void 0===u||null===(l=u.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==r?r:1),f=y(t,n),w=new Date(0);w.setUTCFullYear(f,0,h),w.setUTCHours(0,0,0,0);var b=v(w,n);return b}var b=6048e5;function p(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}var T={y:function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return p("yy"===t?r%100:r,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):p(n+1,2)},d:function(e,t){return p(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return p(e.getUTCHours()%12||12,t.length)},H:function(e,t){return p(e.getUTCHours(),t.length)},m:function(e,t){return p(e.getUTCMinutes(),t.length)},s:function(e,t){return p(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,r=e.getUTCMilliseconds();return p(Math.floor(r*Math.pow(10,n-3)),t.length)}};const L=T;var k={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return L.y(e,t)},Y:function(e,t,n,r){var a=y(e,r),o=a>0?a:1-a;return"YY"===t?p(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):p(o,t.length)},R:function(e,t){return p(l(e),t.length)},u:function(e,t){return p(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return p(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return p(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return L.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return p(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,n,r,o){var i=function(t,n){e(1,arguments);var r=a(t),o=v(r,n).getTime()-w(r,n).getTime();return Math.round(o/b)+1}(t,o);return"wo"===n?r.ordinalNumber(i,{unit:"week"}):p(i,n.length)},I:function(t,n,r){var o=function(t){e(1,arguments);var n=a(t),r=u(n).getTime()-m(n).getTime();return Math.round(r/h)+1}(t);return"Io"===n?r.ordinalNumber(o,{unit:"week"}):p(o,n.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):L.d(e,t)},D:function(t,n,r){var o=function(t){e(1,arguments);var n=a(t),r=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var o=n.getTime(),i=r-o;return Math.floor(i/c)+1}(t);return"Do"===n?r.ordinalNumber(o,{unit:"dayOfYear"}):p(o,n.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return p(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return p(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return p(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return L.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):L.H(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):p(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):p(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):L.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):L.s(e,t)},S:function(e,t){return L.S(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return C(a);case"XXXX":case"XX":return E(a);default:return E(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return C(a);case"xxxx":case"xx":return E(a);default:return E(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+M(a,":");default:return"GMT"+E(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+M(a,":");default:return"GMT"+E(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return p(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return p((r._originalDate||e).getTime(),t.length)}};function M(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+p(o,2)}function C(e,t){return e%60==0?(e>0?"-":"+")+p(Math.abs(e)/60,2):E(e,t)}function E(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+p(Math.floor(a/60),2)+n+p(a%60,2)}const S=k;var D=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},x=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},P={p:x,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return D(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",D(a,t)).replace("{{time}}",x(o,t))}};const q=P;function U(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var W=["D","DD"],H=["YY","YYYY"];function j(e){return-1!==W.indexOf(e)}function Y(e){return-1!==H.indexOf(e)}function N(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var O={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function F(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}var A,$={date:F({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:F({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:F({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},B={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function I(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=e.formattingValues[o]||e.formattingValues[a]}else{var i=e.defaultWidth,s=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[s]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function z(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,s=o[0],d=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(d)?R(d,(function(e){return e.test(s)})):Q(d,(function(e){return e.test(s)}));i=e.valueCallback?e.valueCallback(c):c,i=n.valueCallback?n.valueCallback(i):i;var u=t.slice(s.length);return{value:i,rest:u}}}function Q(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function R(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const G={code:"en-US",formatDistance:function(e,t,n){var r,a=O[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:$,formatRelative:function(e,t,n,r){return B[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:I({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:I({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:I({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:I({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:I({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(A={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(A.matchPattern);if(!n)return null;var r=n[0],a=e.match(A.parsePattern);if(!a)return null;var o=A.valueCallback?A.valueCallback(a[0]):a[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(r.length);return{value:o,rest:i}}),era:z({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:z({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:z({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:z({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:z({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var X=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,J=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,K=/^'([^]*?)'?$/,_=/''/g,V=/[a-zA-Z]/;function Z(t,n,r){var s,c,u,l,m,h,f,v,y,w,b,p,T,L,k,M,C,E;e(2,arguments);var D=String(n),x=g(),P=null!==(s=null!==(c=null==r?void 0:r.locale)&&void 0!==c?c:x.locale)&&void 0!==s?s:G,W=i(null!==(u=null!==(l=null!==(m=null!==(h=null==r?void 0:r.firstWeekContainsDate)&&void 0!==h?h:null==r||null===(f=r.locale)||void 0===f||null===(v=f.options)||void 0===v?void 0:v.firstWeekContainsDate)&&void 0!==m?m:x.firstWeekContainsDate)&&void 0!==l?l:null===(y=x.locale)||void 0===y||null===(w=y.options)||void 0===w?void 0:w.firstWeekContainsDate)&&void 0!==u?u:1);if(!(W>=1&&W<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var H=i(null!==(b=null!==(p=null!==(T=null!==(L=null==r?void 0:r.weekStartsOn)&&void 0!==L?L:null==r||null===(k=r.locale)||void 0===k||null===(M=k.options)||void 0===M?void 0:M.weekStartsOn)&&void 0!==T?T:x.weekStartsOn)&&void 0!==p?p:null===(C=x.locale)||void 0===C||null===(E=C.options)||void 0===E?void 0:E.weekStartsOn)&&void 0!==b?b:0);if(!(H>=0&&H<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!P.localize)throw new RangeError("locale must contain localize property");if(!P.formatLong)throw new RangeError("locale must contain formatLong property");var O=a(t);if(!o(O))throw new RangeError("Invalid time value");var F=U(O),A=d(O,F),$={firstWeekContainsDate:W,weekStartsOn:H,locale:P,_originalDate:O},B=D.match(J).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,q[t])(e,P.formatLong):e})).join("").match(X).map((function(e){if("''"===e)return"'";var a=e[0];if("'"===a)return ee(e);var o=S[a];if(o)return null!=r&&r.useAdditionalWeekYearTokens||!Y(e)||N(e,n,String(t)),null!=r&&r.useAdditionalDayOfYearTokens||!j(e)||N(e,n,String(t)),o(A,e,P.localize,$);if(a.match(V))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return e})).join("");return B}function ee(e){var t=e.match(K);return t?t[1].replace(_,"'"):e}const te=function(){function e(e){const t=document.querySelector(".projects-list");t.innerHTML="";const n=Object.assign({},e);delete n.all,delete n.today,delete n.week;for(const e in n){let r=0;n[e].forEach((e=>{e.checked||r++}));const a=document.createElement("div");a.classList.add("project-item");const o=document.createElement("button");o.classList.add("project-name"),o.textContent=e;const i=document.createElement("p");i.classList.add("project-counter"),i.textContent=`${r}`,a.appendChild(o),a.appendChild(i),t.appendChild(a)}}function t(t,n){if(t instanceof Element){const e=t.children,n=e[0],r=e[1],a=n.children[0],o=n.children[1],i=r.children[0],s=r.children[1],d=r.children[2];a.classList.remove("fa-square"),a.classList.add("fa-square-check"),o.classList.toggle("selected"),o.classList.toggle("strike"),i.classList.toggle("done"),s.classList.toggle("selected"),d.classList.toggle("selected")}else if(t instanceof Event){const r=t.target.parentElement.parentElement,a=t.target;a.classList.toggle("fa-square"),a.classList.toggle("fa-square-check");const o=r.children,i=o[0],s=o[1],d=i.children[1],c=s.children[0],u=s.children[1],l=s.children[2];d.classList.toggle("selected"),d.classList.toggle("strike"),c.classList.toggle("done"),u.classList.toggle("selected"),l.classList.toggle("selected");const m=Number(r.dataset.index),h=r.dataset.project;n[h][m].checked=!n[h][m].checked,ne.storeTodos(n),e(n)}}return{renderFilterCounts:function(e){let t=0,n=0,r=0;const a=document.querySelector(".all"),o=document.querySelector(".today"),i=document.querySelector(".week"),s=Object.assign({},e),d=Object.assign({},e);delete s.today,delete d.week;const c=new Date;n=e.today.reduce(((e,t)=>e+Number(!t.checked)),0),r=e.week.reduce(((e,t)=>e+Number(!t.checked)),0);for(const n in e)e[n].forEach((e=>{e.checked||t++}));for(const e in s)s[e].forEach((e=>{const t=new Date(e.dueDate);c.getDate()===t.getDate()&&c.getMonth()===t.getMonth()&&c.getFullYear()===t.getFullYear()&&(e.checked||n++)}));for(const e in d)d[e].forEach((e=>{const t=new Date(e.dueDate);Math.abs(c.getTime()-t.getTime())/864e5<=7&&(e.checked||r++)}));a.textContent=`${t}`,o.textContent=`${n}`,i.textContent=`${r}`},renderHighlightedFilters:function(e){const t=document.querySelectorAll(".filters-btn"),n=document.querySelectorAll(".project-name");t.forEach((e=>{e.classList.remove("clicked")})),n.forEach((e=>{e.classList.remove("clicked")})),e instanceof Event?e.target.classList.add("clicked"):"string"==typeof e&&(t.forEach((t=>{("all"===e&&t.classList.contains("all-btn")||"today"===e&&t.classList.contains("today-btn")||"week"===e&&t.classList.contains("week-btn"))&&t.classList.add("clicked")})),n.forEach((t=>{t.textContent===e&&t.classList.add("clicked")})))},renderProjectList:e,renderAllTodos:function(e,n){n.innerHTML="";for(const r in e)e[r].forEach(((e,r)=>{const a=new Date(e.dueDate),o=Z(a,"MMM"),i=Z(a,"do"),s=document.createElement("div"),d=document.createElement("div"),c=document.createElement("div"),u=document.createElement("i"),l=document.createElement("p"),m=document.createElement("button"),h=document.createElement("p"),f=document.createElement("i"),g=document.createElement("i");s.classList.add("list-item"),s.classList.add(`${e.priority}-priority`),s.setAttribute("data-index",`${r}`),s.setAttribute("data-project",`${e.project}`),d.classList.add("list-item-left"),c.classList.add("list-item-right"),u.classList.add("fa-regular","fa-square"),l.classList.add("item-description"),l.textContent=e.title,m.classList.add("item-notes"),m.textContent="NOTES",h.classList.add("item-date"),h.textContent=`${o} ${i}`,f.classList.add("fa-solid","fa-pen-to-square"),g.classList.add("fa-solid","fa-trash-can"),d.appendChild(u),d.appendChild(l),c.appendChild(m),c.appendChild(h),c.appendChild(f),c.appendChild(g),s.appendChild(d),s.appendChild(c),e.checked&&t(s),n.appendChild(s)}));ne.storeTodos(e)},renderTodayTodos:function(e,t){ne.storeTodos(e)},renderWeekTodos:function(e,t){ne.storeTodos(e)},renderProjectTodos:function(e,t){ne.storeTodos(e)},renderCheckedTodo:t,renderNotesPopup:function(e,t){const n=document.querySelector(".popup-notes"),r=document.querySelector(".notes-title"),a=document.querySelector(".notes-project"),o=document.querySelector(".notes-date"),i=document.querySelector(".notes-priority"),s=document.querySelector(".notes-details");let d,c;r.innerHTML="",a.innerHTML="",o.innerHTML="",i.innerHTML="",s.innerHTML="";const u=e.target;if(u instanceof HTMLElement){const e=u.parentElement;if(e instanceof HTMLElement){const n=e.parentElement;if(n instanceof HTMLElement){d=Number(n.dataset.index),c=n.dataset.project;const e=Z(new Date(t[c][d].dueDate),"do"),u=Z(new Date(t[c][d].dueDate),"MMM"),l=Z(new Date(t[c][d].dueDate),"yyyy");r.textContent=t[c][d].title,a.textContent=t[c][d].project,o.textContent=`${u} ${e}, ${l}`,i.textContent=t[c][d].priority[0].toUpperCase()+t[c][d].priority.slice(1),s.textContent=t[c][d].details}}}n.classList.remove("invisible-notes")},renderEditPopup:function(e,t){const n=document.querySelector(".popup-edit"),r=document.querySelector(".edit-title-textarea"),a=document.querySelector(".edit-details-textarea"),o=document.getElementById("edit-date"),i=document.getElementById("edit-low"),s=document.getElementById("edit-medium"),d=document.getElementById("edit-high"),c=document.getElementById("edit-low-label"),u=document.getElementById("edit-medium-label"),l=document.getElementById("edit-high-label");let m,h;r.innerHTML="",a.innerHTML="";const f=e.target;if(f instanceof HTMLElement){const e=f.parentElement;if(e instanceof HTMLElement){const n=e.parentElement;if(n instanceof HTMLElement){m=Number(n.dataset.index),h=n.dataset.project;const e=new Date(t[h][m].dueDate),f=Z(e,"MM"),g=Z(e,"dd"),v=`${Z(e,"yyyy")}-${f}-${g}`;r.textContent=t[h][m].title,a.textContent=t[h][m].details,o.removeAttribute("value"),o.setAttribute("value",v),c.classList.contains("low-checked")&&(c.classList.remove("low-checked"),c.classList.add("low")),u.classList.contains("medium-checked")&&(u.classList.remove("medium-checked"),u.classList.add("medium")),l.classList.contains("high-checked")&&(l.classList.remove("high-checked"),l.classList.add("high")),"low"===t[h][m].priority?(i.checked=!0,c.classList.remove("low"),c.classList.add("low-checked")):"medium"===t[h][m].priority?(s.checked=!0,u.classList.remove("medium"),u.classList.add("medium-checked")):"high"===t[h][m].priority&&(d.checked=!0,l.classList.remove("high"),l.classList.add("high-checked"))}}}n.classList.remove("invisible-edit")},renderEmptyProjectPopup:function(e,t,n){}}}(),ne=function(){let e="all";function t(t){e=t,te.renderHighlightedFilters(e)}function n(e,n,r){r&&("All"===r.target.textContent?(t("all"),te.renderAllTodos(e,n)):"Today"===r.target.textContent?t("today"):"This week"===r.target.textContent?t("week"):t(r.target.textContent))}function r(e){localStorage.setItem("todos",JSON.stringify(e))}return{setSelectedProject:t,getSelectedProject:function(){return e},createTodo:function(e,t,n,r,a,o=!1){return{title:e,details:t,dueDate:n,priority:r,project:a,checked:o}},addProject:function(e,t,n){e.preventDefault(),r(t)},addTodo:function(e,t,n){e.preventDefault()},editTodo:function(e,t,a){e.preventDefault();const o=document.querySelector("#edit-date").value,i=`${o.slice(5,10)}-${o.slice(0,4)}`;let s,d;const c=e.target;if(c instanceof HTMLElement){const e=c.firstElementChild;if(e instanceof HTMLElement){const o=e.children[0];if(o instanceof HTMLElement){const e=o.children[0];e instanceof HTMLElement&&(s=Number(e.dataset.index),d=e.dataset.project,t[d][s].title=document.querySelector(".edit-title-textarea").value,t[d][s].details=document.querySelector(".edit-details-textarea").value,t[d][s].dueDate=i,t[d][s].priority=document.querySelector('[name="edit-todo-priority"]:checked').value,n(t,a),r(t))}}}},deleteTodo:function(e,t,a){let o,i;const s=e.target;if(s instanceof HTMLElement){const e=s.parentElement;if(e instanceof HTMLElement){const s=e.parentElement;s instanceof HTMLElement&&(o=Number(s.dataset.index),i=s.dataset.project,t[i].splice(o,1),r(t),n(t,a),te.renderProjectList(t))}}},manageTodosRender:n,storeTodos:r}}(),re=new Date,ae=`${Z(re,"MM")}-${Z(re,"dd")}-${Z(re,"yyyy")}`,oe=new Date(re.getFullYear(),re.getMonth(),re.getDate()-7),ie=`${Z(oe,"MM")}-${Z(oe,"dd")}-${Z(oe,"yyyy")}`,se=new Date(re.getFullYear(),re.getMonth(),re.getDate()+5),de=`${Z(se,"MM")}-${Z(se,"dd")}-${Z(se,"yyyy")}`,ce=new Date(re.getFullYear(),re.getMonth(),re.getDate()+32),ue=`${Z(ce,"MM")}-${Z(ce,"dd")}-${Z(ce,"yyyy")}`,le=function(){var e,t,n,r;let a;const o=localStorage.getItem("todos");return null!==o?a=JSON.parse(o):(a={all:[],today:[],week:[],"Kitchen renovation":[]},null===(e=a["Kitchen renovation"])||void 0===e||e.push(ne.createTodo("Remove vinyl floor","replace with subfloor",de,"high","Kitchen renovation")),null===(t=a["Kitchen renovation"])||void 0===t||t.push(ne.createTodo("Build cabinets","pre-painted cabinets only",ie,"low","Kitchen renovation",!0)),null===(n=a["Kitchen renovation"])||void 0===n||n.push(ne.createTodo("Install countertop","leave room for butcher block",ue,"medium","Kitchen renovation")),null===(r=a.all)||void 0===r||r.push(ne.createTodo("Finish book for book club","let Angela borrow afterward",ae,"high","all"))),a}(),me=function(){const e=document.querySelector(".main-list");return{loadPage:function(){te.renderFilterCounts(le),document.querySelectorAll(".filters-btn").forEach((t=>{t.addEventListener("click",(t=>ne.manageTodosRender(le,e,t)))})),te.renderProjectList(le),document.querySelectorAll(".project-name").forEach((t=>{t.addEventListener("click",(t=>ne.manageTodosRender(le,e,t)))})),function(){const e=document.querySelector(".main-dashboard");document.querySelector(".fa-bars").addEventListener("click",(()=>e.style.visibility="hidden"===e.style.visibility?"visible":"hidden"))}(),te.renderAllTodos(le,e),document.querySelectorAll("fa-square").forEach((e=>{e.addEventListener("click",(e=>te.renderCheckedTodo(e,le)))})),function(){const e=document.querySelectorAll(".item-notes"),t=document.querySelector(".popup-notes"),n=document.querySelector(".notes-close");e.forEach((e=>{e.addEventListener("click",(e=>te.renderNotesPopup(e,le))),n.addEventListener("click",(()=>t.classList.add("invisible-notes")))}))}(),document.querySelectorAll(".fa-pen-to-square").forEach((t=>{t.addEventListener("click",(t=>{te.renderEditPopup(t,le),function(){const t=document.querySelector(".popup-edit"),n=document.querySelector(".edit-close"),r=document.querySelector(".edit-form"),a=document.getElementById("edit-low"),o=document.getElementById("edit-medium"),i=document.getElementById("edit-high"),s=document.getElementById("edit-low-label"),d=document.getElementById("edit-medium-label"),c=document.getElementById("edit-high-label");n.addEventListener("click",(()=>t.classList.add("invisible-edit"))),r.addEventListener("submit",(n=>{t.classList.add("invisible-edit"),ne.editTodo(n,le,e)})),a.addEventListener("click",(()=>{s.classList.contains("low")&&(s.classList.remove("low"),s.classList.add("low-checked")),d.classList.contains("medium-checked")&&(d.classList.remove("medium-checked"),d.classList.add("medium")),c.classList.contains("high-checked")&&(c.classList.remove("high-checked"),c.classList.add("high"))})),o.addEventListener("click",(()=>{s.classList.contains("low-checked")&&(s.classList.remove("low-checked"),s.classList.add("low")),d.classList.contains("medium")&&(d.classList.remove("medium"),d.classList.add("medium-checked")),c.classList.contains("high-checked")&&(c.classList.remove("high-checked"),c.classList.add("high"))})),i.addEventListener("click",(()=>{s.classList.contains("low-checked")&&(s.classList.remove("low-checked"),s.classList.add("low")),d.classList.contains("medium-checked")&&(d.classList.remove("medium-checked"),d.classList.add("medium")),c.classList.contains("high")&&(c.classList.remove("high"),c.classList.add("high-checked"))}))}()}))})),document.querySelectorAll(".fa-trash-can").forEach((t=>{t.addEventListener("click",(t=>{ne.deleteTodo(t,le,e)}))}))}}}();document.addEventListener("DOMContentLoaded",me.loadPage)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,