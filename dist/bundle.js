(()=>{"use strict";const e=function(){let e="all";function t(t){e=t,fe.renderHighlightedFilters(e)}function n(){return e}function a(e,t,n,a,o,r=!1){return{title:e,details:t,dueDate:n,priority:a,project:o,checked:r}}function o(e){localStorage.setItem("todos",JSON.stringify(e)),fe.reloadContent(e)}return{setSelectedProject:t,getSelectedProject:n,addProject:function(e,t){e.preventDefault();const n=document.querySelector("#add-project").value;if(n){if("all"===n.toLowerCase()||"today"===n.toLowerCase()||"week"===n.toLowerCase()||"this week"===n.toLowerCase()||n in t)return;t[n]=[],o(t)}},deleteProject:function(e){delete e[n()],t("all"),o(e)},addProjectTodo:function(e,t){e.preventDefault();const r=document.querySelector(".add-new-todo-input").value,i=document.querySelector(".add-new-todo-textarea").value,d=document.querySelector(".add-new-date-input").value,s=document.querySelector('[name="new-todo-priority"]:checked').value,c=n(),l=a(r,i,`${d.slice(5,10)}-${d.slice(0,4)}`,s,c);t[c].push(l),o(t)},createTodo:a,addTodo:function(e,t){e.preventDefault();const r=document.querySelector(".add-todo-input").value,i=document.querySelector(".add-todo-textarea").value,d=document.querySelector("#new-date").value,s=document.querySelector('[name="new-priority"]:checked').value,c=n(),l=a(r,i,`${d.slice(5,10)}-${d.slice(0,4)}`,s,c);t[c].push(l),o(t)},checkOffTodo:function(e,t,n){n[t][e].checked=n[t][e].checked,o(n)},editTodo:function(e,t,n,a){n.preventDefault();const r=document.querySelector("#edit-date").value,i=`${r.slice(5,10)}-${r.slice(0,4)}`;a[t][e].title=document.querySelector(".edit-title-textarea").value,a[t][e].details=document.querySelector(".edit-details-textarea").value,a[t][e].dueDate=i,a[t][e].priority=document.querySelector('[name="edit-todo-priority"]:checked').value,o(a)},deleteTodo:function(e,t){let n,a;const r=e.target;if(r instanceof HTMLElement){const e=r.parentElement;if(e instanceof HTMLElement){const r=e.parentElement;r instanceof HTMLElement&&(n=Number(r.dataset.index),a=r.dataset.project,t[a].splice(n,1),o(t))}}},storeTodos:o,manageTodosRender:function(e,a){if(a){const n=a.target.textContent;if("All"===n)t("all"),fe.renderAllTodos(e);else if("Today"===n)t("today"),fe.renderTodayTodos(e);else if("This week"===n)t("week"),fe.renderWeekTodos(e);else{t(n);let a=e[n].length;e[n].forEach((e=>{e.checked&&a--})),a<1?fe.renderEmptyProjectPopup():fe.renderProjectTodos(e)}}else a||("all"===n()?fe.renderAllTodos(e):"today"===n()?fe.renderTodayTodos(e):"week"===n()?fe.renderWeekTodos(e):fe.renderProjectTodos(e))}}}();function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function a(e){return t(1,arguments),e instanceof Date||"object"===n(e)&&"[object Date]"===Object.prototype.toString.call(e)}function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function r(e){t(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===o(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function i(e){if(t(1,arguments),!a(e)&&"number"!=typeof e)return!1;var n=r(e);return!isNaN(Number(n))}function d(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function s(e,n){t(2,arguments);var a=r(e).getTime(),o=d(n);return new Date(a+o)}function c(e,n){t(2,arguments);var a=d(n);return s(e,-a)}var l=864e5;function u(e){t(1,arguments);var n=1,a=r(e),o=a.getUTCDay(),i=(o<n?7:0)+o-n;return a.setUTCDate(a.getUTCDate()-i),a.setUTCHours(0,0,0,0),a}function m(e){t(1,arguments);var n=r(e),a=n.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(a+1,0,4),o.setUTCHours(0,0,0,0);var i=u(o),d=new Date(0);d.setUTCFullYear(a,0,4),d.setUTCHours(0,0,0,0);var s=u(d);return n.getTime()>=i.getTime()?a+1:n.getTime()>=s.getTime()?a:a-1}function h(e){t(1,arguments);var n=m(e),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var o=u(a);return o}var f=6048e5,g={};function v(){return g}function y(e,n){var a,o,i,s,c,l,u,m;t(1,arguments);var h=v(),f=d(null!==(a=null!==(o=null!==(i=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==i?i:h.weekStartsOn)&&void 0!==o?o:null===(u=h.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==a?a:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=r(e),y=g.getUTCDay(),w=(y<f?7:0)+y-f;return g.setUTCDate(g.getUTCDate()-w),g.setUTCHours(0,0,0,0),g}function w(e,n){var a,o,i,s,c,l,u,m;t(1,arguments);var h=r(e),f=h.getUTCFullYear(),g=v(),w=d(null!==(a=null!==(o=null!==(i=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==i?i:g.firstWeekContainsDate)&&void 0!==o?o:null===(u=g.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==a?a:1);if(!(w>=1&&w<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(f+1,0,w),p.setUTCHours(0,0,0,0);var b=y(p,n),L=new Date(0);L.setUTCFullYear(f,0,w),L.setUTCHours(0,0,0,0);var k=y(L,n);return h.getTime()>=b.getTime()?f+1:h.getTime()>=k.getTime()?f:f-1}function p(e,n){var a,o,r,i,s,c,l,u;t(1,arguments);var m=v(),h=d(null!==(a=null!==(o=null!==(r=null!==(i=null==n?void 0:n.firstWeekContainsDate)&&void 0!==i?i:null==n||null===(s=n.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==r?r:m.firstWeekContainsDate)&&void 0!==o?o:null===(l=m.locale)||void 0===l||null===(u=l.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:1),f=w(e,n),g=new Date(0);g.setUTCFullYear(f,0,h),g.setUTCHours(0,0,0,0);var p=y(g,n);return p}var b=6048e5;function L(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}var k={y:function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return L("yy"===t?a%100:a,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):L(n+1,2)},d:function(e,t){return L(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return L(e.getUTCHours()%12||12,t.length)},H:function(e,t){return L(e.getUTCHours(),t.length)},m:function(e,t){return L(e.getUTCMinutes(),t.length)},s:function(e,t){return L(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,a=e.getUTCMilliseconds();return L(Math.floor(a*Math.pow(10,n-3)),t.length)}};const T=k;var E={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),o=a>0?a:1-a;return n.ordinalNumber(o,{unit:"year"})}return T.y(e,t)},Y:function(e,t,n,a){var o=w(e,a),r=o>0?o:1-o;return"YY"===t?L(r%100,2):"Yo"===t?n.ordinalNumber(r,{unit:"year"}):L(r,t.length)},R:function(e,t){return L(m(e),t.length)},u:function(e,t){return L(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return L(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return L(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return T.M(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return L(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,n,a,o){var i=function(e,n){t(1,arguments);var a=r(e),o=y(a,n).getTime()-p(a,n).getTime();return Math.round(o/b)+1}(e,o);return"wo"===n?a.ordinalNumber(i,{unit:"week"}):L(i,n.length)},I:function(e,n,a){var o=function(e){t(1,arguments);var n=r(e),a=u(n).getTime()-h(n).getTime();return Math.round(a/f)+1}(e);return"Io"===n?a.ordinalNumber(o,{unit:"week"}):L(o,n.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):T.d(e,t)},D:function(e,n,a){var o=function(e){t(1,arguments);var n=r(e),a=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var o=n.getTime(),i=a-o;return Math.floor(i/l)+1}(e);return"Do"===n?a.ordinalNumber(o,{unit:"dayOfYear"}):L(o,n.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var o=e.getUTCDay(),r=(o-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(r);case"ee":return L(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var o=e.getUTCDay(),r=(o-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(r);case"cc":return L(r,t.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),o=0===a?7:a;switch(t){case"i":return String(o);case"ii":return L(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,o=e.getUTCHours();switch(a=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,o=e.getUTCHours();switch(a=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return T.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):T.H(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):L(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):L(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):T.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):T.s(e,t)},S:function(e,t){return T.S(e,t)},X:function(e,t,n,a){var o=(a._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return C(o);case"XXXX":case"XX":return M(o);default:return M(o,":")}},x:function(e,t,n,a){var o=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return C(o);case"xxxx":case"xx":return M(o);default:return M(o,":")}},O:function(e,t,n,a){var o=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+S(o,":");default:return"GMT"+M(o,":")}},z:function(e,t,n,a){var o=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+S(o,":");default:return"GMT"+M(o,":")}},t:function(e,t,n,a){var o=a._originalDate||e;return L(Math.floor(o.getTime()/1e3),t.length)},T:function(e,t,n,a){return L((a._originalDate||e).getTime(),t.length)}};function S(e,t){var n=e>0?"-":"+",a=Math.abs(e),o=Math.floor(a/60),r=a%60;if(0===r)return n+String(o);var i=t||"";return n+String(o)+i+L(r,2)}function C(e,t){return e%60==0?(e>0?"-":"+")+L(Math.abs(e)/60,2):M(e,t)}function M(e,t){var n=t||"",a=e>0?"-":"+",o=Math.abs(e);return a+L(Math.floor(o/60),2)+n+L(o%60,2)}const q=E;var D=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},x=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},P={p:x,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],o=a[1],r=a[2];if(!r)return D(e,t);switch(o){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",D(o,t)).replace("{{time}}",x(r,t))}};const j=P;function U(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var W=["D","DD"],H=["YY","YYYY"];function N(e){return-1!==W.indexOf(e)}function Y(e){return-1!==H.indexOf(e)}function A(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var O={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function $(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,a=e.formats[n]||e.formats[e.defaultWidth];return a}}var B,F={date:$({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:$({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:$({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},I={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function z(e){return function(t,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,r=null!=n&&n.width?String(n.width):o;a=e.formattingValues[r]||e.formattingValues[o]}else{var i=e.defaultWidth,d=null!=n&&n.width?String(n.width):e.defaultWidth;a=e.values[d]||e.values[i]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function R(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,o=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],r=t.match(o);if(!r)return null;var i,d=r[0],s=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?G(s,(function(e){return e.test(d)})):Q(s,(function(e){return e.test(d)}));i=e.valueCallback?e.valueCallback(c):c,i=n.valueCallback?n.valueCallback(i):i;var l=t.slice(d.length);return{value:i,rest:l}}}function Q(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function G(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const X={code:"en-US",formatDistance:function(e,t,n){var a,o=O[e];return a="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:F,formatRelative:function(e,t,n,a){return I[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:z({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:z({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:z({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:z({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:z({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(B={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(B.matchPattern);if(!n)return null;var a=n[0],o=e.match(B.parsePattern);if(!o)return null;var r=B.valueCallback?B.valueCallback(o[0]):o[0];r=t.valueCallback?t.valueCallback(r):r;var i=e.slice(a.length);return{value:r,rest:i}}),era:R({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:R({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:R({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:R({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:R({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var J=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,K=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,_=/^'([^]*?)'?$/,V=/''/g,Z=/[a-zA-Z]/;function ee(e,n,a){var o,s,l,u,m,h,f,g,y,w,p,b,L,k,T,E,S,C;t(2,arguments);var M=String(n),D=v(),x=null!==(o=null!==(s=null==a?void 0:a.locale)&&void 0!==s?s:D.locale)&&void 0!==o?o:X,P=d(null!==(l=null!==(u=null!==(m=null!==(h=null==a?void 0:a.firstWeekContainsDate)&&void 0!==h?h:null==a||null===(f=a.locale)||void 0===f||null===(g=f.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==m?m:D.firstWeekContainsDate)&&void 0!==u?u:null===(y=D.locale)||void 0===y||null===(w=y.options)||void 0===w?void 0:w.firstWeekContainsDate)&&void 0!==l?l:1);if(!(P>=1&&P<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var W=d(null!==(p=null!==(b=null!==(L=null!==(k=null==a?void 0:a.weekStartsOn)&&void 0!==k?k:null==a||null===(T=a.locale)||void 0===T||null===(E=T.options)||void 0===E?void 0:E.weekStartsOn)&&void 0!==L?L:D.weekStartsOn)&&void 0!==b?b:null===(S=D.locale)||void 0===S||null===(C=S.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==p?p:0);if(!(W>=0&&W<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!x.localize)throw new RangeError("locale must contain localize property");if(!x.formatLong)throw new RangeError("locale must contain formatLong property");var H=r(e);if(!i(H))throw new RangeError("Invalid time value");var O=U(H),$=c(H,O),B={firstWeekContainsDate:P,weekStartsOn:W,locale:x,_originalDate:H},F=M.match(K).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,j[t])(e,x.formatLong):e})).join("").match(J).map((function(t){if("''"===t)return"'";var o=t[0];if("'"===o)return te(t);var r=q[o];if(r)return null!=a&&a.useAdditionalWeekYearTokens||!Y(t)||A(t,n,String(e)),null!=a&&a.useAdditionalDayOfYearTokens||!N(t)||A(t,n,String(e)),r($,t,x.localize,B);if(o.match(Z))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return t})).join("");return F}function te(e){var t=e.match(_);return t?t[1].replace(V,"'"):e}const ne=new Date,ae=ee(ne,"MM"),oe=ee(ne,"dd"),re=ee(ne,"yyyy"),ie=`${ae}-${oe}-${re}`,de=`${re}-${ae}-${oe}`,se=new Date(ne.getFullYear(),ne.getMonth(),ne.getDate()-7),ce=`${ee(se,"MM")}-${ee(se,"dd")}-${ee(se,"yyyy")}`,le=new Date(ne.getFullYear(),ne.getMonth(),ne.getDate()+5),ue=`${ee(le,"MM")}-${ee(le,"dd")}-${ee(le,"yyyy")}`,me=new Date(ne.getFullYear(),ne.getMonth(),ne.getDate()+32),he=`${ee(me,"MM")}-${ee(me,"dd")}-${ee(me,"yyyy")}`,fe=function(){const t=document.querySelector(".main-list");function n(e){let t=0,n=0,a=0;const o=document.querySelector(".all"),r=document.querySelector(".today"),i=document.querySelector(".week"),d=Object.assign({},e),s=Object.assign({},e);delete d.today,delete s.week;const c=new Date;n=e.today.reduce(((e,t)=>e+Number(!t.checked)),0),a=e.week.reduce(((e,t)=>e+Number(!t.checked)),0);for(const n in e)e[n].forEach((e=>{e.checked||t++}));for(const e in d)d[e].forEach((e=>{const t=new Date(e.dueDate);c.getDate()===t.getDate()&&c.getMonth()===t.getMonth()&&c.getFullYear()===t.getFullYear()&&(e.checked||n++)}));for(const e in s)s[e].forEach((e=>{const t=new Date(e.dueDate);Math.abs(c.getTime()-t.getTime())/864e5<=7&&(e.checked||a++)}));o.textContent=`${t}`,r.textContent=`${n}`,i.textContent=`${a}`}function a(e){const t=document.querySelector(".projects-list");t.innerHTML="";const n=Object.assign({},e);delete n.all,delete n.today,delete n.week;for(const e in n){let a=0;n[e].forEach((e=>{e.checked||a++}));const o=document.createElement("div");o.classList.add("project-item");const r=document.createElement("button");r.classList.add("project-name"),r.textContent=e;const i=document.createElement("p");i.classList.add("project-counter"),i.textContent=`${a}`,o.appendChild(r),o.appendChild(i),t.appendChild(o)}}function o(t,n){if(t instanceof Element){const e=t.children,n=e[0],a=e[1],o=n.children[0],r=n.children[1],i=a.children[0],d=a.children[1],s=a.children[2];o.classList.remove("fa-square"),o.classList.add("fa-square-check"),r.classList.toggle("selected"),r.classList.toggle("strike"),i.classList.toggle("done"),d.classList.toggle("selected"),s.classList.toggle("selected")}else if(t instanceof Event){const a=t.target.parentElement.parentElement,o=t.target;o.classList.toggle("fa-square"),o.classList.toggle("fa-square-check");const r=a.children,i=r[0],d=r[1],s=i.children[1],c=d.children[0],l=d.children[1],u=d.children[2];s.classList.toggle("selected"),s.classList.toggle("strike"),c.classList.toggle("done"),l.classList.toggle("selected"),u.classList.toggle("selected");const m=Number(a.dataset.index),h=a.dataset.project;e.checkOffTodo(m,h,n)}}return{reloadContent:function(t){e.manageTodosRender(t),n(t),a(t)},renderHighlightedFilters:function(e){const t=document.querySelectorAll(".filters-btn"),n=document.querySelectorAll(".project-name");t.forEach((e=>{e.classList.remove("clicked")})),n.forEach((e=>{e.classList.remove("clicked")})),e instanceof Event?e.target.classList.add("clicked"):"string"==typeof e&&(t.forEach((t=>{("all"===e&&t.classList.contains("all-btn")||"today"===e&&t.classList.contains("today-btn")||"week"===e&&t.classList.contains("week-btn"))&&t.classList.add("clicked")})),n.forEach((t=>{t.textContent===e&&t.classList.add("clicked")})))},renderFilterCounts:n,renderProjectList:a,renderAddNewPopup:function(){const e=document.querySelector(".popup-add-new");document.getElementById("new-date").setAttribute("value",de),e.classList.remove("invisible-add-new")},renderEmptyProjectPopup:function(){const t=document.querySelector(".popup-empty-project"),n=document.querySelector(".empty-project-name");n.innerHTML="",n.textContent=e.getSelectedProject(),t.classList.remove("invisible-empty-project")},renderAddTodoPopup:function(){const t=document.querySelector(".popup-add-new-todo"),n=document.querySelector(".add-new-todo-project"),a=document.getElementById("new-todo-date"),o=e.getSelectedProject();n.textContent=o,a.setAttribute("value",de),t.classList.remove("invisible-add-new-todo")},renderAllTodos:function(e){t.innerHTML="";for(const n in e)e[n].forEach(((e,n)=>{const a=new Date(e.dueDate),r=ee(a,"MMM"),i=ee(a,"do"),d=document.createElement("div"),s=document.createElement("div"),c=document.createElement("div"),l=document.createElement("i"),u=document.createElement("p"),m=document.createElement("button"),h=document.createElement("p"),f=document.createElement("i"),g=document.createElement("i");d.classList.add("list-item"),d.classList.add(`${e.priority}-priority`),d.setAttribute("data-index",`${n}`),d.setAttribute("data-project",`${e.project}`),s.classList.add("list-item-left"),c.classList.add("list-item-right"),l.classList.add("fa-regular","fa-square"),u.classList.add("item-description"),u.textContent=e.title,m.classList.add("item-notes"),m.textContent="NOTES",h.classList.add("item-date"),h.textContent=`${r} ${i}`,f.classList.add("fa-solid","fa-pen-to-square"),g.classList.add("fa-solid","fa-trash-can"),s.appendChild(l),s.appendChild(u),c.appendChild(m),c.appendChild(h),c.appendChild(f),c.appendChild(g),d.appendChild(s),d.appendChild(c),e.checked&&o(d),t.appendChild(d)}))},renderTodayTodos:function(e){},renderWeekTodos:function(e){t.innerHTML=""},renderProjectTodos:function(n){t.innerHTML="";const a=n[e.getSelectedProject()];0!==a.length&&a.forEach(((e,n)=>{const a=new Date(e.dueDate),r=ee(a,"MMM"),i=ee(a,"do"),d=document.createElement("div"),s=document.createElement("div"),c=document.createElement("div"),l=document.createElement("i"),u=document.createElement("p"),m=document.createElement("button"),h=document.createElement("p"),f=document.createElement("i"),g=document.createElement("i");d.classList.add("list-item"),d.classList.add(`${e.priority}-priority`),d.setAttribute("data-index",`${n}`),d.setAttribute("data-project",`${e.project}`),s.classList.add("item-left"),c.classList.add("item-right"),l.classList.add("fa-regular","fa-square"),u.classList.add("item-description"),u.textContent=e.title,m.classList.add("item-notes"),m.textContent="NOTES",h.classList.add("item-date"),h.textContent=`${r} ${i}`,f.classList.add("fa-solid","fa-pen-to-square"),g.classList.add("fa-solid","fa-trash-can"),s.appendChild(l),s.appendChild(u),c.appendChild(m),c.appendChild(h),c.appendChild(f),c.appendChild(g),d.appendChild(s),d.appendChild(c),e.checked&&o(d),t.appendChild(d)}))},renderCheckedTodo:o,renderNotesPopup:function(e,t){const n=document.querySelector(".popup-notes"),a=document.querySelector(".notes-title"),o=document.querySelector(".notes-project"),r=document.querySelector(".notes-date"),i=document.querySelector(".notes-priority"),d=document.querySelector(".notes-details");let s,c;a.innerHTML="",o.innerHTML="",r.innerHTML="",i.innerHTML="",d.innerHTML="";const l=e.target;if(l instanceof HTMLElement){const e=l.parentElement;if(e instanceof HTMLElement){const l=e.parentElement;if(l instanceof HTMLElement){s=Number(l.dataset.index),c=l.dataset.project;const e=ee(new Date(t[c][s].dueDate),"do"),u=ee(new Date(t[c][s].dueDate),"MMM"),m=ee(new Date(t[c][s].dueDate),"yyyy");a.textContent=t[c][s].title,o.textContent=t[c][s].project,r.textContent=`${u} ${e}, ${m}`,i.textContent=t[c][s].priority[0].toUpperCase()+t[c][s].priority.slice(1),d.textContent=t[c][s].details,n.classList.remove("invisible-notes")}}}},renderEditPopup:function(e,t,n){const a=document.querySelector(".popup-edit"),o=document.querySelector(".edit-title-textarea"),r=document.querySelector(".edit-details-textarea"),i=document.getElementById("edit-date"),d=document.getElementById("edit-low"),s=document.getElementById("edit-medium"),c=document.getElementById("edit-high"),l=document.getElementById("edit-low-label"),u=document.getElementById("edit-medium-label"),m=document.getElementById("edit-high-label");o.innerHTML="",r.innerHTML="";const h=new Date(n[t][e].dueDate),f=ee(h,"MM"),g=ee(h,"dd"),v=`${ee(h,"yyyy")}-${f}-${g}`;o.textContent=n[t][e].title,r.textContent=n[t][e].details,i.removeAttribute("value"),i.setAttribute("value",v),l.classList.contains("low-checked")&&(l.classList.remove("low-checked"),l.classList.add("low")),u.classList.contains("medium-checked")&&(u.classList.remove("medium-checked"),u.classList.add("medium")),m.classList.contains("high-checked")&&(m.classList.remove("high-checked"),m.classList.add("high")),"low"===n[t][e].priority?(d.checked=!0,l.classList.remove("low"),l.classList.add("low-checked")):"medium"===n[t][e].priority?(s.checked=!0,u.classList.remove("medium"),u.classList.add("medium-checked")):"high"===n[t][e].priority&&(c.checked=!0,m.classList.remove("high"),m.classList.add("high-checked")),a.classList.remove("invisible-edit")}}}(),ge=function(){var t,n,a,o;let r;const i=localStorage.getItem("todos");return null!==i?r=JSON.parse(i):(r={all:[],today:[],week:[],"Kitchen renovation":[]},null===(t=r["Kitchen renovation"])||void 0===t||t.push(e.createTodo("Remove vinyl floor","replace with subfloor",ue,"high","Kitchen renovation")),null===(n=r["Kitchen renovation"])||void 0===n||n.push(e.createTodo("Build cabinets","pre-painted cabinets only",ce,"low","Kitchen renovation",!0)),null===(a=r["Kitchen renovation"])||void 0===a||a.push(e.createTodo("Install countertop","leave room for butcher block",he,"medium","Kitchen renovation")),null===(o=r.all)||void 0===o||o.push(e.createTodo("Finish book for book club","let Angela borrow afterward",ie,"high","all"))),r}(),ve=function(){(function(){const e=document.querySelector(".main-dashboard");document.querySelector(".fa-bars").addEventListener("click",(()=>e.style.visibility="hidden"===e.style.visibility?"visible":"hidden"))})(),fe.renderHighlightedFilters("all"),fe.renderFilterCounts(ge),document.querySelectorAll(".filters-btn").forEach((t=>{t.addEventListener("click",(t=>e.manageTodosRender(ge,t)))})),fe.renderProjectList(ge),document.querySelectorAll(".project-name").forEach((t=>{t.addEventListener("click",(t=>e.manageTodosRender(ge,t))),function(){const t=document.querySelector(".popup-empty-project"),n=document.querySelector(".empty-project-add-btn"),a=document.querySelector(".empty-project-delete-btn");n.addEventListener("click",(()=>{fe.renderAddTodoPopup(),function(){const t=document.querySelector(".popup-add-new-todo"),n=document.querySelector(".add-new-todo-form"),a=document.querySelector(".add-new-delete-project"),o=document.querySelector(".add-new-date-input"),r=document.getElementById("new-todo-low"),i=document.getElementById("new-todo-medium"),d=document.getElementById("new-todo-high"),s=document.querySelector(".low"),c=document.querySelector(".medium"),l=document.querySelector(".high");n.addEventListener("submit",(a=>{e.addProjectTodo(a,ge),t.classList.add("invisible-add-new-todo"),n.reset(),o.removeAttribute("value")})),a.addEventListener("click",(()=>{e.deleteProject(ge),t.classList.add("invisible-add-new-todo"),n.reset(),o.removeAttribute("value")})),r.addEventListener("click",(()=>{s.classList.contains("low")&&(s.classList.remove("low"),s.classList.add("low-checked")),c.classList.contains("medium-checked")&&(c.classList.remove("medium-checked"),c.classList.add("medium")),l.classList.contains("high-checked")&&(l.classList.remove("high-checked"),l.classList.add("high"))})),i.addEventListener("click",(()=>{s.classList.contains("low-checked")&&(s.classList.remove("low-checked"),s.classList.add("low")),c.classList.contains("medium")&&(c.classList.remove("medium"),c.classList.add("medium-checked")),l.classList.contains("high-checked")&&(l.classList.remove("high-checked"),l.classList.add("high"))})),d.addEventListener("click",(()=>{s.classList.contains("low-checked")&&(s.classList.remove("low-checked"),s.classList.add("low")),c.classList.contains("medium-checked")&&(c.classList.remove("medium-checked"),c.classList.add("medium")),l.classList.contains("high")&&(l.classList.remove("high"),l.classList.add("high-checked"))}))}()})),a.addEventListener("click",(()=>{e.deleteProject(ge),t.classList.add("invisible-empty-project")}))}()})),document.querySelector(".projects-btn").addEventListener("click",(()=>{fe.renderAddNewPopup(),function(){const t=document.querySelector(".popup-add-new"),n=document.querySelector("#add-exit"),a=document.querySelector(".add-todo-form"),o=document.querySelector(".add-project-form"),r=document.querySelector(".add-todo-btn"),i=document.querySelector(".add-project-btn"),d=document.getElementById("new-date"),s=document.getElementById("new-low"),c=document.getElementById("new-medium"),l=document.getElementById("new-high"),u=document.querySelector(".low"),m=document.querySelector(".medium"),h=document.querySelector(".high");n.addEventListener("click",(()=>{t.classList.add("invisible-add-new"),a.reset(),a.style.display="grid",o.reset(),o.style.display="none",r.classList.add("clicked"),i.classList.remove("clicked"),d.removeAttribute("value")})),a.addEventListener("submit",(n=>{e.addTodo(n,ge),t.classList.add("invisible-add-new"),a.reset(),a.style.display="grid",o.reset(),o.style.display="none",r.classList.add("clicked"),i.classList.remove("clicked"),d.removeAttribute("value")})),o.addEventListener("submit",(n=>{e.addProject(n,ge),t.classList.add("invisible-add-new"),a.reset(),a.style.display="grid",o.reset(),o.style.display="none",r.classList.add("clicked"),i.classList.remove("clicked"),d.removeAttribute("value")})),r.addEventListener("click",(()=>{r.classList.add("clicked"),a.style.display="grid",i.classList.remove("clicked"),o.style.display="none"})),i.addEventListener("click",(()=>{i.classList.add("clicked"),o.style.display="grid",r.classList.remove("clicked"),a.style.display="none"})),s.addEventListener("click",(()=>{u.classList.contains("low")&&(u.classList.remove("low"),u.classList.add("low-checked")),m.classList.contains("medium-checked")&&(m.classList.remove("medium-checked"),m.classList.add("medium")),h.classList.contains("high-checked")&&(h.classList.remove("high-checked"),h.classList.add("high"))})),c.addEventListener("click",(()=>{u.classList.contains("low-checked")&&(u.classList.remove("low-checked"),u.classList.add("low")),m.classList.contains("medium")&&(m.classList.remove("medium"),m.classList.add("medium-checked")),h.classList.contains("high-checked")&&(h.classList.remove("high-checked"),h.classList.add("high"))})),l.addEventListener("click",(()=>{u.classList.contains("low-checked")&&(u.classList.remove("low-checked"),u.classList.add("low")),m.classList.contains("medium-checked")&&(m.classList.remove("medium-checked"),m.classList.add("medium")),h.classList.contains("high")&&(h.classList.remove("high"),h.classList.add("high-checked"))}))}()})),fe.renderAllTodos(ge),document.querySelectorAll("fa-square").forEach((e=>{e.addEventListener("click",(e=>fe.renderCheckedTodo(e,ge)))})),function(){const e=document.querySelectorAll(".item-notes"),t=document.querySelector(".popup-notes"),n=document.querySelector(".notes-close");e.forEach((e=>{e.addEventListener("click",(e=>fe.renderNotesPopup(e,ge))),n.addEventListener("click",(()=>t.classList.add("invisible-notes")))}))}(),document.querySelectorAll(".fa-pen-to-square").forEach((t=>{t.addEventListener("click",(t=>{let n,a;const o=t.target;if(o instanceof HTMLElement){const t=o.parentElement;if(t instanceof HTMLElement){const o=t.parentElement;o instanceof HTMLElement&&(n=Number(o.dataset.index),a=o.dataset.project,fe.renderEditPopup(n,a,ge),function(t,n){const a=document.querySelector(".popup-edit"),o=document.querySelector(".edit-close"),r=document.querySelector(".edit-form"),i=document.getElementById("edit-low"),d=document.getElementById("edit-medium"),s=document.getElementById("edit-high"),c=document.getElementById("edit-low-label"),l=document.getElementById("edit-medium-label"),u=document.getElementById("edit-high-label");o.addEventListener("click",(()=>a.classList.add("invisible-edit"))),r.addEventListener("submit",(o=>{a.classList.add("invisible-edit"),e.editTodo(t,n,o,ge)})),i.addEventListener("click",(()=>{c.classList.contains("low")&&(c.classList.remove("low"),c.classList.add("low-checked")),l.classList.contains("medium-checked")&&(l.classList.remove("medium-checked"),l.classList.add("medium")),u.classList.contains("high-checked")&&(u.classList.remove("high-checked"),u.classList.add("high"))})),d.addEventListener("click",(()=>{c.classList.contains("low-checked")&&(c.classList.remove("low-checked"),c.classList.add("low")),l.classList.contains("medium")&&(l.classList.remove("medium"),l.classList.add("medium-checked")),u.classList.contains("high-checked")&&(u.classList.remove("high-checked"),u.classList.add("high"))})),s.addEventListener("click",(()=>{c.classList.contains("low-checked")&&(c.classList.remove("low-checked"),c.classList.add("low")),l.classList.contains("medium-checked")&&(l.classList.remove("medium-checked"),l.classList.add("medium")),u.classList.contains("high")&&(u.classList.remove("high"),u.classList.add("high-checked"))}))}(n,a))}}}))})),function(){const t=document.querySelectorAll(".fa-trash-can"),n=document.querySelector(".popup-delete-todo");t.forEach((t=>{t.addEventListener("click",(t=>{n.classList.remove("invisible-delete-todo"),function(t){const n=document.querySelector(".popup-delete-todo"),a=document.querySelector(".delete-todo-confirm-btn"),o=document.querySelector(".delete-todo-cancel-btn");a.addEventListener("click",(()=>{e.deleteTodo(t,ge),n.classList.add("invisible-delete-todo")})),o.addEventListener("click",(()=>n.classList.add("invisible-delete-todo")))}(t)}))}))}()};document.addEventListener("DOMContentLoaded",ve)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,