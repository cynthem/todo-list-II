(()=>{"use strict";const e=function(){let e="all";function t(t,n,a){e=n,i(t,a)}function n(){return e}function a(e,t,n,a,i,r=!1){return{title:e,details:t,dueDate:n,priority:a,project:i,checked:r}}function i(e,t){localStorage.setItem("todos",JSON.stringify(e)),r(e,t)}function r(e,t){const a=n();if(console.log(e),"all"===a)fe.renderFilterList(e),fe.renderProjectList(e,t),fe.renderHighlightedCategory(),fe.renderAllTodos(e,t);else if("today"===a)fe.renderFilterList(e),fe.renderProjectList(e,t),fe.renderHighlightedCategory(),fe.renderTodayTodos(e,t);else if("week"===a)fe.renderFilterList(e),fe.renderProjectList(e,t),fe.renderHighlightedCategory(),fe.renderWeekTodos(e,t);else{let n=e[a].length;e[a].forEach((e=>{e.checked&&n--})),n<1?(fe.renderHighlightedCategory(),fe.renderEmptyProjectPopup(e,t)):(fe.renderFilterList(e),fe.renderProjectList(e,t),fe.renderHighlightedCategory(),fe.renderProjectTodos(e,t))}}return{setSelectedProject:t,getSelectedProject:n,addProject:function(e,t,n){e.preventDefault();const a=document.querySelector("#add-project").value;if(a){if("all"===a.toLowerCase()||"today"===a.toLowerCase()||"week"===a.toLowerCase()||"this week"===a.toLowerCase()||a in t)return;t[a]=[],i(t,n)}},deleteProject:function(e,a){delete e[n()],t(e,"all",a)},addProjectTodo:function(e,t,r){e.preventDefault();const o=document.querySelector(".add-new-todo-input").value,d=document.querySelector(".add-new-todo-textarea").value,s=document.querySelector(".add-new-date-input").value,c=document.querySelector('[name="new-todo-priority"]:checked').value,l=n(),u=a(o,d,`${s.slice(5,10)}-${s.slice(0,4)}`,c,l);t[l].push(u),i(t,r)},createTodo:a,addTodo:function(e,t,r){e.preventDefault();const o=document.querySelector(".add-todo-input").value,d=document.querySelector(".add-todo-textarea").value,s=document.querySelector("#new-date").value,c=document.querySelector('[name="new-priority"]:checked').value,l=n(),u=a(o,d,`${s.slice(5,10)}-${s.slice(0,4)}`,c,l);t[l].push(u),i(t,r)},checkOffTodo:function(e,t,n,a){n[t][e].checked=!n[t][e].checked,i(n,a)},editTodo:function(e,t,n,a,r){n.preventDefault();const o=document.querySelector("#edit-date").value,d=`${o.slice(5,10)}-${o.slice(0,4)}`;a[t][e].title=document.querySelector(".edit-title-textarea").value,a[t][e].details=document.querySelector(".edit-details-textarea").value,a[t][e].dueDate=d,a[t][e].priority=document.querySelector('[name="edit-todo-priority"]:checked').value,i(a,r)},deleteTodo:function(e,t,n,a){n[t].splice(e,1),i(n,a)},updateTodos:i,manageRerender:r}}();function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function a(e){return t(1,arguments),e instanceof Date||"object"===n(e)&&"[object Date]"===Object.prototype.toString.call(e)}function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function r(e){t(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===i(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(e){if(t(1,arguments),!a(e)&&"number"!=typeof e)return!1;var n=r(e);return!isNaN(Number(n))}function d(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function s(e,n){t(2,arguments);var a=r(e).getTime(),i=d(n);return new Date(a+i)}function c(e,n){t(2,arguments);var a=d(n);return s(e,-a)}var l=864e5;function u(e){t(1,arguments);var n=1,a=r(e),i=a.getUTCDay(),o=(i<n?7:0)+i-n;return a.setUTCDate(a.getUTCDate()-o),a.setUTCHours(0,0,0,0),a}function m(e){t(1,arguments);var n=r(e),a=n.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(a+1,0,4),i.setUTCHours(0,0,0,0);var o=u(i),d=new Date(0);d.setUTCFullYear(a,0,4),d.setUTCHours(0,0,0,0);var s=u(d);return n.getTime()>=o.getTime()?a+1:n.getTime()>=s.getTime()?a:a-1}function h(e){t(1,arguments);var n=m(e),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=u(a);return i}var f=6048e5,g={};function p(){return g}function v(e,n){var a,i,o,s,c,l,u,m;t(1,arguments);var h=p(),f=d(null!==(a=null!==(i=null!==(o=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==o?o:h.weekStartsOn)&&void 0!==i?i:null===(u=h.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==a?a:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=r(e),v=g.getUTCDay(),L=(v<f?7:0)+v-f;return g.setUTCDate(g.getUTCDate()-L),g.setUTCHours(0,0,0,0),g}function L(e,n){var a,i,o,s,c,l,u,m;t(1,arguments);var h=r(e),f=h.getUTCFullYear(),g=p(),L=d(null!==(a=null!==(i=null!==(o=null!==(s=null==n?void 0:n.firstWeekContainsDate)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==o?o:g.firstWeekContainsDate)&&void 0!==i?i:null===(u=g.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==a?a:1);if(!(L>=1&&L<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var y=new Date(0);y.setUTCFullYear(f+1,0,L),y.setUTCHours(0,0,0,0);var w=v(y,n),b=new Date(0);b.setUTCFullYear(f,0,L),b.setUTCHours(0,0,0,0);var E=v(b,n);return h.getTime()>=w.getTime()?f+1:h.getTime()>=E.getTime()?f:f-1}function y(e,n){var a,i,r,o,s,c,l,u;t(1,arguments);var m=p(),h=d(null!==(a=null!==(i=null!==(r=null!==(o=null==n?void 0:n.firstWeekContainsDate)&&void 0!==o?o:null==n||null===(s=n.locale)||void 0===s||null===(c=s.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==r?r:m.firstWeekContainsDate)&&void 0!==i?i:null===(l=m.locale)||void 0===l||null===(u=l.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:1),f=L(e,n),g=new Date(0);g.setUTCFullYear(f,0,h),g.setUTCHours(0,0,0,0);var y=v(g,n);return y}var w=6048e5;function b(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}var E={y:function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return b("yy"===t?a%100:a,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):b(n+1,2)},d:function(e,t){return b(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return b(e.getUTCHours()%12||12,t.length)},H:function(e,t){return b(e.getUTCHours(),t.length)},m:function(e,t){return b(e.getUTCMinutes(),t.length)},s:function(e,t){return b(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,a=e.getUTCMilliseconds();return b(Math.floor(a*Math.pow(10,n-3)),t.length)}};const k=E;var T={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),i=a>0?a:1-a;return n.ordinalNumber(i,{unit:"year"})}return k.y(e,t)},Y:function(e,t,n,a){var i=L(e,a),r=i>0?i:1-i;return"YY"===t?b(r%100,2):"Yo"===t?n.ordinalNumber(r,{unit:"year"}):b(r,t.length)},R:function(e,t){return b(m(e),t.length)},u:function(e,t){return b(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return b(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return b(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return k.M(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return b(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,n,a,i){var o=function(e,n){t(1,arguments);var a=r(e),i=v(a,n).getTime()-y(a,n).getTime();return Math.round(i/w)+1}(e,i);return"wo"===n?a.ordinalNumber(o,{unit:"week"}):b(o,n.length)},I:function(e,n,a){var i=function(e){t(1,arguments);var n=r(e),a=u(n).getTime()-h(n).getTime();return Math.round(a/f)+1}(e);return"Io"===n?a.ordinalNumber(i,{unit:"week"}):b(i,n.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):k.d(e,t)},D:function(e,n,a){var i=function(e){t(1,arguments);var n=r(e),a=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var i=n.getTime(),o=a-i;return Math.floor(o/l)+1}(e);return"Do"===n?a.ordinalNumber(i,{unit:"dayOfYear"}):b(i,n.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var i=e.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(r);case"ee":return b(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var i=e.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(r);case"cc":return b(r,t.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),i=0===a?7:a;switch(t){case"i":return String(i);case"ii":return b(i,t.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,i=e.getUTCHours();switch(a=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,i=e.getUTCHours();switch(a=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return k.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):k.H(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):b(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):b(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):k.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):k.s(e,t)},S:function(e,t){return k.S(e,t)},X:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();if(0===i)return"Z";switch(t){case"X":return C(i);case"XXXX":case"XX":return S(i);default:return S(i,":")}},x:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return C(i);case"xxxx":case"xx":return S(i);default:return S(i,":")}},O:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+M(i,":");default:return"GMT"+S(i,":")}},z:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+M(i,":");default:return"GMT"+S(i,":")}},t:function(e,t,n,a){var i=a._originalDate||e;return b(Math.floor(i.getTime()/1e3),t.length)},T:function(e,t,n,a){return b((a._originalDate||e).getTime(),t.length)}};function M(e,t){var n=e>0?"-":"+",a=Math.abs(e),i=Math.floor(a/60),r=a%60;if(0===r)return n+String(i);var o=t||"";return n+String(i)+o+b(r,2)}function C(e,t){return e%60==0?(e>0?"-":"+")+b(Math.abs(e)/60,2):S(e,t)}function S(e,t){var n=t||"",a=e>0?"-":"+",i=Math.abs(e);return a+b(Math.floor(i/60),2)+n+b(i%60,2)}const x=T;var D=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},j=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},q={p:j,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],i=a[1],r=a[2];if(!r)return D(e,t);switch(i){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",D(i,t)).replace("{{time}}",j(r,t))}};const H=q;function P(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var N=["D","DD"],$=["YY","YYYY"];function U(e){return-1!==N.indexOf(e)}function W(e){return-1!==$.indexOf(e)}function O(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var Y={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function A(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,a=e.formats[n]||e.formats[e.defaultWidth];return a}}var F,B={date:A({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:A({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:A({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},I={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function z(e){return function(t,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var i=e.defaultFormattingWidth||e.defaultWidth,r=null!=n&&n.width?String(n.width):i;a=e.formattingValues[r]||e.formattingValues[i]}else{var o=e.defaultWidth,d=null!=n&&n.width?String(n.width):e.defaultWidth;a=e.values[d]||e.values[o]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function Q(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,i=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],r=t.match(i);if(!r)return null;var o,d=r[0],s=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?R(s,(function(e){return e.test(d)})):G(s,(function(e){return e.test(d)}));o=e.valueCallback?e.valueCallback(c):c,o=n.valueCallback?n.valueCallback(o):o;var l=t.slice(d.length);return{value:o,rest:l}}}function G(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function R(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const X={code:"en-US",formatDistance:function(e,t,n){var a,i=Y[e];return a="string"==typeof i?i:1===t?i.one:i.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:B,formatRelative:function(e,t,n,a){return I[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:z({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:z({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:z({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:z({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:z({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(F={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(F.matchPattern);if(!n)return null;var a=n[0],i=e.match(F.parsePattern);if(!i)return null;var r=F.valueCallback?F.valueCallback(i[0]):i[0];r=t.valueCallback?t.valueCallback(r):r;var o=e.slice(a.length);return{value:r,rest:o}}),era:Q({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Q({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:Q({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Q({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Q({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var J=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,K=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,_=/^'([^]*?)'?$/,V=/''/g,Z=/[a-zA-Z]/;function ee(e,n,a){var i,s,l,u,m,h,f,g,v,L,y,w,b,E,k,T,M,C;t(2,arguments);var S=String(n),D=p(),j=null!==(i=null!==(s=null==a?void 0:a.locale)&&void 0!==s?s:D.locale)&&void 0!==i?i:X,q=d(null!==(l=null!==(u=null!==(m=null!==(h=null==a?void 0:a.firstWeekContainsDate)&&void 0!==h?h:null==a||null===(f=a.locale)||void 0===f||null===(g=f.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==m?m:D.firstWeekContainsDate)&&void 0!==u?u:null===(v=D.locale)||void 0===v||null===(L=v.options)||void 0===L?void 0:L.firstWeekContainsDate)&&void 0!==l?l:1);if(!(q>=1&&q<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var N=d(null!==(y=null!==(w=null!==(b=null!==(E=null==a?void 0:a.weekStartsOn)&&void 0!==E?E:null==a||null===(k=a.locale)||void 0===k||null===(T=k.options)||void 0===T?void 0:T.weekStartsOn)&&void 0!==b?b:D.weekStartsOn)&&void 0!==w?w:null===(M=D.locale)||void 0===M||null===(C=M.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==y?y:0);if(!(N>=0&&N<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!j.localize)throw new RangeError("locale must contain localize property");if(!j.formatLong)throw new RangeError("locale must contain formatLong property");var $=r(e);if(!o($))throw new RangeError("Invalid time value");var Y=P($),A=c($,Y),F={firstWeekContainsDate:q,weekStartsOn:N,locale:j,_originalDate:$},B=S.match(K).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,H[t])(e,j.formatLong):e})).join("").match(J).map((function(t){if("''"===t)return"'";var i=t[0];if("'"===i)return te(t);var r=x[i];if(r)return null!=a&&a.useAdditionalWeekYearTokens||!W(t)||O(t,n,String(e)),null!=a&&a.useAdditionalDayOfYearTokens||!U(t)||O(t,n,String(e)),r(A,t,j.localize,F);if(i.match(Z))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return t})).join("");return B}function te(e){var t=e.match(_);return t?t[1].replace(V,"'"):e}const ne=new Date,ae=ee(ne,"MM"),ie=ee(ne,"dd"),re=ee(ne,"yyyy"),oe=`${ae}-${ie}-${re}`,de=`${re}-${ae}-${ie}`,se=new Date(ne.getFullYear(),ne.getMonth(),ne.getDate()-7),ce=`${ee(se,"MM")}-${ee(se,"dd")}-${ee(se,"yyyy")}`,le=new Date(ne.getFullYear(),ne.getMonth(),ne.getDate()+5),ue=`${ee(le,"MM")}-${ee(le,"dd")}-${ee(le,"yyyy")}`,me=new Date(ne.getFullYear(),ne.getMonth(),ne.getDate()+32),he=`${ee(me,"MM")}-${ee(me,"dd")}-${ee(me,"yyyy")}`,fe=function(){function t(e,t,n){const a=t.children,i=a[0],r=a[1],o=i.children[0],d=i.children[1],s=r.children[0],c=r.children[1],l=r.children[2];o.classList.remove("fa-square"),o.classList.add("fa-square-check"),d.classList.toggle("selected"),d.classList.toggle("strike"),s.classList.toggle("done"),c.classList.toggle("selected"),l.classList.toggle("selected")}function n(t,n){const a=document.querySelector(".popup-add-new-todo"),i=document.querySelector(".add-new-todo-project"),r=document.querySelector(".add-new-todo-form"),o=document.getElementById("new-todo-date"),d=document.querySelector(".add-new-delete-project"),s=document.getElementById("new-todo-low"),c=document.getElementById("new-todo-medium"),l=document.getElementById("new-todo-high"),u=document.querySelector(".low-new"),m=document.querySelector(".medium-new"),h=document.querySelector(".high-new"),f=e.getSelectedProject();i.textContent=f,o.setAttribute("value",de),a.classList.remove("invisible-add-new-todo"),r.addEventListener("submit",(i=>{e.addProjectTodo(i,t,n),a.classList.add("invisible-add-new-todo"),r.reset(),o.removeAttribute("value")})),d.addEventListener("click",(()=>{e.deleteProject(t,n),a.classList.add("invisible-add-new-todo"),r.reset(),o.removeAttribute("value")})),s.addEventListener("click",(()=>{u.classList.contains("low-new")&&(u.classList.remove("low-new"),u.classList.add("low-checked")),m.classList.contains("medium-checked")&&(m.classList.remove("medium-checked"),m.classList.add("medium-new")),h.classList.contains("high-checked")&&(h.classList.remove("high-checked"),h.classList.add("high-new"))})),c.addEventListener("click",(()=>{u.classList.contains("low-checked")&&(u.classList.remove("low-checked"),u.classList.add("low-new")),m.classList.contains("medium-new")&&(m.classList.remove("medium-new"),m.classList.add("medium-checked")),h.classList.contains("high-checked")&&(h.classList.remove("high-checked"),h.classList.add("high-new"))})),l.addEventListener("click",(()=>{u.classList.contains("low-checked")&&(u.classList.remove("low-checked"),u.classList.add("low-new")),m.classList.contains("medium-checked")&&(m.classList.remove("medium-checked"),m.classList.add("medium-new")),h.classList.contains("high-new")&&(h.classList.remove("high-new"),h.classList.add("high-checked"))}))}function a(e,t){const n=document.querySelector(".popup-notes"),a=document.querySelector(".notes-close"),i=document.querySelector(".notes-title"),r=document.querySelector(".notes-project"),o=document.querySelector(".notes-date"),d=document.querySelector(".notes-priority"),s=document.querySelector(".notes-details");let c,l;i.innerHTML="",r.innerHTML="",o.innerHTML="",d.innerHTML="",s.innerHTML="";const u=e.target;if(u instanceof HTMLElement){const e=u.parentElement;if(e instanceof HTMLElement){const u=e.parentElement;if(u instanceof HTMLElement){c=Number(u.dataset.index),l=u.dataset.project;const e=ee(new Date(t[l][c].dueDate),"do"),m=ee(new Date(t[l][c].dueDate),"MMM"),h=ee(new Date(t[l][c].dueDate),"yyyy");i.textContent=t[l][c].title,o.textContent=`${m} ${e}, ${h}`,d.textContent=t[l][c].priority[0].toUpperCase()+t[l][c].priority.slice(1),s.textContent=t[l][c].details,r.textContent="all"===l?"All":"today"===l?"Today":"week"===l?"This Week":t[l][c].project,n.classList.remove("invisible-notes"),a.addEventListener("click",(()=>n.classList.add("invisible-notes")))}}}}function i(t,n,a,i){const r=document.querySelector(".popup-edit"),o=document.querySelector(".edit-close"),d=document.querySelector(".edit-title-textarea"),s=document.querySelector(".edit-details-textarea"),c=document.getElementById("edit-date"),l=document.getElementById("edit-low"),u=document.getElementById("edit-medium"),m=document.getElementById("edit-high"),h=document.getElementById("edit-low-label"),f=document.getElementById("edit-medium-label"),g=document.getElementById("edit-high-label"),p=document.querySelector(".edit-form");d.innerHTML="",s.innerHTML="";const v=new Date(a[n][t].dueDate),L=ee(v,"MM"),y=ee(v,"dd"),w=`${ee(v,"yyyy")}-${L}-${y}`;d.textContent=a[n][t].title,s.textContent=a[n][t].details,c.removeAttribute("value"),c.setAttribute("value",w),h.classList.contains("low-checked")&&(h.classList.remove("low-checked"),h.classList.add("low")),f.classList.contains("medium-checked")&&(f.classList.remove("medium-checked"),f.classList.add("medium")),g.classList.contains("high-checked")&&(g.classList.remove("high-checked"),g.classList.add("high")),"low"===a[n][t].priority?(l.checked=!0,h.classList.remove("low"),h.classList.add("low-checked")):"medium"===a[n][t].priority?(u.checked=!0,f.classList.remove("medium"),f.classList.add("medium-checked")):"high"===a[n][t].priority&&(m.checked=!0,g.classList.remove("high"),g.classList.add("high-checked")),r.classList.remove("invisible-edit"),o.addEventListener("click",(()=>r.classList.add("invisible-edit"))),p.addEventListener("submit",(o=>{r.classList.add("invisible-edit"),e.editTodo(t,n,o,a,i)})),l.addEventListener("click",(()=>{h.classList.contains("low")&&(h.classList.remove("low"),h.classList.add("low-checked")),f.classList.contains("medium-checked")&&(f.classList.remove("medium-checked"),f.classList.add("medium")),g.classList.contains("high-checked")&&(g.classList.remove("high-checked"),g.classList.add("high"))})),u.addEventListener("click",(()=>{h.classList.contains("low-checked")&&(h.classList.remove("low-checked"),h.classList.add("low")),f.classList.contains("medium")&&(f.classList.remove("medium"),f.classList.add("medium-checked")),g.classList.contains("high-checked")&&(g.classList.remove("high-checked"),g.classList.add("high"))})),m.addEventListener("click",(()=>{h.classList.contains("low-checked")&&(h.classList.remove("low-checked"),h.classList.add("low")),f.classList.contains("medium-checked")&&(f.classList.remove("medium-checked"),f.classList.add("medium")),g.classList.contains("high")&&(g.classList.remove("high"),g.classList.add("high-checked"))}))}function r(t,n,a,i){const r=document.querySelector(".popup-delete-todo"),o=document.querySelector(".delete-todo-confirm-btn"),d=document.querySelector(".delete-todo-cancel-btn");r.classList.remove("invisible-delete-todo"),o.addEventListener("click",(()=>{e.deleteTodo(t,n,a,i),r.classList.add("invisible-delete-todo")})),d.addEventListener("click",(()=>r.classList.add("invisible-delete-todo")))}return{renderFilterList:function(e){const t=document.querySelector(".all"),n=document.querySelector(".today"),a=document.querySelector(".week"),i=Object.assign({},e),r=Object.assign({},e);delete i.today,delete r.week;const o=new Date;let d=0,s=0,c=0;s=e.today.reduce(((e,t)=>e+Number(!t.checked)),0),c=e.week.reduce(((e,t)=>e+Number(!t.checked)),0);for(const t in e)e[t].forEach((e=>{e.checked||d++}));for(const e in i)i[e].forEach((e=>{const t=new Date(e.dueDate);o.getDate()===t.getDate()&&o.getMonth()===t.getMonth()&&o.getFullYear()===t.getFullYear()&&(e.checked||s++)}));for(const e in r)r[e].forEach((e=>{const t=new Date(e.dueDate);Math.abs(o.getTime()-t.getTime())/864e5<=7&&(e.checked||c++)}));t.textContent=`${d}`,n.textContent=`${s}`,a.textContent=`${c}`},renderProjectList:function(t,n){const a=document.querySelector(".projects-list");a.innerHTML="";const i=Object.assign({},t);delete i.all,delete i.today,delete i.week;for(const r in i){let o=0;i[r].forEach((e=>{e.checked||o++}));const d=document.createElement("div"),s=document.createElement("button"),c=document.createElement("p");d.classList.add("project-item"),c.classList.add("project-counter"),c.textContent=`${o}`,s.classList.add("project-name"),s.textContent=r,s.addEventListener("click",(a=>{const i=a.target.textContent;e.setSelectedProject(t,i,n)})),d.appendChild(s),d.appendChild(c),a.appendChild(d)}},renderHighlightedCategory:function(){const t=document.querySelectorAll(".filters-btn"),n=document.querySelectorAll(".project-name"),a=e.getSelectedProject();t.forEach((e=>{e.classList.remove("clicked")})),n.forEach((e=>{e.classList.remove("clicked")})),t.forEach((e=>{("all"===a&&e.classList.contains("all-btn")||"today"===a&&e.classList.contains("today-btn")||"week"===a&&e.classList.contains("week-btn"))&&e.classList.add("clicked")})),n.forEach((e=>{e.textContent===a&&e.classList.add("clicked")}))},renderAllTodos:function(n,o){o.innerHTML="";for(const d in n)n[d].forEach(((d,s)=>{const c=new Date(d.dueDate),l=ee(c,"MMM"),u=ee(c,"do"),m=document.createElement("div"),h=document.createElement("div"),f=document.createElement("div"),g=document.createElement("i"),p=document.createElement("p"),v=document.createElement("button"),L=document.createElement("p"),y=document.createElement("i"),w=document.createElement("i");m.classList.add("list-item"),m.classList.add(`${d.priority}-priority`),m.setAttribute("data-index",`${s}`),m.setAttribute("data-project",`${d.project}`),h.classList.add("list-item-left"),f.classList.add("list-item-right"),g.classList.add("fa-regular","fa-square"),p.classList.add("item-description"),p.textContent=d.title,v.classList.add("item-notes"),v.textContent="NOTES",L.classList.add("item-date"),L.textContent=`${l} ${u}`,y.classList.add("fa-solid","fa-pen-to-square"),w.classList.add("fa-solid","fa-trash-can"),h.appendChild(g),h.appendChild(p),f.appendChild(v),f.appendChild(L),f.appendChild(y),f.appendChild(w),m.appendChild(h),m.appendChild(f),d.checked&&t(0,m),o.appendChild(m),g.addEventListener("click",(t=>{let a,i;const r=t.target;if(r instanceof HTMLElement){const t=r.parentElement;if(t instanceof HTMLElement){const r=t.parentElement;r instanceof HTMLElement&&(a=Number(r.dataset.index),i=r.dataset.project,e.checkOffTodo(a,i,n,o))}}})),v.addEventListener("click",(e=>a(e,n))),y.addEventListener("click",(e=>{let t,a;const r=e.target;if(r instanceof HTMLElement){const e=r.parentElement;if(e instanceof HTMLElement){const r=e.parentElement;r instanceof HTMLElement&&(t=Number(r.dataset.index),a=r.dataset.project,i(t,a,n,o))}}})),w.addEventListener("click",(e=>{let t,a;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),a=i.dataset.project,r(t,a,n,o))}}}))}))},renderTodayTodos:function(n,o){o.innerHTML="";for(const d in n)"today"!==d&&n[d].forEach(((d,s)=>{const c=new Date,l=new Date(d.dueDate);if(c.getDate()===l.getDate()&&c.getMonth()===l.getMonth()&&c.getFullYear()===l.getFullYear()){const c=new Date(d.dueDate),l=ee(c,"MMM"),u=ee(c,"do"),m=document.createElement("div"),h=document.createElement("div"),f=document.createElement("div"),g=document.createElement("i"),p=document.createElement("p"),v=document.createElement("button"),L=document.createElement("p"),y=document.createElement("i"),w=document.createElement("i");m.classList.add("list-item"),m.classList.add(`${d.priority}-priority`),m.setAttribute("data-index",`${s}`),m.setAttribute("data-project",`${d.project}`),h.classList.add("list-item-left"),f.classList.add("list-item-right"),g.classList.add("fa-regular","fa-square"),p.classList.add("item-description"),p.textContent=d.title,v.classList.add("item-notes"),v.textContent="NOTES",L.classList.add("item-date"),L.textContent=`${l} ${u}`,y.classList.add("fa-solid","fa-pen-to-square"),w.classList.add("fa-solid","fa-trash-can"),h.appendChild(g),h.appendChild(p),f.appendChild(v),f.appendChild(L),f.appendChild(y),f.appendChild(w),m.appendChild(h),m.appendChild(f),d.checked&&t(0,m),o.appendChild(m),g.addEventListener("click",(t=>{let a,i;const r=t.target;if(r instanceof HTMLElement){const t=r.parentElement;if(t instanceof HTMLElement){const r=t.parentElement;r instanceof HTMLElement&&(a=Number(r.dataset.index),i=r.dataset.project,e.checkOffTodo(a,i,n,o))}}})),v.addEventListener("click",(e=>a(e,n))),y.addEventListener("click",(e=>{let t,a;const r=e.target;if(r instanceof HTMLElement){const e=r.parentElement;if(e instanceof HTMLElement){const r=e.parentElement;r instanceof HTMLElement&&(t=Number(r.dataset.index),a=r.dataset.project,i(t,a,n,o))}}})),w.addEventListener("click",(e=>{let t,a;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),a=i.dataset.project,r(t,a,n,o))}}}))}}));const d=n[e.getSelectedProject()];0!==d.length&&d.forEach(((d,s)=>{const c=new Date(d.dueDate),l=ee(c,"MMM"),u=ee(c,"do"),m=document.createElement("div"),h=document.createElement("div"),f=document.createElement("div"),g=document.createElement("i"),p=document.createElement("p"),v=document.createElement("button"),L=document.createElement("p"),y=document.createElement("i"),w=document.createElement("i");m.classList.add("list-item"),m.classList.add(`${d.priority}-priority`),m.setAttribute("data-index",`${s}`),m.setAttribute("data-project",`${d.project}`),h.classList.add("list-item-left"),f.classList.add("list-item-right"),g.classList.add("fa-regular","fa-square"),p.classList.add("item-description"),p.textContent=d.title,v.classList.add("item-notes"),v.textContent="NOTES",L.classList.add("item-date"),L.textContent=`${l} ${u}`,y.classList.add("fa-solid","fa-pen-to-square"),w.classList.add("fa-solid","fa-trash-can"),h.appendChild(g),h.appendChild(p),f.appendChild(v),f.appendChild(L),f.appendChild(y),f.appendChild(w),m.appendChild(h),m.appendChild(f),d.checked&&t(0,m),o.appendChild(m),g.addEventListener("click",(t=>{let a,i;const r=t.target;if(r instanceof HTMLElement){const t=r.parentElement;if(t instanceof HTMLElement){const r=t.parentElement;r instanceof HTMLElement&&(a=Number(r.dataset.index),i=r.dataset.project,e.checkOffTodo(a,i,n,o))}}})),v.addEventListener("click",(e=>a(e,n))),y.addEventListener("click",(e=>{let t,a;const r=e.target;if(r instanceof HTMLElement){const e=r.parentElement;if(e instanceof HTMLElement){const r=e.parentElement;r instanceof HTMLElement&&(t=Number(r.dataset.index),a=r.dataset.project,i(t,a,n,o))}}})),w.addEventListener("click",(e=>{let t,a;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),a=i.dataset.project,r(t,a,n,o))}}}))}))},renderWeekTodos:function(n,o){o.innerHTML="";for(const d in n)"week"!==d&&n[d].forEach(((d,s)=>{const c=new Date,l=new Date(d.dueDate);if(Math.abs(c.getTime()-l.getTime())/864e5<=7){const c=new Date(d.dueDate),l=ee(c,"MMM"),u=ee(c,"do"),m=document.createElement("div"),h=document.createElement("div"),f=document.createElement("div"),g=document.createElement("i"),p=document.createElement("p"),v=document.createElement("button"),L=document.createElement("p"),y=document.createElement("i"),w=document.createElement("i");m.classList.add("list-item"),m.classList.add(`${d.priority}-priority`),m.setAttribute("data-index",`${s}`),m.setAttribute("data-project",`${d.project}`),h.classList.add("list-item-left"),f.classList.add("list-item-right"),g.classList.add("fa-regular","fa-square"),p.classList.add("item-description"),p.textContent=d.title,v.classList.add("item-notes"),v.textContent="NOTES",L.classList.add("item-date"),L.textContent=`${l} ${u}`,y.classList.add("fa-solid","fa-pen-to-square"),w.classList.add("fa-solid","fa-trash-can"),h.appendChild(g),h.appendChild(p),f.appendChild(v),f.appendChild(L),f.appendChild(y),f.appendChild(w),m.appendChild(h),m.appendChild(f),d.checked&&t(0,m),o.appendChild(m),g.addEventListener("click",(t=>{let a,i;const r=t.target;if(r instanceof HTMLElement){const t=r.parentElement;if(t instanceof HTMLElement){const r=t.parentElement;r instanceof HTMLElement&&(a=Number(r.dataset.index),i=r.dataset.project,e.checkOffTodo(a,i,n,o))}}})),v.addEventListener("click",(e=>a(e,n))),y.addEventListener("click",(e=>{let t,a;const r=e.target;if(r instanceof HTMLElement){const e=r.parentElement;if(e instanceof HTMLElement){const r=e.parentElement;r instanceof HTMLElement&&(t=Number(r.dataset.index),a=r.dataset.project,i(t,a,n,o))}}})),w.addEventListener("click",(e=>{let t,a;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),a=i.dataset.project,r(t,a,n,o))}}}))}}));const d=n[e.getSelectedProject()];0!==d.length&&d.forEach(((d,s)=>{const c=new Date(d.dueDate),l=ee(c,"MMM"),u=ee(c,"do"),m=document.createElement("div"),h=document.createElement("div"),f=document.createElement("div"),g=document.createElement("i"),p=document.createElement("p"),v=document.createElement("button"),L=document.createElement("p"),y=document.createElement("i"),w=document.createElement("i");m.classList.add("list-item"),m.classList.add(`${d.priority}-priority`),m.setAttribute("data-index",`${s}`),m.setAttribute("data-project",`${d.project}`),h.classList.add("list-item-left"),f.classList.add("list-item-right"),g.classList.add("fa-regular","fa-square"),p.classList.add("item-description"),p.textContent=d.title,v.classList.add("item-notes"),v.textContent="NOTES",L.classList.add("item-date"),L.textContent=`${l} ${u}`,y.classList.add("fa-solid","fa-pen-to-square"),w.classList.add("fa-solid","fa-trash-can"),h.appendChild(g),h.appendChild(p),f.appendChild(v),f.appendChild(L),f.appendChild(y),f.appendChild(w),m.appendChild(h),m.appendChild(f),d.checked&&t(0,m),o.appendChild(m),g.addEventListener("click",(t=>{let a,i;const r=t.target;if(r instanceof HTMLElement){const t=r.parentElement;if(t instanceof HTMLElement){const r=t.parentElement;r instanceof HTMLElement&&(a=Number(r.dataset.index),i=r.dataset.project,e.checkOffTodo(a,i,n,o))}}})),v.addEventListener("click",(e=>a(e,n))),y.addEventListener("click",(e=>{let t,a;const r=e.target;if(r instanceof HTMLElement){const e=r.parentElement;if(e instanceof HTMLElement){const r=e.parentElement;r instanceof HTMLElement&&(t=Number(r.dataset.index),a=r.dataset.project,i(t,a,n,o))}}})),w.addEventListener("click",(e=>{let t,a;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),a=i.dataset.project,r(t,a,n,o))}}}))}))},renderProjectTodos:function(n,o){o.innerHTML="";const d=n[e.getSelectedProject()];console.log(e.getSelectedProject()),0!==d.length&&d.forEach(((d,s)=>{const c=new Date(d.dueDate),l=ee(c,"MMM"),u=ee(c,"do"),m=document.createElement("div"),h=document.createElement("div"),f=document.createElement("div"),g=document.createElement("i"),p=document.createElement("p"),v=document.createElement("button"),L=document.createElement("p"),y=document.createElement("i"),w=document.createElement("i");m.classList.add("list-item"),m.classList.add(`${d.priority}-priority`),m.setAttribute("data-index",`${s}`),m.setAttribute("data-project",`${d.project}`),h.classList.add("list-item-left"),f.classList.add("list-item-right"),g.classList.add("fa-regular","fa-square"),p.classList.add("item-description"),p.textContent=d.title,v.classList.add("item-notes"),v.textContent="NOTES",L.classList.add("item-date"),L.textContent=`${l} ${u}`,y.classList.add("fa-solid","fa-pen-to-square"),w.classList.add("fa-solid","fa-trash-can"),h.appendChild(g),h.appendChild(p),f.appendChild(v),f.appendChild(L),f.appendChild(y),f.appendChild(w),m.appendChild(h),m.appendChild(f),d.checked&&t(0,m),o.appendChild(m),g.addEventListener("click",(t=>{let a,i;const r=t.target;if(r instanceof HTMLElement){const t=r.parentElement;if(t instanceof HTMLElement){const r=t.parentElement;r instanceof HTMLElement&&(a=Number(r.dataset.index),i=r.dataset.project,e.checkOffTodo(a,i,n,o))}}})),v.addEventListener("click",(e=>a(e,n))),y.addEventListener("click",(e=>{let t,a;const r=e.target;if(r instanceof HTMLElement){const e=r.parentElement;if(e instanceof HTMLElement){const r=e.parentElement;r instanceof HTMLElement&&(t=Number(r.dataset.index),a=r.dataset.project,i(t,a,n,o))}}})),w.addEventListener("click",(e=>{let t,a;const i=e.target;if(i instanceof HTMLElement){const e=i.parentElement;if(e instanceof HTMLElement){const i=e.parentElement;i instanceof HTMLElement&&(t=Number(i.dataset.index),a=i.dataset.project,r(t,a,n,o))}}}))}))},renderCheckedTodo:t,renderAddNewPopup:function(t,n){const a=document.querySelector(".popup-add-new"),i=document.querySelector("#add-exit"),r=document.querySelector(".add-todo-form"),o=document.querySelector(".add-project-form"),d=document.querySelector(".add-todo-btn"),s=document.querySelector(".add-project-btn"),c=document.getElementById("new-date"),l=document.getElementById("new-low"),u=document.getElementById("new-medium"),m=document.getElementById("new-high"),h=document.querySelector(".low"),f=document.querySelector(".medium"),g=document.querySelector(".high");c.setAttribute("value",de),a.classList.remove("invisible-add-new"),i.addEventListener("click",(()=>{a.classList.add("invisible-add-new"),r.reset(),r.style.display="grid",o.reset(),o.style.display="none",d.classList.add("clicked"),s.classList.remove("clicked"),c.removeAttribute("value")})),d.addEventListener("click",(()=>{d.classList.add("clicked"),r.style.display="grid",s.classList.remove("clicked"),o.style.display="none"})),s.addEventListener("click",(()=>{s.classList.add("clicked"),o.style.display="grid",d.classList.remove("clicked"),r.style.display="none"})),r.addEventListener("submit",(i=>{e.addTodo(i,t,n),a.classList.add("invisible-add-new"),r.reset(),r.style.display="grid",o.reset(),o.style.display="none",d.classList.add("clicked"),s.classList.remove("clicked"),c.removeAttribute("value")})),o.addEventListener("submit",(i=>{e.addProject(i,t,n),a.classList.add("invisible-add-new"),r.reset(),r.style.display="grid",o.reset(),o.style.display="none",d.classList.add("clicked"),s.classList.remove("clicked"),c.removeAttribute("value")})),l.addEventListener("click",(()=>{h.classList.contains("low")&&(h.classList.remove("low"),h.classList.add("low-checked")),f.classList.contains("medium-checked")&&(f.classList.remove("medium-checked"),f.classList.add("medium")),g.classList.contains("high-checked")&&(g.classList.remove("high-checked"),g.classList.add("high"))})),u.addEventListener("click",(()=>{h.classList.contains("low-checked")&&(h.classList.remove("low-checked"),h.classList.add("low")),f.classList.contains("medium")&&(f.classList.remove("medium"),f.classList.add("medium-checked")),g.classList.contains("high-checked")&&(g.classList.remove("high-checked"),g.classList.add("high"))})),m.addEventListener("click",(()=>{h.classList.contains("low-checked")&&(h.classList.remove("low-checked"),h.classList.add("low")),f.classList.contains("medium-checked")&&(f.classList.remove("medium-checked"),f.classList.add("medium")),g.classList.contains("high")&&(g.classList.remove("high"),g.classList.add("high-checked"))}))},renderEmptyProjectPopup:function(t,a){const i=document.querySelector(".popup-empty-project"),r=document.querySelector(".empty-project-name"),o=document.querySelector(".empty-project-add-btn"),d=document.querySelector(".empty-project-delete-btn");r.innerHTML="",r.textContent=e.getSelectedProject(),o.addEventListener("click",(()=>{n(t,a),i.classList.add("invisible-empty-project")})),d.addEventListener("click",(()=>{e.deleteProject(t,a),i.classList.add("invisible-empty-project")})),i.classList.remove("invisible-empty-project")},renderAddTodoPopup:n,renderNotesPopup:a,renderEditPopup:i,renderDeletePopup:r}}(),ge=function(){var t,n,a,i;let r;const o=localStorage.getItem("todos");return null!==o?r=JSON.parse(o):(r={all:[],today:[],week:[],"Kitchen renovation":[]},null===(t=r["Kitchen renovation"])||void 0===t||t.push(e.createTodo("Remove vinyl floor","replace with subfloor",ue,"high","Kitchen renovation")),null===(n=r["Kitchen renovation"])||void 0===n||n.push(e.createTodo("Build cabinets","pre-painted cabinets only",ce,"low","Kitchen renovation",!0)),null===(a=r["Kitchen renovation"])||void 0===a||a.push(e.createTodo("Install countertop","leave room for butcher block",he,"medium","Kitchen renovation")),null===(i=r.all)||void 0===i||i.push(e.createTodo("Finish book for book club","let Angela borrow afterward",oe,"high","all"))),r}(),pe=document.querySelector(".main-list"),ve=document.querySelector(".main-dashboard"),Le=document.querySelector(".fa-bars"),ye=document.querySelectorAll(".filters-btn"),we=document.querySelector(".projects-btn");!function(e){fe.renderFilterList(e),fe.renderProjectList(e,pe),fe.renderHighlightedCategory(),fe.renderAllTodos(e,pe)}(ge),Le.addEventListener("click",(()=>{ve.style.visibility="hidden"===ve.style.visibility?"visible":"hidden"})),ye.forEach((t=>{t.addEventListener("click",(t=>{let n;n=t.target.textContent,n="All"===n?"all":"Today"===n?"today":"week",e.setSelectedProject(ge,n,pe)}))})),we.addEventListener("click",(()=>{fe.renderAddNewPopup(ge,pe)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q3ViLEdBRFd4YixTQUFTeWIsaUJBQWlCLGdCQUdyQ3FDLEdBRFc5ZCxTQUFTQyxjQUFjLGtCQUd4QyxTQUFxQnJDLEdBQ2pCbUIsR0FBWUMsaUJBQWlCcEIsR0FDN0JtQixHQUFZRSxrQkFBa0JyQixFQUFPRSxJQUNyQ2lCLEdBQVlHLDRCQUNaSCxHQUFZSSxlQUFldkIsRUFBT0UsR0FDdEMsQ0FFQWlnQixDQUFZbmdCLElBR1ppZ0IsR0FBYzdGLGlCQUFpQixTQUFTLEtBQ3RCNEYsR0FBV1YsTUFBTWMsV0FBMkQsV0FBaENKLEdBQVdWLE1BQU1jLFdBQTBCLFVBQVksUUFBUSxJQUk3SHhDLEdBQVdoYyxTQUFRbWMsSUFDZkEsRUFBSTNELGlCQUFpQixTQUFTblksSUFDMUIsSUFBSW9CLEVBQ0pBLEVBQWVwQixFQUFFaVosT0FBbUJoQixZQUdoQzdXLEVBRGdCLFFBQWhCQSxFQUNjLE1BQ1MsVUFBaEJBLEVBQ08sUUFFQSxPQUdsQjRXLEVBQVdsYSxtQkFBbUJDLEdBQU9xRCxFQUFhbkQsR0FBYyxHQUNsRSxJQUlOZ2dCLEdBQVU5RixpQkFBaUIsU0FBUyxLQUNoQ2paLEdBQVl5ZCxrQkFBa0I1ZSxHQUFPRSxHQUFjLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QtaWkvLi9zcmMvbW9kdWxlcy9tYW5hZ2VEYXRhLnRzIiwid2VicGFjazovL3RvZG8tbGlzdC1paS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1paS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi90b0ludGVnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtaWkvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1paS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1paS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtaWkvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtaWkvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtaWkvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1paS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1paS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtaWkvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1paS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1paS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtaWkvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1paS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtaWkvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtaWkvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtaWkvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtaWkvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtaWkvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QtaWkvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC1paS8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vc3JjL3V0aWwvZGF0ZXMudHMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vc3JjL21vZHVsZXMvZGlzcGxheURhdGEudHMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vc3JjL21vZHVsZXMvdG9kb0xpc3QudHMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0LWlpLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkaXNwbGF5RGF0YSBmcm9tIFwiLi9kaXNwbGF5RGF0YVwiO1xuaW1wb3J0IHsgVG9kb09iamVjdCwgUHJvamVjdHNPYmplY3QgfSBmcm9tIFwiLi4vdXRpbC90eXBlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gbWFuYWdlRGF0YSgpIHtcbiAgICBsZXQgc2VsZWN0ZWRQcm9qZWN0ID0gJ2FsbCc7XG5cbiAgICBmdW5jdGlvbiBzZXRTZWxlY3RlZFByb2plY3QodG9kb3M6IFByb2plY3RzT2JqZWN0LCBjdXJyZW50UHJvamVjdDogc3RyaW5nLCBsaXN0Q29udGFpbmVyOiBFbGVtZW50KSB7XG4gICAgICAgIHNlbGVjdGVkUHJvamVjdCA9IGN1cnJlbnRQcm9qZWN0O1xuICAgICAgICB1cGRhdGVUb2Rvcyh0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFNlbGVjdGVkUHJvamVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdGVkUHJvamVjdDtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYWRkUHJvamVjdChlOiBFdmVudCwgdG9kb3M6IFByb2plY3RzT2JqZWN0LCBsaXN0Q29udGFpbmVyOiBFbGVtZW50KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBjb25zdCBuZXdQcm9qZWN0ID0gKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhZGQtcHJvamVjdCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuXG4gICAgICAgIGlmIChuZXdQcm9qZWN0KSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKG5ld1Byb2plY3QudG9Mb3dlckNhc2UoKSA9PT0gJ2FsbCcpIHx8XG4gICAgICAgICAgICAgICAgKG5ld1Byb2plY3QudG9Mb3dlckNhc2UoKSA9PT0gJ3RvZGF5JykgfHxcbiAgICAgICAgICAgICAgICAobmV3UHJvamVjdC50b0xvd2VyQ2FzZSgpID09PSAnd2VlaycpIHx8XG4gICAgICAgICAgICAgICAgKG5ld1Byb2plY3QudG9Mb3dlckNhc2UoKSA9PT0gJ3RoaXMgd2VlaycpIHx8XG4gICAgICAgICAgICAgICAgKG5ld1Byb2plY3QgaW4gdG9kb3MpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvZG9zW25ld1Byb2plY3RdID0gW107XG4gICAgICAgICAgICAgICAgdXBkYXRlVG9kb3ModG9kb3MsIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGRlbGV0ZVByb2plY3QodG9kb3M6IFByb2plY3RzT2JqZWN0LCBsaXN0Q29udGFpbmVyOiBFbGVtZW50KSB7XG4gICAgICAgIGRlbGV0ZSB0b2Rvc1tnZXRTZWxlY3RlZFByb2plY3QoKV07XG4gICAgICAgIHNldFNlbGVjdGVkUHJvamVjdCh0b2RvcywgJ2FsbCcsIGxpc3RDb250YWluZXIpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBhZGRQcm9qZWN0VG9kbyhlOiBFdmVudCwgdG9kb3M6IFByb2plY3RzT2JqZWN0LCBsaXN0Q29udGFpbmVyOiBFbGVtZW50KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBjb25zdCB0b2RvVGl0bGUgPSAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC1uZXctdG9kby1pbnB1dCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICAgICAgICBjb25zdCB0b2RvRGV0YWlscyA9IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLW5ldy10b2RvLXRleHRhcmVhJykgYXMgSFRNTFRleHRBcmVhRWxlbWVudCkudmFsdWU7XG4gICAgICAgIGNvbnN0IHRvZG9EYXRlID0gKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtbmV3LWRhdGUtaW5wdXQnKSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICAgICAgY29uc3QgdG9kb1ByaW9yaXR5ID0gKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwibmV3LXRvZG8tcHJpb3JpdHlcIl06Y2hlY2tlZCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICAgICAgICBjb25zdCB0b2RvUHJvamVjdCA9IGdldFNlbGVjdGVkUHJvamVjdCgpO1xuICAgICAgICBjb25zdCB0b2RvRGF5ID0gdG9kb0RhdGUuc2xpY2UoNSwgMTApO1xuICAgICAgICBjb25zdCB0b2RvWWVhciA9IHRvZG9EYXRlLnNsaWNlKDAsIDQpO1xuICAgICAgICBjb25zdCB0b2RvRHVlRGF0ZSA9IGAke3RvZG9EYXl9LSR7dG9kb1llYXJ9YDtcblxuICAgICAgICBjb25zdCBuZXdUb2RvID0gY3JlYXRlVG9kbyh0b2RvVGl0bGUsIHRvZG9EZXRhaWxzLCB0b2RvRHVlRGF0ZSwgdG9kb1ByaW9yaXR5LCB0b2RvUHJvamVjdCk7XG4gICAgICAgIHRvZG9zW3RvZG9Qcm9qZWN0XS5wdXNoKG5ld1RvZG8pO1xuICAgICAgICB1cGRhdGVUb2Rvcyh0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVRvZG8odGl0bGU6IHN0cmluZywgZGV0YWlsczogc3RyaW5nLCBkdWVEYXRlOiBzdHJpbmcsIHByaW9yaXR5OiBzdHJpbmcsIHByb2plY3Q6IHN0cmluZywgY2hlY2tlZDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHRvZG9JdGVtOiBUb2RvT2JqZWN0ID0ge1xuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICBkZXRhaWxzLFxuICAgICAgICAgICAgZHVlRGF0ZSxcbiAgICAgICAgICAgIHByaW9yaXR5LFxuICAgICAgICAgICAgcHJvamVjdCxcbiAgICAgICAgICAgIGNoZWNrZWRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9kb0l0ZW07XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGFkZFRvZG8oZTogRXZlbnQsIHRvZG9zOiBQcm9qZWN0c09iamVjdCwgbGlzdENvbnRhaW5lcjogRWxlbWVudCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3QgdG9kb1RpdGxlID0gKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtdG9kby1pbnB1dCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICAgICAgICBjb25zdCB0b2RvRGV0YWlscyA9IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLXRvZG8tdGV4dGFyZWEnKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50KS52YWx1ZTtcbiAgICAgICAgY29uc3QgdG9kb0RhdGUgPSAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI25ldy1kYXRlJykgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XG4gICAgICAgIGNvbnN0IHRvZG9Qcmlvcml0eSA9IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbmFtZT1cIm5ldy1wcmlvcml0eVwiXTpjaGVja2VkJykgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XG4gICAgICAgIGNvbnN0IHRvZG9Qcm9qZWN0ID0gZ2V0U2VsZWN0ZWRQcm9qZWN0KCk7XG4gICAgICAgIGNvbnN0IHRvZG9EYXkgPSB0b2RvRGF0ZS5zbGljZSg1LCAxMCk7XG4gICAgICAgIGNvbnN0IHRvZG9ZZWFyID0gdG9kb0RhdGUuc2xpY2UoMCwgNCk7XG4gICAgICAgIGNvbnN0IHRvZG9EdWVEYXRlID0gYCR7dG9kb0RheX0tJHt0b2RvWWVhcn1gO1xuXG4gICAgICAgIGNvbnN0IG5ld1RvZG8gPSBjcmVhdGVUb2RvKHRvZG9UaXRsZSwgdG9kb0RldGFpbHMsIHRvZG9EdWVEYXRlLCB0b2RvUHJpb3JpdHksIHRvZG9Qcm9qZWN0KTtcbiAgICAgICAgdG9kb3NbdG9kb1Byb2plY3RdLnB1c2gobmV3VG9kbyk7XG4gICAgICAgIHVwZGF0ZVRvZG9zKHRvZG9zLCBsaXN0Q29udGFpbmVyKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2hlY2tPZmZUb2RvKGluZGV4OiBudW1iZXIsIHByb2plY3ROYW1lOiBzdHJpbmcsIHRvZG9zOiBQcm9qZWN0c09iamVjdCwgbGlzdENvbnRhaW5lcjogRWxlbWVudCkge1xuICAgICAgICB0b2Rvc1twcm9qZWN0TmFtZV1baW5kZXhdLmNoZWNrZWQgPSAhdG9kb3NbcHJvamVjdE5hbWVdW2luZGV4XS5jaGVja2VkO1xuICAgICAgICB1cGRhdGVUb2Rvcyh0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGVkaXRUb2RvKGluZGV4OiBudW1iZXIsIHByb2plY3ROYW1lOiBzdHJpbmcsIGU6IEV2ZW50LCB0b2RvczogUHJvamVjdHNPYmplY3QsIGxpc3RDb250YWluZXI6IEVsZW1lbnQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGNvbnN0IHRvZG9EYXRlID0gKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlZGl0LWRhdGUnKSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICAgICAgY29uc3QgdG9kb0RheSA9IHRvZG9EYXRlLnNsaWNlKDUsIDEwKTtcbiAgICAgICAgY29uc3QgdG9kb1llYXIgPSB0b2RvRGF0ZS5zbGljZSgwLCA0KTtcbiAgICAgICAgY29uc3QgdG9kb0R1ZURhdGUgPSBgJHt0b2RvRGF5fS0ke3RvZG9ZZWFyfWA7XG5cbiAgICAgICAgdG9kb3NbcHJvamVjdE5hbWVdW2luZGV4XS50aXRsZSA9IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZWRpdC10aXRsZS10ZXh0YXJlYScpIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQpLnZhbHVlO1xuICAgICAgICB0b2Rvc1twcm9qZWN0TmFtZV1baW5kZXhdLmRldGFpbHMgPSAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVkaXQtZGV0YWlscy10ZXh0YXJlYScpIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQpLnZhbHVlO1xuICAgICAgICB0b2Rvc1twcm9qZWN0TmFtZV1baW5kZXhdLmR1ZURhdGUgPSB0b2RvRHVlRGF0ZTtcbiAgICAgICAgdG9kb3NbcHJvamVjdE5hbWVdW2luZGV4XS5wcmlvcml0eSA9IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbmFtZT1cImVkaXQtdG9kby1wcmlvcml0eVwiXTpjaGVja2VkJykgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XG4gICAgICAgIFxuICAgICAgICB1cGRhdGVUb2Rvcyh0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGRlbGV0ZVRvZG8oaW5kZXg6IG51bWJlciwgcHJvamVjdE5hbWU6IHN0cmluZywgdG9kb3M6IFByb2plY3RzT2JqZWN0LCBsaXN0Q29udGFpbmVyOiBFbGVtZW50KSB7XG4gICAgICAgIHRvZG9zW3Byb2plY3ROYW1lXS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB1cGRhdGVUb2Rvcyh0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVRvZG9zKHRvZG9zOiBQcm9qZWN0c09iamVjdCwgbGlzdENvbnRhaW5lcjogRWxlbWVudCkge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9kb3MnLCBKU09OLnN0cmluZ2lmeSh0b2RvcykpO1xuICAgICAgICBtYW5hZ2VSZXJlbmRlcih0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG1hbmFnZVJlcmVuZGVyKHRvZG9zOiBQcm9qZWN0c09iamVjdCwgbGlzdENvbnRhaW5lcjogRWxlbWVudCkge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gZ2V0U2VsZWN0ZWRQcm9qZWN0KCk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRvZG9zKVxuICAgICAgICBpZiAocHJvamVjdCA9PT0gJ2FsbCcpIHtcbiAgICAgICAgICAgIGRpc3BsYXlEYXRhLnJlbmRlckZpbHRlckxpc3QodG9kb3MpO1xuICAgICAgICAgICAgZGlzcGxheURhdGEucmVuZGVyUHJvamVjdExpc3QodG9kb3MsIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgZGlzcGxheURhdGEucmVuZGVySGlnaGxpZ2h0ZWRDYXRlZ29yeSgpO1xuICAgICAgICAgICAgZGlzcGxheURhdGEucmVuZGVyQWxsVG9kb3ModG9kb3MsIGxpc3RDb250YWluZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2plY3QgPT09ICd0b2RheScpIHtcbiAgICAgICAgICAgIGRpc3BsYXlEYXRhLnJlbmRlckZpbHRlckxpc3QodG9kb3MpO1xuICAgICAgICAgICAgZGlzcGxheURhdGEucmVuZGVyUHJvamVjdExpc3QodG9kb3MsIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgZGlzcGxheURhdGEucmVuZGVySGlnaGxpZ2h0ZWRDYXRlZ29yeSgpO1xuICAgICAgICAgICAgZGlzcGxheURhdGEucmVuZGVyVG9kYXlUb2Rvcyh0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvamVjdCA9PT0gJ3dlZWsnKSB7XG4gICAgICAgICAgICBkaXNwbGF5RGF0YS5yZW5kZXJGaWx0ZXJMaXN0KHRvZG9zKTtcbiAgICAgICAgICAgIGRpc3BsYXlEYXRhLnJlbmRlclByb2plY3RMaXN0KHRvZG9zLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgIGRpc3BsYXlEYXRhLnJlbmRlckhpZ2hsaWdodGVkQ2F0ZWdvcnkoKTtcbiAgICAgICAgICAgIGRpc3BsYXlEYXRhLnJlbmRlcldlZWtUb2Rvcyh0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgcHJvamVjdExlbmd0aCA9IHRvZG9zW3Byb2plY3RdLmxlbmd0aDtcblxuICAgICAgICAgICAgdG9kb3NbcHJvamVjdF0uZm9yRWFjaCh0b2RvID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodG9kby5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3RMZW5ndGgtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHByb2plY3RMZW5ndGggPCAxKSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheURhdGEucmVuZGVySGlnaGxpZ2h0ZWRDYXRlZ29yeSgpO1xuICAgICAgICAgICAgICAgIGRpc3BsYXlEYXRhLnJlbmRlckVtcHR5UHJvamVjdFBvcHVwKHRvZG9zLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheURhdGEucmVuZGVyRmlsdGVyTGlzdCh0b2Rvcyk7XG4gICAgICAgICAgICAgICAgZGlzcGxheURhdGEucmVuZGVyUHJvamVjdExpc3QodG9kb3MsIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgICAgIGRpc3BsYXlEYXRhLnJlbmRlckhpZ2hsaWdodGVkQ2F0ZWdvcnkoKTtcbiAgICAgICAgICAgICAgICBkaXNwbGF5RGF0YS5yZW5kZXJQcm9qZWN0VG9kb3ModG9kb3MsIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHNldFNlbGVjdGVkUHJvamVjdCxcbiAgICAgICAgZ2V0U2VsZWN0ZWRQcm9qZWN0LFxuICAgICAgICBhZGRQcm9qZWN0LFxuICAgICAgICBkZWxldGVQcm9qZWN0LFxuICAgICAgICBhZGRQcm9qZWN0VG9kbyxcbiAgICAgICAgY3JlYXRlVG9kbyxcbiAgICAgICAgYWRkVG9kbyxcbiAgICAgICAgY2hlY2tPZmZUb2RvLFxuICAgICAgICBlZGl0VG9kbyxcbiAgICAgICAgZGVsZXRlVG9kbyxcbiAgICAgICAgdXBkYXRlVG9kb3MsXG4gICAgICAgIG1hbmFnZVJlcmVuZGVyXG4gICAgfTtcbn0pKCk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gdGhlIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKE5hTikpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHNvbWUgdmFsdWU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoJzIwMTQtMDItMzEnKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gb2JqZWN0OlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKHt9KVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufSIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKGFyZ3VtZW50KSA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI3N0cmluZy1hcmd1bWVudHNcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJpbXBvcnQgaXNEYXRlIGZyb20gXCIuLi9pc0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcblxuICBpZiAoIWlzRGF0ZShkaXJ0eURhdGUpICYmIHR5cGVvZiBkaXJ0eURhdGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihOdW1iZXIoZGF0ZSkpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDc1MCBtaWxsaXNlY29uZHMgdG8gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwiaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NToyOS4yNTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCAtYW1vdW50KTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0RheU9mWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZZZWFyVGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciBkaWZmZXJlbmNlID0gdGltZXN0YW1wIC0gc3RhcnRPZlllYXJUaW1lc3RhbXA7XG4gIHJldHVybiBNYXRoLmZsb29yKGRpZmZlcmVuY2UgLyBNSUxMSVNFQ09ORFNfSU5fREFZKSArIDE7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeSA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDSVNPV2VlayhkYXRlKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGF0ZSkuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsInZhciBkZWZhdWx0T3B0aW9ucyA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMobmV3T3B0aW9ucykge1xuICBkZWZhdWx0T3B0aW9ucyA9IG5ld09wdGlvbnM7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyR3ZWVrU3RhcnRzT24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG5cbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkd2Vla1N0YXJ0c09uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX29wdGlvbnMkd2Vla1N0YXJ0c09uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMCk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuXG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8uZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAxKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mVGhpc1llYXIsIG9wdGlvbnMpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuXG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpO1xuICB2YXIgeWVhciA9IGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIG9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZExlYWRpbmdaZXJvcyhudW1iZXIsIHRhcmdldExlbmd0aCkge1xuICB2YXIgc2lnbiA9IG51bWJlciA8IDAgPyAnLScgOiAnJztcbiAgdmFyIG91dHB1dCA9IE1hdGguYWJzKG51bWJlcikudG9TdHJpbmcoKTtcblxuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IHRhcmdldExlbmd0aCkge1xuICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDtcbiAgfVxuXG4gIHJldHVybiBzaWduICsgb3V0cHV0O1xufSIsImltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24geShkYXRlLCB0b2tlbikge1xuICAgIC8vIEZyb20gaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS0zMS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9Gb3JtYXRfdG9rZW5zXG4gICAgLy8gfCBZZWFyICAgICB8ICAgICB5IHwgeXkgfCAgIHl5eSB8ICB5eXl5IHwgeXl5eXkgfFxuICAgIC8vIHwtLS0tLS0tLS0tfC0tLS0tLS18LS0tLXwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXxcbiAgICAvLyB8IEFEIDEgICAgIHwgICAgIDEgfCAwMSB8ICAgMDAxIHwgIDAwMDEgfCAwMDAwMSB8XG4gICAgLy8gfCBBRCAxMiAgICB8ICAgIDEyIHwgMTIgfCAgIDAxMiB8ICAwMDEyIHwgMDAwMTIgfFxuICAgIC8vIHwgQUQgMTIzICAgfCAgIDEyMyB8IDIzIHwgICAxMjMgfCAgMDEyMyB8IDAwMTIzIHxcbiAgICAvLyB8IEFEIDEyMzQgIHwgIDEyMzQgfCAzNCB8ICAxMjM0IHwgIDEyMzQgfCAwMTIzNCB8XG4gICAgLy8gfCBBRCAxMjM0NSB8IDEyMzQ1IHwgNDUgfCAxMjM0NSB8IDEyMzQ1IHwgMTIzNDUgfFxuICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRva2VuID09PSAneXknID8geWVhciAlIDEwMCA6IHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIE0oZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDRGF0ZSgpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRhdGUuZ2V0VVRDSG91cnMoKSAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcblxuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSAnYW0nID8gJ2EubS4nIDogJ3AubS4nO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gaChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIEgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIG0oZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDTWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gcyhkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHZhciBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMykpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZnJhY3Rpb25hbFNlY29uZHMsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImltcG9ydCBnZXRVVENEYXlPZlllYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG5pbXBvcnQgbGlnaHRGb3JtYXR0ZXJzIGZyb20gXCIuLi9saWdodEZvcm1hdHRlcnMvaW5kZXguanNcIjtcbnZhciBkYXlQZXJpb2RFbnVtID0ge1xuICBhbTogJ2FtJyxcbiAgcG06ICdwbScsXG4gIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICBub29uOiAnbm9vbicsXG4gIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICBuaWdodDogJ25pZ2h0J1xufTtcblxuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gRXJhXG4gIEc6IGZ1bmN0aW9uIEcoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGVyYSA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA+IDAgPyAxIDogMDtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEFELCBCQ1xuICAgICAgY2FzZSAnRyc6XG4gICAgICBjYXNlICdHRyc6XG4gICAgICBjYXNlICdHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQSwgQlxuXG4gICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3RcblxuICAgICAgY2FzZSAnR0dHRyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIHkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICd5bycpIHtcbiAgICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMueShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWTogZnVuY3Rpb24gWShkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2lnbmVkV2Vla1llYXIgPSBnZXRVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyOyAvLyBUd28gZGlnaXQgeWVhclxuXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfSAvLyBPcmRpbmFsIG51bWJlclxuXG5cbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfSAvLyBQYWRkaW5nXG5cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIFIoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgaXNvV2Vla1llYXIgPSBnZXRVVENJU09XZWVrWWVhcihkYXRlKTsgLy8gUGFkZGluZ1xuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRXh0ZW5kZWQgeWVhci4gVGhpcyBpcyBhIHNpbmdsZSBudW1iZXIgZGVzaWduYXRpbmcgdGhlIHllYXIgb2YgdGhpcyBjYWxlbmRhciBzeXN0ZW0uXG4gIC8vIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBsb2NhbGl6ZXJzIGFyZSBCLkMuIHllYXJzOlxuICAvLyB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICAvLyB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICAvLyB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICAvLyB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICAvLyB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICAvLyBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gIC8vIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZC5cbiAgdTogZnVuY3Rpb24gdShkYXRlLCB0b2tlbikge1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiBRKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdRUSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAnUW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdRUVFRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IGZ1bmN0aW9uIHEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdxJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ3FxJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdxbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ3FxcXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdxcXFxJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIE0oZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIG1vbnRoXG4gIEw6IGZ1bmN0aW9uIEwoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTG8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ0xMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdMTExMJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIHcoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHdlZWsgPSBnZXRVVENXZWVrKGRhdGUsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHRva2VuID09PSAnd28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIEkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnSW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnZG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0RhdGUoKSwge1xuICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIEQoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mWWVhciA9IGdldFVUQ0RheU9mWWVhcihkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF5T2ZZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICdkYXlPZlllYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRheU9mWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHdlZWtcbiAgRTogZnVuY3Rpb24gRShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gZShkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoTnRoIGRheSBvZiB3ZWVrIHdpdGggY3VycmVudCBsb2NhbGUgb3Igd2Vla1N0YXJ0c09uKVxuICAgICAgY2FzZSAnZSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdlZSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2VlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2VlZWUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IGZ1bmN0aW9uIGMoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKHNhbWUgYXMgaW4gYGVgKVxuICAgICAgY2FzZSAnYyc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdjYyc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnY28nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdjY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnY2NjYyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSVNPIGRheSBvZiB3ZWVrXG4gIGk6IGZ1bmN0aW9uIGkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcblxuICAgICAgY2FzZSAnaWknOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG5cbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIGIoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5taWRuaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYic6XG4gICAgICBjYXNlICdiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdiYmJiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiYic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiBCKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID49IDE3KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmV2ZW5pbmc7XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5hZnRlcm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSA0KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1vcm5pbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubmlnaHQ7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnQic6XG4gICAgICBjYXNlICdCQic6XG4gICAgICBjYXNlICdCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIGgoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnaG8nKSB7XG4gICAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAxMjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gSChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdIbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDSG91cnMoKSwge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuSChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIEsoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG5cbiAgICBpZiAodG9rZW4gPT09ICdLbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gayhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDI0O1xuXG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiBtKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ21vJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENNaW51dGVzKCksIHtcbiAgICAgICAgdW5pdDogJ21pbnV0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMubShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiBzKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ3NvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHtcbiAgICAgICAgdW5pdDogJ3NlY29uZCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gWChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgaWYgKHRpbWV6b25lT2Zmc2V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gJ1onO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICdYJzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWGBcblxuICAgICAgY2FzZSAnWFhYWCc6XG4gICAgICBjYXNlICdYWCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhYYFxuXG4gICAgICBjYXNlICdYWFhYWCc6XG4gICAgICBjYXNlICdYWFgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24geChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuXG4gICAgICBjYXNlICd4eHh4JzpcbiAgICAgIGNhc2UgJ3h4JzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG5cbiAgICAgIGNhc2UgJ3h4eHh4JzpcbiAgICAgIGNhc2UgJ3h4eCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiBPKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24geihkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ3onOlxuICAgICAgY2FzZSAnenonOlxuICAgICAgY2FzZSAnenp6JzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcblxuICAgICAgY2FzZSAnenp6eic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wXG4gIHQ6IGZ1bmN0aW9uIHQoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihvcmlnaW5hbERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gVChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVNob3J0KG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCk7XG4gIHZhciBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjA7XG5cbiAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gc2lnbiArIFN0cmluZyhob3Vycyk7XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKE1hdGguYWJzKG9mZnNldCkgLyA2MCwgMik7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsInZhciBkYXRlTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufTtcblxudmFyIHRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gdGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHBwJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xuXG52YXIgZGF0ZVRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/LykgfHwgW107XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcblxuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG5cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuXG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBkYXRlVGltZUZvcm1hdC5yZXBsYWNlKCd7e2RhdGV9fScsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSkucmVwbGFjZSgne3t0aW1lfX0nLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufTtcblxudmFyIGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9uZ0Zvcm1hdHRlcnM7IiwiLyoqXG4gKiBHb29nbGUgQ2hyb21lIGFzIG9mIDY3LjAuMzM5Ni44NyBpbnRyb2R1Y2VkIHRpbWV6b25lcyB3aXRoIG9mZnNldCB0aGF0IGluY2x1ZGVzIHNlY29uZHMuXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxuICogKGUuZy4gZm9yICdFdXJvcGUvUHJhZ3VlJyB0aW1lem9uZSB0aGUgb2Zmc2V0IGlzIEdNVCswMDo1Nzo0NCBiZWZvcmUgMSBPY3RvYmVyIDE4OTFcbiAqIGFuZCBHTVQrMDE6MDA6MDAgYWZ0ZXIgdGhhdCBkYXRlKVxuICpcbiAqIERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgYW5kIHdvdWxkIHJldHVybiA1NyBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIGluY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIHRoYXQgdGFrZXMgc2Vjb25kcyBpbiBhY2NvdW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGUpIHtcbiAgdmFyIHV0Y0RhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyhkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCksIGRhdGUuZ2V0U2Vjb25kcygpLCBkYXRlLmdldE1pbGxpc2Vjb25kcygpKSk7XG4gIHV0Y0RhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIC0gdXRjRGF0ZS5nZXRUaW1lKCk7XG59IiwidmFyIHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFsnRCcsICdERCddO1xudmFyIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gWydZWScsICdZWVlZJ107XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGlmICh0b2tlbiA9PT0gJ1lZWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0QnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRgIGluc3RlYWQgb2YgYERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0REJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfVxufSIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xuXG52YXIgZm9ybWF0RGlzdGFuY2UgPSBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIHRva2VuVmFsdWUgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG5cbiAgaWYgKHR5cGVvZiB0b2tlblZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWU7XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdERpc3RhbmNlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoUGF0dGVybkZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MubWF0Y2hQYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG4gICAgaWYgKCFwYXJzZVJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKSA6IHBhcnNlUmVzdWx0WzBdO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuXG52YXIgZm9ybWF0UmVsYXRpdmUgPSBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFJlbGF0aXZlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlJbmRleCwgb3B0aW9ucykge1xuICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiAnc3RhbmRhbG9uZSc7XG4gICAgdmFyIHZhbHVlc0FycmF5O1xuXG4gICAgaWYgKGNvbnRleHQgPT09ICdmb3JtYXR0aW5nJyAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIHZhciBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgd2lkdGggPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2RlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YXIgX3dpZHRoID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW193aWR0aF0gfHwgYXJncy52YWx1ZXNbX2RlZmF1bHRXaWR0aF07XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKGRpcnR5SW5kZXgpIDogZGlydHlJbmRleDsgLy8gQHRzLWlnbm9yZTogRm9yIHNvbWUgcmVhc29uIFR5cGVTY3JpcHQganVzdCBkb24ndCB3YW50IHRvIG1hdGNoIGl0LCBubyBtYXR0ZXIgaG93IGhhcmQgd2UgdHJ5LiBJIGNoYWxsZW5nZSB5b3UgdG8gdHJ5IHRvIHJlbW92ZSBpdCFcblxuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucykgPyBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSkgOiBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBwcmVkaWNhdGUob2JqZWN0W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59IiwiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gXCIuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gXCIuL19saWIvZm9ybWF0TG9uZy9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gXCIuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanNcIjtcbmltcG9ydCBsb2NhbGl6ZSBmcm9tIFwiLi9fbGliL2xvY2FsaXplL2luZGV4LmpzXCI7XG5pbXBvcnQgbWF0Y2ggZnJvbSBcIi4vX2xpYi9tYXRjaC9pbmRleC5qc1wiO1xuXG4vKipcbiAqIEB0eXBlIHtMb2NhbGV9XG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgRW5nbGlzaCBsb2NhbGUgKFVuaXRlZCBTdGF0ZXMpLlxuICogQGxhbmd1YWdlIEVuZ2xpc2hcbiAqIEBpc28tNjM5LTIgZW5nXG4gKiBAYXV0aG9yIFNhc2hhIEtvc3MgW0Brb3Nzbm9jb3JwXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20va29zc25vY29ycH1cbiAqIEBhdXRob3IgTGVzaGEgS29zcyBbQGxlc2hha29zc117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2xlc2hha29zc31cbiAqL1xudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2VuLVVTJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwXG4gICAgLyogU3VuZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi8uLi9sb2NhbGUvZW4tVVMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRMb2NhbGU7IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanNcIjtcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydCJywgJ0EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnQkMnLCAnQUQnXSxcbiAgd2lkZTogWydCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWycxc3QgcXVhcnRlcicsICcybmQgcXVhcnRlcicsICczcmQgcXVhcnRlcicsICc0dGggcXVhcnRlciddXG59OyAvLyBOb3RlOiBpbiBFbmdsaXNoLCB0aGUgbmFtZXMgb2YgZGF5cyBvZiB0aGUgd2VlayBhbmQgbW9udGhzIGFyZSBjYXBpdGFsaXplZC5cbi8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4vLyBlLmcuIGluIFNwYW5pc2ggbGFuZ3VhZ2UgdGhlIHdlZWtkYXlzIGFuZCBtb250aHMgc2hvdWxkIGJlIGluIHRoZSBsb3dlcmNhc2UuXG5cbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0onLCAnRicsICdNJywgJ0EnLCAnTScsICdKJywgJ0onLCAnQScsICdTJywgJ08nLCAnTicsICdEJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ10sXG4gIHdpZGU6IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ1MnLCAnTScsICdUJywgJ1cnLCAnVCcsICdGJywgJ1MnXSxcbiAgc2hvcnQ6IFsnU3UnLCAnTW8nLCAnVHUnLCAnV2UnLCAnVGgnLCAnRnInLCAnU2EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J10sXG4gIHdpZGU6IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfVxufTtcbnZhciBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH1cbn07XG5cbnZhciBvcmRpbmFsTnVtYmVyID0gZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgX29wdGlvbnMpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7IC8vIElmIG9yZGluYWwgbnVtYmVycyBkZXBlbmQgb24gY29udGV4dCwgZm9yIGV4YW1wbGUsXG4gIC8vIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IGdyYW1tYXRpY2FsIGdlbmRlcnMsXG4gIC8vIHVzZSBgb3B0aW9ucy51bml0YC5cbiAgLy9cbiAgLy8gYHVuaXRgIGNhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF0ZScsICdkYXlPZlllYXInLFxuICAvLyAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcuXG5cbiAgdmFyIHJlbTEwMCA9IG51bWJlciAlIDEwMDtcblxuICBpZiAocmVtMTAwID4gMjAgfHwgcmVtMTAwIDwgMTApIHtcbiAgICBzd2l0Y2ggKHJlbTEwMCAlIDEwKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnc3QnO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnbmQnO1xuXG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAncmQnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudW1iZXIgKyAndGgnO1xufTtcblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIGFyZ3VtZW50Q2FsbGJhY2socXVhcnRlcikge1xuICAgICAgcmV0dXJuIHF1YXJ0ZXIgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanNcIjtcbmltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanNcIjtcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2sodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gdmFsdWVDYWxsYmFjayhpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qc1wiOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcblxudmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7IC8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcblxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIGRheSBvZiB5ZWFyIHRva2VucyBgRGAgYW5kIGBERGA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgMSwgMTEpLCAnTU0vZGQveXl5eScpXG4gKiAvLz0+ICcwMi8xMS8yMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMiBKdWx5IDIwMTQgaW4gRXNwZXJhbnRvOlxuICogaW1wb3J0IHsgZW9Mb2NhbGUgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9vcHRpb25zJGxvY2FsZSwgX3JlZjIsIF9yZWYzLCBfcmVmNCwgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUyLCBfb3B0aW9ucyRsb2NhbGUyJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiwgX3JlZjUsIF9yZWY2LCBfcmVmNywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUzLCBfb3B0aW9ucyRsb2NhbGUzJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQ7XG5cbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgbG9jYWxlID0gKF9yZWYgPSAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX29wdGlvbnMkbG9jYWxlICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRsb2NhbGUgOiBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBkZWZhdWx0TG9jYWxlO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmMiA9IChfcmVmMyA9IChfcmVmNCA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTIub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUyJG9wdGkuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmNCAhPT0gdm9pZCAwID8gX3JlZjQgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IDEpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWY1ID0gKF9yZWY2ID0gKF9yZWY3ID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlMyRvcHRpID0gX29wdGlvbnMkbG9jYWxlMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZTMkb3B0aS53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY3ICE9PSB2b2lkIDAgPyBfcmVmNyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjYgIT09IHZvaWQgMCA/IF9yZWY2IDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsMy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWw0LndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjUgIT09IHZvaWQgMCA/IF9yZWY1IDogMCk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUubG9jYWxpemUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBsb2NhbGl6ZSBwcm9wZXJ0eScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcblxuICBpZiAoIWlzVmFsaWQob3JpZ2luYWxEYXRlKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgfSAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cblxuICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSwgdGltZXpvbmVPZmZzZXQpO1xuICB2YXIgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBfb3JpZ2luYWxEYXRlOiBvcmlnaW5hbERhdGVcbiAgfTtcbiAgdmFyIHJlc3VsdCA9IGZvcm1hdFN0ci5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuICAgIGlmIChzdWJzdHJpbmcgPT09IFwiJydcIikge1xuICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgIH1cblxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG5cbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBTdHJpbmcoZGlydHlEYXRlKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgU3RyaW5nKGRpcnR5RGF0ZSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHV0Y0RhdGUsIHN1YnN0cmluZywgbG9jYWxlLmxvY2FsaXplLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgdmFyIG1hdGNoZWQgPSBpbnB1dC5tYXRjaChlc2NhcGVkU3RyaW5nUmVnRXhwKTtcblxuICBpZiAoIW1hdGNoZWQpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlZFsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwiaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSAnZGF0ZS1mbnMnO1xuXG4vKiBGb3JtYXRzIGN1cnJlbnQgbW9udGgtZGF5LXllYXIgZm9yIHRvZG9zIG9iamVjdCBhbmQgXG55ZWFyLW1vbnRoLWRheSBmb3IgZGF0ZSBpbnB1dCBmaWVsZCBpbiBhZGQtbmV3IHBvcHVwIGZvcm0gKi9cbmNvbnN0IGRhdGVPYmplY3QgPSBuZXcgRGF0ZSgpO1xuY29uc3QgbW9udGg6IHN0cmluZyA9IGZvcm1hdChkYXRlT2JqZWN0LCAnTU0nKTtcbmNvbnN0IGRheTogc3RyaW5nID0gZm9ybWF0KGRhdGVPYmplY3QsICdkZCcpO1xuY29uc3QgeWVhcjogc3RyaW5nID0gZm9ybWF0KGRhdGVPYmplY3QsICd5eXl5Jyk7XG5leHBvcnQgY29uc3QgdG9kYXk6IHN0cmluZyA9IGAke21vbnRofS0ke2RheX0tJHt5ZWFyfWA7XG5leHBvcnQgY29uc3QgY3VycmVudERheTogc3RyaW5nID0gYCR7eWVhcn0tJHttb250aH0tJHtkYXl9YDtcblxuLyogRm9ybWF0cyBtb250aC1kYXkteWVhciBvbmUgd2VlayBhZ28gKi9cbmNvbnN0IHdlZWtQYXN0ID0gbmV3IERhdGUoZGF0ZU9iamVjdC5nZXRGdWxsWWVhcigpLCBkYXRlT2JqZWN0LmdldE1vbnRoKCksIGRhdGVPYmplY3QuZ2V0RGF0ZSgpIC0gNyk7XG5jb25zdCB3ZWVrQWdvTW9udGg6IHN0cmluZyA9IGZvcm1hdCh3ZWVrUGFzdCwgJ01NJyk7XG5jb25zdCB3ZWVrQWdvRGF5OiBzdHJpbmcgPSBmb3JtYXQod2Vla1Bhc3QsICdkZCcpO1xuY29uc3Qgd2Vla0Fnb1llYXI6IHN0cmluZyA9IGZvcm1hdCh3ZWVrUGFzdCwgJ3l5eXknKTtcbmV4cG9ydCBjb25zdCB3ZWVrQWdvOiBzdHJpbmcgPSBgJHt3ZWVrQWdvTW9udGh9LSR7d2Vla0Fnb0RheX0tJHt3ZWVrQWdvWWVhcn1gO1xuXG4vKiBGb3JtYXRzIG1vbnRoLWRheS15ZWFyIG9uZSB3ZWVrIGZyb20gbm93ICovXG5jb25zdCB3ZWVrRnV0dXJlID0gbmV3IERhdGUoZGF0ZU9iamVjdC5nZXRGdWxsWWVhcigpLCBkYXRlT2JqZWN0LmdldE1vbnRoKCksIGRhdGVPYmplY3QuZ2V0RGF0ZSgpICsgNSk7XG5jb25zdCB3ZWVrRnV0dXJlTW9udGg6IHN0cmluZyA9IGZvcm1hdCh3ZWVrRnV0dXJlLCAnTU0nKTtcbmNvbnN0IHdlZWtGdXR1cmVEYXk6IHN0cmluZyA9IGZvcm1hdCh3ZWVrRnV0dXJlLCAnZGQnKTtcbmNvbnN0IHdlZWtGdXR1cmVZZWFyOiBzdHJpbmcgPSBmb3JtYXQod2Vla0Z1dHVyZSwgJ3l5eXknKTtcbmV4cG9ydCBjb25zdCB3ZWVrTmV4dDogc3RyaW5nID0gYCR7d2Vla0Z1dHVyZU1vbnRofS0ke3dlZWtGdXR1cmVEYXl9LSR7d2Vla0Z1dHVyZVllYXJ9YDtcblxuLyogRm9ybWF0cyBtb250aC1kYXkteWVhciBvbmUgbW9udGggZnJvbSBub3cgKi9cbmNvbnN0IG1vbnRoRnV0dXJlID0gbmV3IERhdGUoZGF0ZU9iamVjdC5nZXRGdWxsWWVhcigpLCBkYXRlT2JqZWN0LmdldE1vbnRoKCksIGRhdGVPYmplY3QuZ2V0RGF0ZSgpICsgMzIpO1xuY29uc3QgbW9udGhGdXR1cmVNb250aDogc3RyaW5nID0gZm9ybWF0KG1vbnRoRnV0dXJlLCAnTU0nKTtcbmNvbnN0IG1vbnRoRnV0dXJlRGF5OiBzdHJpbmcgPSBmb3JtYXQobW9udGhGdXR1cmUsICdkZCcpO1xuY29uc3QgbW9udGhGdXR1cmVZZWFyOiBzdHJpbmcgPSBmb3JtYXQobW9udGhGdXR1cmUsICd5eXl5Jyk7XG5leHBvcnQgY29uc3QgbW9udGhOZXh0OiBzdHJpbmcgPSBgJHttb250aEZ1dHVyZU1vbnRofS0ke21vbnRoRnV0dXJlRGF5fS0ke21vbnRoRnV0dXJlWWVhcn1gOyIsImltcG9ydCBtYW5hZ2VEYXRhIGZyb20gXCIuL21hbmFnZURhdGFcIjtcbmltcG9ydCB7IFByb2plY3RzT2JqZWN0IH0gZnJvbSBcIi4uL3V0aWwvdHlwZXNcIjtcbmltcG9ydCB7IGN1cnJlbnREYXkgfSBmcm9tICcuLi91dGlsL2RhdGVzJztcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gJ2RhdGUtZm5zJztcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGRpc3BsYXlEYXRhKCkge1xuICAgIFxuICAgIGZ1bmN0aW9uIHJlbmRlckZpbHRlckxpc3QodG9kb3M6IFByb2plY3RzT2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IGFsbFRvZG9zRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWxsJyk7XG4gICAgICAgIGNvbnN0IGFsbFRvZG9zQ291bnQ6IEVsZW1lbnQgPSBhbGxUb2Rvc0VsITtcbiAgICAgICAgY29uc3QgdG9kYXlUb2Rvc0VsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvZGF5Jyk7XG4gICAgICAgIGNvbnN0IHRvZGF5VG9kb3NDb3VudDogRWxlbWVudCA9IHRvZGF5VG9kb3NFbCE7XG4gICAgICAgIGNvbnN0IHdlZWtUb2Rvc0VsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndlZWsnKTtcbiAgICAgICAgY29uc3Qgd2Vla1RvZG9zQ291bnQ6IEVsZW1lbnQgPSB3ZWVrVG9kb3NFbCE7XG5cbiAgICAgICAgY29uc3QgdG9kYXlUb2RvcyA9IHsgLi4udG9kb3MgfTtcbiAgICAgICAgY29uc3Qgd2Vla1RvZG9zID0geyAuLi50b2RvcyB9O1xuICAgICAgICBkZWxldGUgdG9kYXlUb2Rvcy50b2RheTtcbiAgICAgICAgZGVsZXRlIHdlZWtUb2Rvcy53ZWVrO1xuICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgbGV0IGFsbFVuY2hlY2tlZFRvZG9zID0gMDtcbiAgICAgICAgbGV0IHRvZGF5VW5jaGVja2VkVG9kb3MgPSAwO1xuICAgICAgICBsZXQgd2Vla1VuY2hlY2tlZFRvZG9zID0gMDtcblxuICAgICAgICB0b2RheVVuY2hlY2tlZFRvZG9zID0gdG9kb3MudG9kYXkucmVkdWNlKCh0b3RhbCwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0b3RhbCArIE51bWJlcighdmFsdWUuY2hlY2tlZCk7XG4gICAgICAgIH0sIDApO1xuICAgICAgICBcbiAgICAgICAgd2Vla1VuY2hlY2tlZFRvZG9zID0gdG9kb3Mud2Vlay5yZWR1Y2UoKHRvdGFsLCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRvdGFsICsgTnVtYmVyKCF2YWx1ZS5jaGVja2VkKTtcbiAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBhbGxUb2RvcyBpbiB0b2Rvcykge1xuICAgICAgICAgICAgdG9kb3NbYWxsVG9kb3NdLmZvckVhY2godG9kbyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0b2RvLmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxsVW5jaGVja2VkVG9kb3MrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgcHJvamVjdCBpbiB0b2RheVRvZG9zKSB7XG4gICAgICAgICAgICB0b2RheVRvZG9zW3Byb2plY3RdLmZvckVhY2godG9kbyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9kb0RhdGUgPSBuZXcgRGF0ZSh0b2RvLmR1ZURhdGUpO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdG9kYXkuZ2V0RGF0ZSgpID09PSB0b2RvRGF0ZS5nZXREYXRlKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgdG9kYXkuZ2V0TW9udGgoKSA9PT0gdG9kb0RhdGUuZ2V0TW9udGgoKSAmJlxuICAgICAgICAgICAgICAgICAgICB0b2RheS5nZXRGdWxsWWVhcigpID09PSB0b2RvRGF0ZS5nZXRGdWxsWWVhcigpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdG9kby5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2RheVVuY2hlY2tlZFRvZG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgcHJvamVjdCBpbiB3ZWVrVG9kb3MpIHtcbiAgICAgICAgICAgIHdlZWtUb2Rvc1twcm9qZWN0XS5mb3JFYWNoKHRvZG8gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvZG9EYXRlID0gbmV3IERhdGUodG9kby5kdWVEYXRlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtc0RpZmZlcmVuY2UgPSBNYXRoLmFicyh0b2RheS5nZXRUaW1lKCkgLSB0b2RvRGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRheURpZmZlcmVuY2UgPSBtc0RpZmZlcmVuY2UgLyAoMjQqNjAqNjAqMTAwMCk7XG4gICAgICAgICAgICAgICAgaWYgKGRheURpZmZlcmVuY2UgPD0gNykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRvZG8uY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2Vla1VuY2hlY2tlZFRvZG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFsbFRvZG9zQ291bnQudGV4dENvbnRlbnQgPSBgJHthbGxVbmNoZWNrZWRUb2Rvc31gO1xuICAgICAgICB0b2RheVRvZG9zQ291bnQudGV4dENvbnRlbnQgPSBgJHt0b2RheVVuY2hlY2tlZFRvZG9zfWA7XG4gICAgICAgIHdlZWtUb2Rvc0NvdW50LnRleHRDb250ZW50ID0gYCR7d2Vla1VuY2hlY2tlZFRvZG9zfWA7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbmRlclByb2plY3RMaXN0KHRvZG9zOiBQcm9qZWN0c09iamVjdCwgbGlzdENvbnRhaW5lcjogRWxlbWVudCkge1xuICAgICAgICBjb25zdCBlbDEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdHMtbGlzdCcpO1xuICAgICAgICBjb25zdCBwcm9qZWN0Q29udGFpbmVyOiBFbGVtZW50ID0gZWwxITtcbiAgICAgICAgcHJvamVjdENvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcblxuICAgICAgICBjb25zdCBwcm9qZWN0c09iamVjdCA9IHsgLi4udG9kb3MgfTtcbiAgICAgICAgZGVsZXRlIHByb2plY3RzT2JqZWN0WydhbGwnXTtcbiAgICAgICAgZGVsZXRlIHByb2plY3RzT2JqZWN0Wyd0b2RheSddO1xuICAgICAgICBkZWxldGUgcHJvamVjdHNPYmplY3RbJ3dlZWsnXTtcblxuICAgICAgICBmb3IgKGNvbnN0IHByb2plY3QgaW4gcHJvamVjdHNPYmplY3QpIHtcbiAgICAgICAgICAgIGxldCB1bmNoZWNrZWRUb2RvcyA9IDA7XG4gICAgICAgICAgICBwcm9qZWN0c09iamVjdFtwcm9qZWN0XS5mb3JFYWNoKHRvZG8gPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdG9kby5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuY2hlY2tlZFRvZG9zKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0VGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RDb3VudGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuXG4gICAgICAgICAgICBwcm9qZWN0SXRlbS5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0LWl0ZW0nKTtcbiAgICAgICAgICAgIHByb2plY3RDb3VudGVyLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtY291bnRlcicpO1xuICAgICAgICAgICAgcHJvamVjdENvdW50ZXIudGV4dENvbnRlbnQgPSBgJHt1bmNoZWNrZWRUb2Rvc31gO1xuICAgICAgICAgICAgcHJvamVjdFRpdGxlLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtbmFtZScpO1xuICAgICAgICAgICAgcHJvamVjdFRpdGxlLnRleHRDb250ZW50ID0gcHJvamVjdDtcbiAgICAgICAgICAgIHByb2plY3RUaXRsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gKGUudGFyZ2V0IGFzIEVsZW1lbnQpLnRleHRDb250ZW50ITtcbiAgICAgICAgICAgICAgICBtYW5hZ2VEYXRhLnNldFNlbGVjdGVkUHJvamVjdCh0b2RvcywgcHJvamVjdE5hbWUsIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHByb2plY3RJdGVtLmFwcGVuZENoaWxkKHByb2plY3RUaXRsZSk7XG4gICAgICAgICAgICBwcm9qZWN0SXRlbS5hcHBlbmRDaGlsZChwcm9qZWN0Q291bnRlcik7XG4gICAgICAgICAgICBwcm9qZWN0Q29udGFpbmVyLmFwcGVuZENoaWxkKHByb2plY3RJdGVtKTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVuZGVySGlnaGxpZ2h0ZWRDYXRlZ29yeSgpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmlsdGVycy1idG4nKTtcbiAgICAgICAgY29uc3QgZmlsdGVyQnRuczogTm9kZUxpc3RPZjxFbGVtZW50PiA9IGZpbHRlckVsITtcbiAgICAgICAgY29uc3QgcHJvamVjdEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3QtbmFtZScpO1xuICAgICAgICBjb25zdCBwcm9qZWN0QnRuczogTm9kZUxpc3RPZjxFbGVtZW50PiA9IHByb2plY3RFbCE7XG5cbiAgICAgICAgY29uc3QgcHJvamVjdE5hbWUgPSBtYW5hZ2VEYXRhLmdldFNlbGVjdGVkUHJvamVjdCgpO1xuXG4gICAgICAgIGZpbHRlckJ0bnMuZm9yRWFjaChidG4gPT4ge1xuICAgICAgICAgICAgYnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2NsaWNrZWQnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcHJvamVjdEJ0bnMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnY2xpY2tlZCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmaWx0ZXJCdG5zLmZvckVhY2goYnRuID0+IHtcbiAgICAgICAgICAgIGlmIChwcm9qZWN0TmFtZSA9PT0gJ2FsbCcgJiYgYnRuLmNsYXNzTGlzdC5jb250YWlucygnYWxsLWJ0bicpKSB7XG4gICAgICAgICAgICAgICAgYnRuLmNsYXNzTGlzdC5hZGQoJ2NsaWNrZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvamVjdE5hbWUgPT09ICd0b2RheScgJiYgYnRuLmNsYXNzTGlzdC5jb250YWlucygndG9kYXktYnRuJykpIHtcbiAgICAgICAgICAgICAgICBidG4uY2xhc3NMaXN0LmFkZCgnY2xpY2tlZCcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9qZWN0TmFtZSA9PT0gJ3dlZWsnICYmIGJ0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3dlZWstYnRuJykpIHtcbiAgICAgICAgICAgICAgICBidG4uY2xhc3NMaXN0LmFkZCgnY2xpY2tlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgcHJvamVjdEJ0bnMuZm9yRWFjaChidG4gPT4ge1xuICAgICAgICAgICAgaWYgKGJ0bi50ZXh0Q29udGVudCA9PT0gcHJvamVjdE5hbWUpIHtcbiAgICAgICAgICAgICAgICBidG4uY2xhc3NMaXN0LmFkZCgnY2xpY2tlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVuZGVyQWxsVG9kb3ModG9kb3M6IFByb2plY3RzT2JqZWN0LCBsaXN0Q29udGFpbmVyOiBFbGVtZW50KSB7XG4gICAgICAgIGxpc3RDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG5cbiAgICAgICAgZm9yIChjb25zdCBwcm9qZWN0IGluIHRvZG9zKSB7XG4gICAgICAgICAgICB0b2Rvc1twcm9qZWN0XS5mb3JFYWNoKCh0b2RvLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZU9iamVjdCA9IG5ldyBEYXRlKHRvZG8uZHVlRGF0ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9udGggPSBmb3JtYXQoZGF0ZU9iamVjdCwgJ01NTScpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRheSA9IGZvcm1hdChkYXRlT2JqZWN0LCAnZG8nKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRvZG9JdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbUxlZnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtUmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGVja2JveEljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbU5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm90ZXNCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlZGl0SWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWxldGVJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuXG4gICAgICAgICAgICAgICAgdG9kb0l0ZW0uY2xhc3NMaXN0LmFkZCgnbGlzdC1pdGVtJyk7XG4gICAgICAgICAgICAgICAgdG9kb0l0ZW0uY2xhc3NMaXN0LmFkZChgJHt0b2RvLnByaW9yaXR5fS1wcmlvcml0eWApO1xuICAgICAgICAgICAgICAgIHRvZG9JdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcsIGAke2l9YCk7XG4gICAgICAgICAgICAgICAgdG9kb0l0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLXByb2plY3QnLCBgJHt0b2RvLnByb2plY3R9YCk7XG4gICAgICAgICAgICAgICAgaXRlbUxlZnQuY2xhc3NMaXN0LmFkZCgnbGlzdC1pdGVtLWxlZnQnKTtcbiAgICAgICAgICAgICAgICBpdGVtUmlnaHQuY2xhc3NMaXN0LmFkZCgnbGlzdC1pdGVtLXJpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgY2hlY2tib3hJY29uLmNsYXNzTGlzdC5hZGQoJ2ZhLXJlZ3VsYXInLCAnZmEtc3F1YXJlJyk7XG4gICAgICAgICAgICAgICAgaXRlbU5hbWUuY2xhc3NMaXN0LmFkZCgnaXRlbS1kZXNjcmlwdGlvbicpO1xuICAgICAgICAgICAgICAgIGl0ZW1OYW1lLnRleHRDb250ZW50ID0gdG9kby50aXRsZTtcbiAgICAgICAgICAgICAgICBub3Rlc0J0bi5jbGFzc0xpc3QuYWRkKCdpdGVtLW5vdGVzJyk7XG4gICAgICAgICAgICAgICAgbm90ZXNCdG4udGV4dENvbnRlbnQgPSAnTk9URVMnO1xuICAgICAgICAgICAgICAgIGRhdGVUZXh0LmNsYXNzTGlzdC5hZGQoJ2l0ZW0tZGF0ZScpO1xuICAgICAgICAgICAgICAgIGRhdGVUZXh0LnRleHRDb250ZW50ID0gYCR7bW9udGh9ICR7ZGF5fWA7XG4gICAgICAgICAgICAgICAgZWRpdEljb24uY2xhc3NMaXN0LmFkZCgnZmEtc29saWQnLCAnZmEtcGVuLXRvLXNxdWFyZScpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZUljb24uY2xhc3NMaXN0LmFkZCgnZmEtc29saWQnLCAnZmEtdHJhc2gtY2FuJyk7XG5cbiAgICAgICAgICAgICAgICBpdGVtTGVmdC5hcHBlbmRDaGlsZChjaGVja2JveEljb24pO1xuICAgICAgICAgICAgICAgIGl0ZW1MZWZ0LmFwcGVuZENoaWxkKGl0ZW1OYW1lKTtcbiAgICAgICAgICAgICAgICBpdGVtUmlnaHQuYXBwZW5kQ2hpbGQobm90ZXNCdG4pO1xuICAgICAgICAgICAgICAgIGl0ZW1SaWdodC5hcHBlbmRDaGlsZChkYXRlVGV4dCk7XG4gICAgICAgICAgICAgICAgaXRlbVJpZ2h0LmFwcGVuZENoaWxkKGVkaXRJY29uKTtcbiAgICAgICAgICAgICAgICBpdGVtUmlnaHQuYXBwZW5kQ2hpbGQoZGVsZXRlSWNvbik7XG4gICAgICAgICAgICAgICAgdG9kb0l0ZW0uYXBwZW5kQ2hpbGQoaXRlbUxlZnQpO1xuICAgICAgICAgICAgICAgIHRvZG9JdGVtLmFwcGVuZENoaWxkKGl0ZW1SaWdodCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodG9kby5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlckNoZWNrZWRUb2RvKHRvZG9zLCB0b2RvSXRlbSwgbGlzdENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGxpc3RDb250YWluZXIuYXBwZW5kQ2hpbGQodG9kb0l0ZW0pO1xuXG4gICAgICAgICAgICAgICAgY2hlY2tib3hJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpdGVtOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwcm9qZWN0OiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbVBhcmVudCA9IHRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1QYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1HcmFuZHBhcmVudCA9IGl0ZW1QYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbUdyYW5kcGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9IE51bWJlcihpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3QgPSBpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5wcm9qZWN0ITtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFuYWdlRGF0YS5jaGVja09mZlRvZG8oaXRlbSwgcHJvamVjdCwgdG9kb3MsIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbm90ZXNCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHJlbmRlck5vdGVzUG9wdXAoZSwgdG9kb3MpKTtcblxuICAgICAgICAgICAgICAgIGVkaXRJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBlZGl0SXRlbTogbnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZWRpdFByb2plY3Q6IHN0cmluZzsgXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbVBhcmVudCA9IHRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1QYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1HcmFuZHBhcmVudCA9IGl0ZW1QYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbUdyYW5kcGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdEl0ZW0gPSBOdW1iZXIoaXRlbUdyYW5kcGFyZW50LmRhdGFzZXQuaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0UHJvamVjdCA9IGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LnByb2plY3QhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJFZGl0UG9wdXAoZWRpdEl0ZW0sIGVkaXRQcm9qZWN0LCB0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBkZWxldGVJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpdGVtOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwcm9qZWN0OiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbVBhcmVudCA9IHRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1QYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1HcmFuZHBhcmVudCA9IGl0ZW1QYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbUdyYW5kcGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9IE51bWJlcihpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3QgPSBpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5wcm9qZWN0ITtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyRGVsZXRlUG9wdXAoaXRlbSwgcHJvamVjdCwgdG9kb3MsIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVuZGVyVG9kYXlUb2Rvcyh0b2RvczogUHJvamVjdHNPYmplY3QsIGxpc3RDb250YWluZXI6IEVsZW1lbnQpIHtcbiAgICAgICAgbGlzdENvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcblxuICAgICAgICBmb3IgKGNvbnN0IHByb2plY3QgaW4gdG9kb3MpIHtcbiAgICAgICAgICAgIGlmIChwcm9qZWN0ICE9PSAndG9kYXknKSB7XG4gICAgICAgICAgICAgICAgdG9kb3NbcHJvamVjdF0uZm9yRWFjaCgodG9kbywgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvZG9EYXRlID0gbmV3IERhdGUodG9kby5kdWVEYXRlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2RheS5nZXREYXRlKCkgPT09IHRvZG9EYXRlLmdldERhdGUoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdG9kYXkuZ2V0TW9udGgoKSA9PT0gdG9kb0RhdGUuZ2V0TW9udGgoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdG9kYXkuZ2V0RnVsbFllYXIoKSA9PT0gdG9kb0RhdGUuZ2V0RnVsbFllYXIoKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVPYmplY3QgPSBuZXcgRGF0ZSh0b2RvLmR1ZURhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9udGggPSBmb3JtYXQoZGF0ZU9iamVjdCwgJ01NTScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF5ID0gZm9ybWF0KGRhdGVPYmplY3QsICdkbycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2RvSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbUxlZnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1SaWdodCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hlY2tib3hJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbU5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub3Rlc0J0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZVRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlZGl0SWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlbGV0ZUljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZG9JdGVtLmNsYXNzTGlzdC5hZGQoJ2xpc3QtaXRlbScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9kb0l0ZW0uY2xhc3NMaXN0LmFkZChgJHt0b2RvLnByaW9yaXR5fS1wcmlvcml0eWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9kb0l0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JywgYCR7aX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZG9JdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1wcm9qZWN0JywgYCR7dG9kby5wcm9qZWN0fWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUxlZnQuY2xhc3NMaXN0LmFkZCgnbGlzdC1pdGVtLWxlZnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1SaWdodC5jbGFzc0xpc3QuYWRkKCdsaXN0LWl0ZW0tcmlnaHQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94SWNvbi5jbGFzc0xpc3QuYWRkKCdmYS1yZWd1bGFyJywgJ2ZhLXNxdWFyZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbU5hbWUuY2xhc3NMaXN0LmFkZCgnaXRlbS1kZXNjcmlwdGlvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbU5hbWUudGV4dENvbnRlbnQgPSB0b2RvLnRpdGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm90ZXNCdG4uY2xhc3NMaXN0LmFkZCgnaXRlbS1ub3RlcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm90ZXNCdG4udGV4dENvbnRlbnQgPSAnTk9URVMnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVRleHQuY2xhc3NMaXN0LmFkZCgnaXRlbS1kYXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlVGV4dC50ZXh0Q29udGVudCA9IGAke21vbnRofSAke2RheX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdEljb24uY2xhc3NMaXN0LmFkZCgnZmEtc29saWQnLCAnZmEtcGVuLXRvLXNxdWFyZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlSWNvbi5jbGFzc0xpc3QuYWRkKCdmYS1zb2xpZCcsICdmYS10cmFzaC1jYW4nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbUxlZnQuYXBwZW5kQ2hpbGQoY2hlY2tib3hJY29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1MZWZ0LmFwcGVuZENoaWxkKGl0ZW1OYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1SaWdodC5hcHBlbmRDaGlsZChub3Rlc0J0bik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtUmlnaHQuYXBwZW5kQ2hpbGQoZGF0ZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVJpZ2h0LmFwcGVuZENoaWxkKGVkaXRJY29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1SaWdodC5hcHBlbmRDaGlsZChkZWxldGVJY29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZG9JdGVtLmFwcGVuZENoaWxkKGl0ZW1MZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZG9JdGVtLmFwcGVuZENoaWxkKGl0ZW1SaWdodCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2RvLmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJDaGVja2VkVG9kbyh0b2RvcywgdG9kb0l0ZW0sIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdENvbnRhaW5lci5hcHBlbmRDaGlsZCh0b2RvSXRlbSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94SWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpdGVtOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHByb2plY3Q6IHN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1QYXJlbnQgPSB0YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1QYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbUdyYW5kcGFyZW50ID0gaXRlbVBhcmVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1HcmFuZHBhcmVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9IE51bWJlcihpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdCA9IGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LnByb2plY3QhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbmFnZURhdGEuY2hlY2tPZmZUb2RvKGl0ZW0sIHByb2plY3QsIHRvZG9zLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGVzQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiByZW5kZXJOb3Rlc1BvcHVwKGUsIHRvZG9zKSk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdEljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZWRpdEl0ZW06IG51bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZWRpdFByb2plY3Q6IHN0cmluZzsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtUGFyZW50ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtUGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1HcmFuZHBhcmVudCA9IGl0ZW1QYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtR3JhbmRwYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRJdGVtID0gTnVtYmVyKGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0UHJvamVjdCA9IGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LnByb2plY3QhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckVkaXRQb3B1cChlZGl0SXRlbSwgZWRpdFByb2plY3QsIHRvZG9zLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbTogbnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcm9qZWN0OiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtUGFyZW50ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtUGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1HcmFuZHBhcmVudCA9IGl0ZW1QYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtR3JhbmRwYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBOdW1iZXIoaXRlbUdyYW5kcGFyZW50LmRhdGFzZXQuaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3QgPSBpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5wcm9qZWN0ITtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJEZWxldGVQb3B1cChpdGVtLCBwcm9qZWN0LCB0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdG9kb0xpc3QgPSB0b2Rvc1ttYW5hZ2VEYXRhLmdldFNlbGVjdGVkUHJvamVjdCgpXTtcblxuICAgICAgICBpZiAodG9kb0xpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0b2RvTGlzdC5mb3JFYWNoKCh0b2RvLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRlT2JqZWN0ID0gbmV3IERhdGUodG9kby5kdWVEYXRlKTtcbiAgICAgICAgICAgIGNvbnN0IG1vbnRoID0gZm9ybWF0KGRhdGVPYmplY3QsICdNTU0nKTtcbiAgICAgICAgICAgIGNvbnN0IGRheSA9IGZvcm1hdChkYXRlT2JqZWN0LCAnZG8nKTtcblxuICAgICAgICAgICAgY29uc3QgdG9kb0l0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1MZWZ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjb25zdCBpdGVtUmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94SWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1OYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgY29uc3Qgbm90ZXNCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGVUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgY29uc3QgZWRpdEljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XG4gICAgICAgICAgICBjb25zdCBkZWxldGVJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuXG4gICAgICAgICAgICB0b2RvSXRlbS5jbGFzc0xpc3QuYWRkKCdsaXN0LWl0ZW0nKTtcbiAgICAgICAgICAgIHRvZG9JdGVtLmNsYXNzTGlzdC5hZGQoYCR7dG9kby5wcmlvcml0eX0tcHJpb3JpdHlgKTtcbiAgICAgICAgICAgIHRvZG9JdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcsIGAke2l9YCk7XG4gICAgICAgICAgICB0b2RvSXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdCcsIGAke3RvZG8ucHJvamVjdH1gKTtcbiAgICAgICAgICAgIGl0ZW1MZWZ0LmNsYXNzTGlzdC5hZGQoJ2xpc3QtaXRlbS1sZWZ0Jyk7XG4gICAgICAgICAgICBpdGVtUmlnaHQuY2xhc3NMaXN0LmFkZCgnbGlzdC1pdGVtLXJpZ2h0Jyk7XG4gICAgICAgICAgICBjaGVja2JveEljb24uY2xhc3NMaXN0LmFkZCgnZmEtcmVndWxhcicsICdmYS1zcXVhcmUnKTtcbiAgICAgICAgICAgIGl0ZW1OYW1lLmNsYXNzTGlzdC5hZGQoJ2l0ZW0tZGVzY3JpcHRpb24nKTtcbiAgICAgICAgICAgIGl0ZW1OYW1lLnRleHRDb250ZW50ID0gdG9kby50aXRsZTtcbiAgICAgICAgICAgIG5vdGVzQnRuLmNsYXNzTGlzdC5hZGQoJ2l0ZW0tbm90ZXMnKTtcbiAgICAgICAgICAgIG5vdGVzQnRuLnRleHRDb250ZW50ID0gJ05PVEVTJztcbiAgICAgICAgICAgIGRhdGVUZXh0LmNsYXNzTGlzdC5hZGQoJ2l0ZW0tZGF0ZScpO1xuICAgICAgICAgICAgZGF0ZVRleHQudGV4dENvbnRlbnQgPSBgJHttb250aH0gJHtkYXl9YDtcbiAgICAgICAgICAgIGVkaXRJY29uLmNsYXNzTGlzdC5hZGQoJ2ZhLXNvbGlkJywgJ2ZhLXBlbi10by1zcXVhcmUnKTtcbiAgICAgICAgICAgIGRlbGV0ZUljb24uY2xhc3NMaXN0LmFkZCgnZmEtc29saWQnLCAnZmEtdHJhc2gtY2FuJyk7XG5cbiAgICAgICAgICAgIGl0ZW1MZWZ0LmFwcGVuZENoaWxkKGNoZWNrYm94SWNvbik7XG4gICAgICAgICAgICBpdGVtTGVmdC5hcHBlbmRDaGlsZChpdGVtTmFtZSk7XG4gICAgICAgICAgICBpdGVtUmlnaHQuYXBwZW5kQ2hpbGQobm90ZXNCdG4pO1xuICAgICAgICAgICAgaXRlbVJpZ2h0LmFwcGVuZENoaWxkKGRhdGVUZXh0KTtcbiAgICAgICAgICAgIGl0ZW1SaWdodC5hcHBlbmRDaGlsZChlZGl0SWNvbik7XG4gICAgICAgICAgICBpdGVtUmlnaHQuYXBwZW5kQ2hpbGQoZGVsZXRlSWNvbik7XG4gICAgICAgICAgICB0b2RvSXRlbS5hcHBlbmRDaGlsZChpdGVtTGVmdCk7XG4gICAgICAgICAgICB0b2RvSXRlbS5hcHBlbmRDaGlsZChpdGVtUmlnaHQpO1xuXG4gICAgICAgICAgICBpZiAodG9kby5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyQ2hlY2tlZFRvZG8odG9kb3MsIHRvZG9JdGVtLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxpc3RDb250YWluZXIuYXBwZW5kQ2hpbGQodG9kb0l0ZW0pO1xuXG4gICAgICAgICAgICBjaGVja2JveEljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgaXRlbTogbnVtYmVyO1xuICAgICAgICAgICAgICAgIGxldCBwcm9qZWN0OiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtUGFyZW50ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtUGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1HcmFuZHBhcmVudCA9IGl0ZW1QYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtR3JhbmRwYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBOdW1iZXIoaXRlbUdyYW5kcGFyZW50LmRhdGFzZXQuaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3QgPSBpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5wcm9qZWN0ITtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW5hZ2VEYXRhLmNoZWNrT2ZmVG9kbyhpdGVtLCBwcm9qZWN0LCB0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbm90ZXNCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHJlbmRlck5vdGVzUG9wdXAoZSwgdG9kb3MpKTtcblxuICAgICAgICAgICAgZWRpdEljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZWRpdEl0ZW06IG51bWJlcjtcbiAgICAgICAgICAgICAgICBsZXQgZWRpdFByb2plY3Q6IHN0cmluZzsgXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtUGFyZW50ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtUGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1HcmFuZHBhcmVudCA9IGl0ZW1QYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtR3JhbmRwYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRJdGVtID0gTnVtYmVyKGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0UHJvamVjdCA9IGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LnByb2plY3QhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckVkaXRQb3B1cChlZGl0SXRlbSwgZWRpdFByb2plY3QsIHRvZG9zLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBkZWxldGVJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW06IG51bWJlcjtcbiAgICAgICAgICAgICAgICBsZXQgcHJvamVjdDogc3RyaW5nO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbVBhcmVudCA9IHRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbVBhcmVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtR3JhbmRwYXJlbnQgPSBpdGVtUGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbUdyYW5kcGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gTnVtYmVyKGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0ID0gaXRlbUdyYW5kcGFyZW50LmRhdGFzZXQucHJvamVjdCE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyRGVsZXRlUG9wdXAoaXRlbSwgcHJvamVjdCwgdG9kb3MsIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZW5kZXJXZWVrVG9kb3ModG9kb3M6IFByb2plY3RzT2JqZWN0LCBsaXN0Q29udGFpbmVyOiBFbGVtZW50KSB7XG4gICAgICAgIGxpc3RDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG5cbiAgICAgICAgZm9yIChjb25zdCBwcm9qZWN0IGluIHRvZG9zKSB7XG4gICAgICAgICAgICBpZiAocHJvamVjdCAhPT0gJ3dlZWsnKSB7XG4gICAgICAgICAgICAgICAgdG9kb3NbcHJvamVjdF0uZm9yRWFjaCgodG9kbywgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvZG9EYXRlID0gbmV3IERhdGUodG9kby5kdWVEYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNEaWZmZXJlbmNlID0gTWF0aC5hYnModG9kYXkuZ2V0VGltZSgpIC0gdG9kb0RhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF5RGlmZmVyZW5jZSA9IG1zRGlmZmVyZW5jZSAvICgyNCo2MCo2MCoxMDAwKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF5RGlmZmVyZW5jZSA8PSA3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRlT2JqZWN0ID0gbmV3IERhdGUodG9kby5kdWVEYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vbnRoID0gZm9ybWF0KGRhdGVPYmplY3QsICdNTU0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRheSA9IGZvcm1hdChkYXRlT2JqZWN0LCAnZG8nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9kb0l0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1MZWZ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtUmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94SWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1OYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm90ZXNCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWRpdEljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWxldGVJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2RvSXRlbS5jbGFzc0xpc3QuYWRkKCdsaXN0LWl0ZW0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZG9JdGVtLmNsYXNzTGlzdC5hZGQoYCR7dG9kby5wcmlvcml0eX0tcHJpb3JpdHlgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZG9JdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcsIGAke2l9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2RvSXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdCcsIGAke3RvZG8ucHJvamVjdH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1MZWZ0LmNsYXNzTGlzdC5hZGQoJ2xpc3QtaXRlbS1sZWZ0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtUmlnaHQuY2xhc3NMaXN0LmFkZCgnbGlzdC1pdGVtLXJpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveEljb24uY2xhc3NMaXN0LmFkZCgnZmEtcmVndWxhcicsICdmYS1zcXVhcmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1OYW1lLmNsYXNzTGlzdC5hZGQoJ2l0ZW0tZGVzY3JpcHRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1OYW1lLnRleHRDb250ZW50ID0gdG9kby50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGVzQnRuLmNsYXNzTGlzdC5hZGQoJ2l0ZW0tbm90ZXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGVzQnRuLnRleHRDb250ZW50ID0gJ05PVEVTJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVUZXh0LmNsYXNzTGlzdC5hZGQoJ2l0ZW0tZGF0ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVRleHQudGV4dENvbnRlbnQgPSBgJHttb250aH0gJHtkYXl9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRJY29uLmNsYXNzTGlzdC5hZGQoJ2ZhLXNvbGlkJywgJ2ZhLXBlbi10by1zcXVhcmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUljb24uY2xhc3NMaXN0LmFkZCgnZmEtc29saWQnLCAnZmEtdHJhc2gtY2FuJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1MZWZ0LmFwcGVuZENoaWxkKGNoZWNrYm94SWNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtTGVmdC5hcHBlbmRDaGlsZChpdGVtTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtUmlnaHQuYXBwZW5kQ2hpbGQobm90ZXNCdG4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVJpZ2h0LmFwcGVuZENoaWxkKGRhdGVUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1SaWdodC5hcHBlbmRDaGlsZChlZGl0SWNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtUmlnaHQuYXBwZW5kQ2hpbGQoZGVsZXRlSWNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2RvSXRlbS5hcHBlbmRDaGlsZChpdGVtTGVmdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2RvSXRlbS5hcHBlbmRDaGlsZChpdGVtUmlnaHQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9kby5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyQ2hlY2tlZFRvZG8odG9kb3MsIHRvZG9JdGVtLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdENvbnRhaW5lci5hcHBlbmRDaGlsZCh0b2RvSXRlbSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94SWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpdGVtOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHByb2plY3Q6IHN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1QYXJlbnQgPSB0YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1QYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbUdyYW5kcGFyZW50ID0gaXRlbVBhcmVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1HcmFuZHBhcmVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9IE51bWJlcihpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdCA9IGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LnByb2plY3QhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbmFnZURhdGEuY2hlY2tPZmZUb2RvKGl0ZW0sIHByb2plY3QsIHRvZG9zLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGVzQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiByZW5kZXJOb3Rlc1BvcHVwKGUsIHRvZG9zKSk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdEljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZWRpdEl0ZW06IG51bWJlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZWRpdFByb2plY3Q6IHN0cmluZzsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtUGFyZW50ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtUGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1HcmFuZHBhcmVudCA9IGl0ZW1QYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtR3JhbmRwYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRJdGVtID0gTnVtYmVyKGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0UHJvamVjdCA9IGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LnByb2plY3QhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckVkaXRQb3B1cChlZGl0SXRlbSwgZWRpdFByb2plY3QsIHRvZG9zLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbTogbnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcm9qZWN0OiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtUGFyZW50ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtUGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1HcmFuZHBhcmVudCA9IGl0ZW1QYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtR3JhbmRwYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBOdW1iZXIoaXRlbUdyYW5kcGFyZW50LmRhdGFzZXQuaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3QgPSBpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5wcm9qZWN0ITtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJEZWxldGVQb3B1cChpdGVtLCBwcm9qZWN0LCB0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdG9kb0xpc3QgPSB0b2Rvc1ttYW5hZ2VEYXRhLmdldFNlbGVjdGVkUHJvamVjdCgpXTtcblxuICAgICAgICBpZiAodG9kb0xpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0b2RvTGlzdC5mb3JFYWNoKCh0b2RvLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRlT2JqZWN0ID0gbmV3IERhdGUodG9kby5kdWVEYXRlKTtcbiAgICAgICAgICAgIGNvbnN0IG1vbnRoID0gZm9ybWF0KGRhdGVPYmplY3QsICdNTU0nKTtcbiAgICAgICAgICAgIGNvbnN0IGRheSA9IGZvcm1hdChkYXRlT2JqZWN0LCAnZG8nKTtcblxuICAgICAgICAgICAgY29uc3QgdG9kb0l0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1MZWZ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjb25zdCBpdGVtUmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94SWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1OYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgY29uc3Qgbm90ZXNCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGVUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgY29uc3QgZWRpdEljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XG4gICAgICAgICAgICBjb25zdCBkZWxldGVJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuXG4gICAgICAgICAgICB0b2RvSXRlbS5jbGFzc0xpc3QuYWRkKCdsaXN0LWl0ZW0nKTtcbiAgICAgICAgICAgIHRvZG9JdGVtLmNsYXNzTGlzdC5hZGQoYCR7dG9kby5wcmlvcml0eX0tcHJpb3JpdHlgKTtcbiAgICAgICAgICAgIHRvZG9JdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcsIGAke2l9YCk7XG4gICAgICAgICAgICB0b2RvSXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvamVjdCcsIGAke3RvZG8ucHJvamVjdH1gKTtcbiAgICAgICAgICAgIGl0ZW1MZWZ0LmNsYXNzTGlzdC5hZGQoJ2xpc3QtaXRlbS1sZWZ0Jyk7XG4gICAgICAgICAgICBpdGVtUmlnaHQuY2xhc3NMaXN0LmFkZCgnbGlzdC1pdGVtLXJpZ2h0Jyk7XG4gICAgICAgICAgICBjaGVja2JveEljb24uY2xhc3NMaXN0LmFkZCgnZmEtcmVndWxhcicsICdmYS1zcXVhcmUnKTtcbiAgICAgICAgICAgIGl0ZW1OYW1lLmNsYXNzTGlzdC5hZGQoJ2l0ZW0tZGVzY3JpcHRpb24nKTtcbiAgICAgICAgICAgIGl0ZW1OYW1lLnRleHRDb250ZW50ID0gdG9kby50aXRsZTtcbiAgICAgICAgICAgIG5vdGVzQnRuLmNsYXNzTGlzdC5hZGQoJ2l0ZW0tbm90ZXMnKTtcbiAgICAgICAgICAgIG5vdGVzQnRuLnRleHRDb250ZW50ID0gJ05PVEVTJztcbiAgICAgICAgICAgIGRhdGVUZXh0LmNsYXNzTGlzdC5hZGQoJ2l0ZW0tZGF0ZScpO1xuICAgICAgICAgICAgZGF0ZVRleHQudGV4dENvbnRlbnQgPSBgJHttb250aH0gJHtkYXl9YDtcbiAgICAgICAgICAgIGVkaXRJY29uLmNsYXNzTGlzdC5hZGQoJ2ZhLXNvbGlkJywgJ2ZhLXBlbi10by1zcXVhcmUnKTtcbiAgICAgICAgICAgIGRlbGV0ZUljb24uY2xhc3NMaXN0LmFkZCgnZmEtc29saWQnLCAnZmEtdHJhc2gtY2FuJyk7XG5cbiAgICAgICAgICAgIGl0ZW1MZWZ0LmFwcGVuZENoaWxkKGNoZWNrYm94SWNvbik7XG4gICAgICAgICAgICBpdGVtTGVmdC5hcHBlbmRDaGlsZChpdGVtTmFtZSk7XG4gICAgICAgICAgICBpdGVtUmlnaHQuYXBwZW5kQ2hpbGQobm90ZXNCdG4pO1xuICAgICAgICAgICAgaXRlbVJpZ2h0LmFwcGVuZENoaWxkKGRhdGVUZXh0KTtcbiAgICAgICAgICAgIGl0ZW1SaWdodC5hcHBlbmRDaGlsZChlZGl0SWNvbik7XG4gICAgICAgICAgICBpdGVtUmlnaHQuYXBwZW5kQ2hpbGQoZGVsZXRlSWNvbik7XG4gICAgICAgICAgICB0b2RvSXRlbS5hcHBlbmRDaGlsZChpdGVtTGVmdCk7XG4gICAgICAgICAgICB0b2RvSXRlbS5hcHBlbmRDaGlsZChpdGVtUmlnaHQpO1xuXG4gICAgICAgICAgICBpZiAodG9kby5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyQ2hlY2tlZFRvZG8odG9kb3MsIHRvZG9JdGVtLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxpc3RDb250YWluZXIuYXBwZW5kQ2hpbGQodG9kb0l0ZW0pO1xuXG4gICAgICAgICAgICBjaGVja2JveEljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgaXRlbTogbnVtYmVyO1xuICAgICAgICAgICAgICAgIGxldCBwcm9qZWN0OiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtUGFyZW50ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtUGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1HcmFuZHBhcmVudCA9IGl0ZW1QYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtR3JhbmRwYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBOdW1iZXIoaXRlbUdyYW5kcGFyZW50LmRhdGFzZXQuaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2plY3QgPSBpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5wcm9qZWN0ITtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW5hZ2VEYXRhLmNoZWNrT2ZmVG9kbyhpdGVtLCBwcm9qZWN0LCB0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbm90ZXNCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHJlbmRlck5vdGVzUG9wdXAoZSwgdG9kb3MpKTtcblxuICAgICAgICAgICAgZWRpdEljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZWRpdEl0ZW06IG51bWJlcjtcbiAgICAgICAgICAgICAgICBsZXQgZWRpdFByb2plY3Q6IHN0cmluZzsgXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtUGFyZW50ID0gdGFyZ2V0LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtUGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1HcmFuZHBhcmVudCA9IGl0ZW1QYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtR3JhbmRwYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRJdGVtID0gTnVtYmVyKGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0UHJvamVjdCA9IGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LnByb2plY3QhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckVkaXRQb3B1cChlZGl0SXRlbSwgZWRpdFByb2plY3QsIHRvZG9zLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBkZWxldGVJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW06IG51bWJlcjtcbiAgICAgICAgICAgICAgICBsZXQgcHJvamVjdDogc3RyaW5nO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbVBhcmVudCA9IHRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbVBhcmVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtR3JhbmRwYXJlbnQgPSBpdGVtUGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbUdyYW5kcGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gTnVtYmVyKGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0ID0gaXRlbUdyYW5kcGFyZW50LmRhdGFzZXQucHJvamVjdCE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyRGVsZXRlUG9wdXAoaXRlbSwgcHJvamVjdCwgdG9kb3MsIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZW5kZXJQcm9qZWN0VG9kb3ModG9kb3M6IFByb2plY3RzT2JqZWN0LCBsaXN0Q29udGFpbmVyOiBFbGVtZW50KSB7XG4gICAgICAgIGxpc3RDb250YWluZXIuaW5uZXJIVE1MID0gJyc7XG5cbiAgICAgICAgY29uc3QgdG9kb0xpc3QgPSB0b2Rvc1ttYW5hZ2VEYXRhLmdldFNlbGVjdGVkUHJvamVjdCgpXTtcbiAgICAgICAgY29uc29sZS5sb2cobWFuYWdlRGF0YS5nZXRTZWxlY3RlZFByb2plY3QoKSlcbiAgICAgICAgaWYgKHRvZG9MaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9kb0xpc3QuZm9yRWFjaCgodG9kbywgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF0ZU9iamVjdCA9IG5ldyBEYXRlKHRvZG8uZHVlRGF0ZSk7XG4gICAgICAgICAgICBjb25zdCBtb250aCA9IGZvcm1hdChkYXRlT2JqZWN0LCAnTU1NJyk7XG4gICAgICAgICAgICBjb25zdCBkYXkgPSBmb3JtYXQoZGF0ZU9iamVjdCwgJ2RvJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRvZG9JdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjb25zdCBpdGVtTGVmdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgY29uc3QgaXRlbVJpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjb25zdCBjaGVja2JveEljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpJyk7XG4gICAgICAgICAgICBjb25zdCBpdGVtTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgIGNvbnN0IG5vdGVzQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICBjb25zdCBkYXRlVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgIGNvbnN0IGVkaXRJY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaScpO1xuICAgICAgICAgICAgY29uc3QgZGVsZXRlSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2knKTtcblxuICAgICAgICAgICAgdG9kb0l0ZW0uY2xhc3NMaXN0LmFkZCgnbGlzdC1pdGVtJyk7XG4gICAgICAgICAgICB0b2RvSXRlbS5jbGFzc0xpc3QuYWRkKGAke3RvZG8ucHJpb3JpdHl9LXByaW9yaXR5YCk7XG4gICAgICAgICAgICB0b2RvSXRlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW5kZXgnLCBgJHtpfWApO1xuICAgICAgICAgICAgdG9kb0l0ZW0uc2V0QXR0cmlidXRlKCdkYXRhLXByb2plY3QnLCBgJHt0b2RvLnByb2plY3R9YCk7XG4gICAgICAgICAgICBpdGVtTGVmdC5jbGFzc0xpc3QuYWRkKCdsaXN0LWl0ZW0tbGVmdCcpO1xuICAgICAgICAgICAgaXRlbVJpZ2h0LmNsYXNzTGlzdC5hZGQoJ2xpc3QtaXRlbS1yaWdodCcpO1xuICAgICAgICAgICAgY2hlY2tib3hJY29uLmNsYXNzTGlzdC5hZGQoJ2ZhLXJlZ3VsYXInLCAnZmEtc3F1YXJlJyk7XG4gICAgICAgICAgICBpdGVtTmFtZS5jbGFzc0xpc3QuYWRkKCdpdGVtLWRlc2NyaXB0aW9uJyk7XG4gICAgICAgICAgICBpdGVtTmFtZS50ZXh0Q29udGVudCA9IHRvZG8udGl0bGU7XG4gICAgICAgICAgICBub3Rlc0J0bi5jbGFzc0xpc3QuYWRkKCdpdGVtLW5vdGVzJyk7XG4gICAgICAgICAgICBub3Rlc0J0bi50ZXh0Q29udGVudCA9ICdOT1RFUyc7XG4gICAgICAgICAgICBkYXRlVGV4dC5jbGFzc0xpc3QuYWRkKCdpdGVtLWRhdGUnKTtcbiAgICAgICAgICAgIGRhdGVUZXh0LnRleHRDb250ZW50ID0gYCR7bW9udGh9ICR7ZGF5fWA7XG4gICAgICAgICAgICBlZGl0SWNvbi5jbGFzc0xpc3QuYWRkKCdmYS1zb2xpZCcsICdmYS1wZW4tdG8tc3F1YXJlJyk7XG4gICAgICAgICAgICBkZWxldGVJY29uLmNsYXNzTGlzdC5hZGQoJ2ZhLXNvbGlkJywgJ2ZhLXRyYXNoLWNhbicpO1xuXG4gICAgICAgICAgICBpdGVtTGVmdC5hcHBlbmRDaGlsZChjaGVja2JveEljb24pO1xuICAgICAgICAgICAgaXRlbUxlZnQuYXBwZW5kQ2hpbGQoaXRlbU5hbWUpO1xuICAgICAgICAgICAgaXRlbVJpZ2h0LmFwcGVuZENoaWxkKG5vdGVzQnRuKTtcbiAgICAgICAgICAgIGl0ZW1SaWdodC5hcHBlbmRDaGlsZChkYXRlVGV4dCk7XG4gICAgICAgICAgICBpdGVtUmlnaHQuYXBwZW5kQ2hpbGQoZWRpdEljb24pO1xuICAgICAgICAgICAgaXRlbVJpZ2h0LmFwcGVuZENoaWxkKGRlbGV0ZUljb24pO1xuICAgICAgICAgICAgdG9kb0l0ZW0uYXBwZW5kQ2hpbGQoaXRlbUxlZnQpO1xuICAgICAgICAgICAgdG9kb0l0ZW0uYXBwZW5kQ2hpbGQoaXRlbVJpZ2h0KTtcblxuICAgICAgICAgICAgaWYgKHRvZG8uY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIHJlbmRlckNoZWNrZWRUb2RvKHRvZG9zLCB0b2RvSXRlbSwgbGlzdENvbnRhaW5lcik7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsaXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKHRvZG9JdGVtKTtcblxuICAgICAgICAgICAgY2hlY2tib3hJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW06IG51bWJlcjtcbiAgICAgICAgICAgICAgICBsZXQgcHJvamVjdDogc3RyaW5nO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbVBhcmVudCA9IHRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbVBhcmVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtR3JhbmRwYXJlbnQgPSBpdGVtUGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbUdyYW5kcGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gTnVtYmVyKGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0ID0gaXRlbUdyYW5kcGFyZW50LmRhdGFzZXQucHJvamVjdCE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFuYWdlRGF0YS5jaGVja09mZlRvZG8oaXRlbSwgcHJvamVjdCwgdG9kb3MsIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIG5vdGVzQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiByZW5kZXJOb3Rlc1BvcHVwKGUsIHRvZG9zKSk7XG5cbiAgICAgICAgICAgIGVkaXRJY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGVkaXRJdGVtOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgbGV0IGVkaXRQcm9qZWN0OiBzdHJpbmc7IFxuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbVBhcmVudCA9IHRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbVBhcmVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtR3JhbmRwYXJlbnQgPSBpdGVtUGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbUdyYW5kcGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0SXRlbSA9IE51bWJlcihpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdFByb2plY3QgPSBpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5wcm9qZWN0ITtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJFZGl0UG9wdXAoZWRpdEl0ZW0sIGVkaXRQcm9qZWN0LCB0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZGVsZXRlSWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtOiBudW1iZXI7XG4gICAgICAgICAgICAgICAgbGV0IHByb2plY3Q6IHN0cmluZztcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1QYXJlbnQgPSB0YXJnZXQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1QYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbUdyYW5kcGFyZW50ID0gaXRlbVBhcmVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1HcmFuZHBhcmVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9IE51bWJlcihpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvamVjdCA9IGl0ZW1HcmFuZHBhcmVudC5kYXRhc2V0LnByb2plY3QhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckRlbGV0ZVBvcHVwKGl0ZW0sIHByb2plY3QsIHRvZG9zLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVuZGVyQ2hlY2tlZFRvZG8odG9kb3M6IFByb2plY3RzT2JqZWN0LCB0b2RvQ29udGFpbmVyOiBFbGVtZW50LCBsaXN0Q29udGFpbmVyOiBFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IHRvZG9JdGVtcyA9IHRvZG9Db250YWluZXIuY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IGl0ZW1zTGVmdCA9IHRvZG9JdGVtc1swXTtcbiAgICAgICAgY29uc3QgaXRlbXNSaWdodCA9IHRvZG9JdGVtc1sxXTtcbiAgICAgICAgY29uc3QgY2hlY2tib3ggPSBpdGVtc0xlZnQuY2hpbGRyZW5bMF07XG4gICAgICAgIGNvbnN0IGl0ZW1UaXRsZSA9IGl0ZW1zTGVmdC5jaGlsZHJlblsxXTtcbiAgICAgICAgY29uc3QgaXRlbU5vdGVzID0gaXRlbXNSaWdodC5jaGlsZHJlblswXTtcbiAgICAgICAgY29uc3QgaXRlbURhdGUgPSBpdGVtc1JpZ2h0LmNoaWxkcmVuWzFdO1xuICAgICAgICBjb25zdCBpdGVtRWRpdCA9IGl0ZW1zUmlnaHQuY2hpbGRyZW5bMl07IFxuICAgIFxuICAgICAgICBjaGVja2JveC5jbGFzc0xpc3QucmVtb3ZlKCdmYS1zcXVhcmUnKTtcbiAgICAgICAgY2hlY2tib3guY2xhc3NMaXN0LmFkZCgnZmEtc3F1YXJlLWNoZWNrJyk7XG4gICAgICAgIGl0ZW1UaXRsZS5jbGFzc0xpc3QudG9nZ2xlKCdzZWxlY3RlZCcpO1xuICAgICAgICBpdGVtVGl0bGUuY2xhc3NMaXN0LnRvZ2dsZSgnc3RyaWtlJyk7XG4gICAgICAgIGl0ZW1Ob3Rlcy5jbGFzc0xpc3QudG9nZ2xlKCdkb25lJyk7XG4gICAgICAgIGl0ZW1EYXRlLmNsYXNzTGlzdC50b2dnbGUoJ3NlbGVjdGVkJyk7XG4gICAgICAgIGl0ZW1FZGl0LmNsYXNzTGlzdC50b2dnbGUoJ3NlbGVjdGVkJyk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbmRlckFkZE5ld1BvcHVwKHRvZG9zOiBQcm9qZWN0c09iamVjdCwgbGlzdENvbnRhaW5lcjogRWxlbWVudCkge1xuICAgICAgICBjb25zdCBhZGROZXdQb3B1cEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwLWFkZC1uZXcnKTtcbiAgICAgICAgY29uc3QgYWRkTmV3UG9wdXA6IEVsZW1lbnQgPSBhZGROZXdQb3B1cEVsITtcbiAgICAgICAgY29uc3QgYWRkTmV3Q2xvc2VFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhZGQtZXhpdCcpO1xuICAgICAgICBjb25zdCBhZGROZXdDbG9zZTogRWxlbWVudCA9IGFkZE5ld0Nsb3NlRWwhO1xuICAgICAgICBjb25zdCBhZGRUb2RvRm9ybUVsID0gPEhUTUxGb3JtRWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLXRvZG8tZm9ybScpO1xuICAgICAgICBjb25zdCBhZGRUb2RvRm9ybTogSFRNTEZvcm1FbGVtZW50ID0gYWRkVG9kb0Zvcm1FbCE7XG4gICAgICAgIGNvbnN0IGFkZFByb2plY3RGb3JtRWwgPSA8SFRNTEZvcm1FbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtcHJvamVjdC1mb3JtJyk7XG4gICAgICAgIGNvbnN0IGFkZFByb2plY3RGb3JtOiBIVE1MRm9ybUVsZW1lbnQgPSBhZGRQcm9qZWN0Rm9ybUVsITtcbiAgICAgICAgY29uc3QgYWRkVG9kb0J0bkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC10b2RvLWJ0bicpO1xuICAgICAgICBjb25zdCBhZGRUb2RvQnRuOiBFbGVtZW50ID0gYWRkVG9kb0J0bkVsITtcbiAgICAgICAgY29uc3QgYWRkUHJvamVjdEJ0bkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC1wcm9qZWN0LWJ0bicpO1xuICAgICAgICBjb25zdCBhZGRQcm9qZWN0QnRuOiBFbGVtZW50ID0gYWRkUHJvamVjdEJ0bkVsITtcbiAgICAgICAgY29uc3QgYWRkRGF0ZUVsID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25ldy1kYXRlJyk7XG4gICAgICAgIGNvbnN0IGFkZERhdGU6IEhUTUxJbnB1dEVsZW1lbnQgPSBhZGREYXRlRWwhO1xuICAgICAgICBjb25zdCBhZGRMb3dQcmlvcml0eUVsID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25ldy1sb3cnKTtcbiAgICAgICAgY29uc3QgYWRkTG93UHJpb3JpdHk6IEhUTUxJbnB1dEVsZW1lbnQgPSBhZGRMb3dQcmlvcml0eUVsITtcbiAgICAgICAgY29uc3QgYWRkTWVkaXVtUHJpb3JpdHlFbCA9IDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXctbWVkaXVtJyk7XG4gICAgICAgIGNvbnN0IGFkZE1lZGl1bVByaW9yaXR5OiBIVE1MSW5wdXRFbGVtZW50ID0gYWRkTWVkaXVtUHJpb3JpdHlFbCE7XG4gICAgICAgIGNvbnN0IGFkZEhpZ2hQcmlvcml0eUVsID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25ldy1oaWdoJyk7XG4gICAgICAgIGNvbnN0IGFkZEhpZ2hQcmlvcml0eTogSFRNTElucHV0RWxlbWVudCA9IGFkZEhpZ2hQcmlvcml0eUVsITtcbiAgICAgICAgY29uc3QgYWRkTG93TGFiZWxFbCA9IDxIVE1MTGFiZWxFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb3cnKTtcbiAgICAgICAgY29uc3QgYWRkTG93TGFiZWw6IEhUTUxMYWJlbEVsZW1lbnQgPSBhZGRMb3dMYWJlbEVsITtcbiAgICAgICAgY29uc3QgYWRkTWVkaXVtTGFiZWxFbCA9IDxIVE1MTGFiZWxFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZWRpdW0nKTtcbiAgICAgICAgY29uc3QgYWRkTWVkaXVtTGFiZWw6IEhUTUxMYWJlbEVsZW1lbnQgPSBhZGRNZWRpdW1MYWJlbEVsITtcbiAgICAgICAgY29uc3QgYWRkSGlnaExhYmVsRWwgPSA8SFRNTExhYmVsRWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGlnaCcpO1xuICAgICAgICBjb25zdCBhZGRIaWdoTGFiZWw6IEhUTUxMYWJlbEVsZW1lbnQgPSBhZGRIaWdoTGFiZWxFbCE7XG5cbiAgICAgICAgYWRkRGF0ZS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgY3VycmVudERheSk7XG4gICAgICAgIGFkZE5ld1BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoJ2ludmlzaWJsZS1hZGQtbmV3Jyk7XG5cbiAgICAgICAgYWRkTmV3Q2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBhZGROZXdQb3B1cC5jbGFzc0xpc3QuYWRkKCdpbnZpc2libGUtYWRkLW5ldycpO1xuICAgICAgICAgICAgYWRkVG9kb0Zvcm0ucmVzZXQoKTtcbiAgICAgICAgICAgIGFkZFRvZG9Gb3JtLnN0eWxlLmRpc3BsYXkgPSAnZ3JpZCc7XG4gICAgICAgICAgICBhZGRQcm9qZWN0Rm9ybS5yZXNldCgpO1xuICAgICAgICAgICAgYWRkUHJvamVjdEZvcm0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIGFkZFRvZG9CdG4uY2xhc3NMaXN0LmFkZCgnY2xpY2tlZCcpO1xuICAgICAgICAgICAgYWRkUHJvamVjdEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdjbGlja2VkJyk7XG4gICAgICAgICAgICBhZGREYXRlLnJlbW92ZUF0dHJpYnV0ZSgndmFsdWUnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBhZGRUb2RvQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgYWRkVG9kb0J0bi5jbGFzc0xpc3QuYWRkKCdjbGlja2VkJyk7XG4gICAgICAgICAgICBhZGRUb2RvRm9ybS5zdHlsZS5kaXNwbGF5ID0gJ2dyaWQnO1xuICAgICAgICAgICAgYWRkUHJvamVjdEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdjbGlja2VkJyk7XG4gICAgICAgICAgICBhZGRQcm9qZWN0Rm9ybS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGFkZFByb2plY3RCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBhZGRQcm9qZWN0QnRuLmNsYXNzTGlzdC5hZGQoJ2NsaWNrZWQnKTtcbiAgICAgICAgICAgIGFkZFByb2plY3RGb3JtLnN0eWxlLmRpc3BsYXkgPSAnZ3JpZCc7XG4gICAgICAgICAgICBhZGRUb2RvQnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2NsaWNrZWQnKTtcbiAgICAgICAgICAgIGFkZFRvZG9Gb3JtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgYWRkVG9kb0Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZSA9PiB7XG4gICAgICAgICAgICBtYW5hZ2VEYXRhLmFkZFRvZG8oZSwgdG9kb3MsIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgYWRkTmV3UG9wdXAuY2xhc3NMaXN0LmFkZCgnaW52aXNpYmxlLWFkZC1uZXcnKTtcbiAgICAgICAgICAgIGFkZFRvZG9Gb3JtLnJlc2V0KCk7XG4gICAgICAgICAgICBhZGRUb2RvRm9ybS5zdHlsZS5kaXNwbGF5ID0gJ2dyaWQnO1xuICAgICAgICAgICAgYWRkUHJvamVjdEZvcm0ucmVzZXQoKTtcbiAgICAgICAgICAgIGFkZFByb2plY3RGb3JtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICBhZGRUb2RvQnRuLmNsYXNzTGlzdC5hZGQoJ2NsaWNrZWQnKTtcbiAgICAgICAgICAgIGFkZFByb2plY3RCdG4uY2xhc3NMaXN0LnJlbW92ZSgnY2xpY2tlZCcpO1xuICAgICAgICAgICAgYWRkRGF0ZS5yZW1vdmVBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgYWRkUHJvamVjdEZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZSA9PiB7XG4gICAgICAgICAgICBtYW5hZ2VEYXRhLmFkZFByb2plY3QoZSwgdG9kb3MsIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgYWRkTmV3UG9wdXAuY2xhc3NMaXN0LmFkZCgnaW52aXNpYmxlLWFkZC1uZXcnKTtcbiAgICAgICAgICAgIGFkZFRvZG9Gb3JtLnJlc2V0KCk7XG4gICAgICAgICAgICBhZGRUb2RvRm9ybS5zdHlsZS5kaXNwbGF5ID0gJ2dyaWQnO1xuICAgICAgICAgICAgYWRkUHJvamVjdEZvcm0ucmVzZXQoKTtcbiAgICAgICAgICAgIGFkZFByb2plY3RGb3JtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICBhZGRUb2RvQnRuLmNsYXNzTGlzdC5hZGQoJ2NsaWNrZWQnKTtcbiAgICAgICAgICAgIGFkZFByb2plY3RCdG4uY2xhc3NMaXN0LnJlbW92ZSgnY2xpY2tlZCcpO1xuICAgICAgICAgICAgYWRkRGF0ZS5yZW1vdmVBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgYWRkTG93UHJpb3JpdHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoYWRkTG93TGFiZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdsb3cnKSkge1xuICAgICAgICAgICAgICAgIGFkZExvd0xhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2xvdycpO1xuICAgICAgICAgICAgICAgIGFkZExvd0xhYmVsLmNsYXNzTGlzdC5hZGQoJ2xvdy1jaGVja2VkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWRkTWVkaXVtTGFiZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdtZWRpdW0tY2hlY2tlZCcpKSB7XG4gICAgICAgICAgICAgICAgYWRkTWVkaXVtTGFiZWwuY2xhc3NMaXN0LnJlbW92ZSgnbWVkaXVtLWNoZWNrZWQnKTtcbiAgICAgICAgICAgICAgICBhZGRNZWRpdW1MYWJlbC5jbGFzc0xpc3QuYWRkKCdtZWRpdW0nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZGRIaWdoTGFiZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWdoLWNoZWNrZWQnKSkge1xuICAgICAgICAgICAgICAgIGFkZEhpZ2hMYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdoaWdoLWNoZWNrZWQnKTtcbiAgICAgICAgICAgICAgICBhZGRIaWdoTGFiZWwuY2xhc3NMaXN0LmFkZCgnaGlnaCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGFkZE1lZGl1bVByaW9yaXR5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGFkZExvd0xhYmVsLmNsYXNzTGlzdC5jb250YWlucygnbG93LWNoZWNrZWQnKSkge1xuICAgICAgICAgICAgICAgIGFkZExvd0xhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2xvdy1jaGVja2VkJyk7XG4gICAgICAgICAgICAgICAgYWRkTG93TGFiZWwuY2xhc3NMaXN0LmFkZCgnbG93Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWRkTWVkaXVtTGFiZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdtZWRpdW0nKSkge1xuICAgICAgICAgICAgICAgIGFkZE1lZGl1bUxhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ21lZGl1bScpO1xuICAgICAgICAgICAgICAgIGFkZE1lZGl1bUxhYmVsLmNsYXNzTGlzdC5hZGQoJ21lZGl1bS1jaGVja2VkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWRkSGlnaExhYmVsLmNsYXNzTGlzdC5jb250YWlucygnaGlnaC1jaGVja2VkJykpIHtcbiAgICAgICAgICAgICAgICBhZGRIaWdoTGFiZWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlnaC1jaGVja2VkJyk7XG4gICAgICAgICAgICAgICAgYWRkSGlnaExhYmVsLmNsYXNzTGlzdC5hZGQoJ2hpZ2gnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBhZGRIaWdoUHJpb3JpdHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoYWRkTG93TGFiZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdsb3ctY2hlY2tlZCcpKSB7XG4gICAgICAgICAgICAgICAgYWRkTG93TGFiZWwuY2xhc3NMaXN0LnJlbW92ZSgnbG93LWNoZWNrZWQnKTtcbiAgICAgICAgICAgICAgICBhZGRMb3dMYWJlbC5jbGFzc0xpc3QuYWRkKCdsb3cnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZGRNZWRpdW1MYWJlbC5jbGFzc0xpc3QuY29udGFpbnMoJ21lZGl1bS1jaGVja2VkJykpIHtcbiAgICAgICAgICAgICAgICBhZGRNZWRpdW1MYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdtZWRpdW0tY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIGFkZE1lZGl1bUxhYmVsLmNsYXNzTGlzdC5hZGQoJ21lZGl1bScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFkZEhpZ2hMYWJlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZ2gnKSkge1xuICAgICAgICAgICAgICAgIGFkZEhpZ2hMYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdoaWdoJyk7XG4gICAgICAgICAgICAgICAgYWRkSGlnaExhYmVsLmNsYXNzTGlzdC5hZGQoJ2hpZ2gtY2hlY2tlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVuZGVyRW1wdHlQcm9qZWN0UG9wdXAodG9kb3M6IFByb2plY3RzT2JqZWN0LCBsaXN0Q29udGFpbmVyOiBFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGVtcHR5UG9wdXBFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cC1lbXB0eS1wcm9qZWN0Jyk7XG4gICAgICAgIGNvbnN0IGVtcHR5UG9wdXA6IEVsZW1lbnQgPSBlbXB0eVBvcHVwRWwhO1xuICAgICAgICBjb25zdCBlbXB0eU5hbWVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbXB0eS1wcm9qZWN0LW5hbWUnKTtcbiAgICAgICAgY29uc3QgZW1wdHlOYW1lOiBFbGVtZW50ID0gZW1wdHlOYW1lRWwhO1xuICAgICAgICBjb25zdCBlbXB0eUFkZEJ0bkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVtcHR5LXByb2plY3QtYWRkLWJ0bicpO1xuICAgICAgICBjb25zdCBlbXB0eUFkZEJ0bjogRWxlbWVudCA9IGVtcHR5QWRkQnRuRWwhO1xuICAgICAgICBjb25zdCBlbXB0eURlbGV0ZUJ0bkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVtcHR5LXByb2plY3QtZGVsZXRlLWJ0bicpO1xuICAgICAgICBjb25zdCBlbXB0eURlbGV0ZUJ0bjogRWxlbWVudCA9IGVtcHR5RGVsZXRlQnRuRWwhO1xuXG4gICAgICAgIGVtcHR5TmFtZS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgZW1wdHlOYW1lLnRleHRDb250ZW50ID0gbWFuYWdlRGF0YS5nZXRTZWxlY3RlZFByb2plY3QoKTtcblxuICAgICAgICBlbXB0eUFkZEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHJlbmRlckFkZFRvZG9Qb3B1cCh0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgICAgICAgICBlbXB0eVBvcHVwLmNsYXNzTGlzdC5hZGQoJ2ludmlzaWJsZS1lbXB0eS1wcm9qZWN0Jyk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgZW1wdHlEZWxldGVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBtYW5hZ2VEYXRhLmRlbGV0ZVByb2plY3QodG9kb3MsIGxpc3RDb250YWluZXIpO1xuICAgICAgICAgICAgZW1wdHlQb3B1cC5jbGFzc0xpc3QuYWRkKCdpbnZpc2libGUtZW1wdHktcHJvamVjdCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICBlbXB0eVBvcHVwLmNsYXNzTGlzdC5yZW1vdmUoJ2ludmlzaWJsZS1lbXB0eS1wcm9qZWN0Jyk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbmRlckFkZFRvZG9Qb3B1cCh0b2RvczogUHJvamVjdHNPYmplY3QsIGxpc3RDb250YWluZXI6IEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgYWRkVG9kb1BvcHVwRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXAtYWRkLW5ldy10b2RvJyk7XG4gICAgICAgIGNvbnN0IGFkZFRvZG9Qb3B1cDogRWxlbWVudCA9IGFkZFRvZG9Qb3B1cEVsITtcbiAgICAgICAgY29uc3QgYWRkUHJvamVjdEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC1uZXctdG9kby1wcm9qZWN0Jyk7XG4gICAgICAgIGNvbnN0IGFkZFByb2plY3ROYW1lOiBFbGVtZW50ID0gYWRkUHJvamVjdEVsITtcbiAgICAgICAgY29uc3QgYWRkTmV3Rm9ybUVsID0gPEhUTUxGb3JtRWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLW5ldy10b2RvLWZvcm0nKTtcbiAgICAgICAgY29uc3QgYWRkTmV3Rm9ybTogSFRNTEZvcm1FbGVtZW50ID0gYWRkTmV3Rm9ybUVsITtcbiAgICAgICAgY29uc3QgYWRkRGF0ZUVsID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25ldy10b2RvLWRhdGUnKTtcbiAgICAgICAgY29uc3QgYWRkRGF0ZTogSFRNTElucHV0RWxlbWVudCA9IGFkZERhdGVFbCE7XG4gICAgICAgIGNvbnN0IGFkZFRvZG9EZWxldGVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtbmV3LWRlbGV0ZS1wcm9qZWN0Jyk7XG4gICAgICAgIGNvbnN0IGFkZFRvZG9EZWxldGU6IEVsZW1lbnQgPSBhZGRUb2RvRGVsZXRlRWwhO1xuICAgICAgICBjb25zdCBhZGROZXdMb3dQcmlvcml0eUVsID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25ldy10b2RvLWxvdycpO1xuICAgICAgICBjb25zdCBhZGROZXdMb3dQcmlvcml0eTogSFRNTElucHV0RWxlbWVudCA9IGFkZE5ld0xvd1ByaW9yaXR5RWwhO1xuICAgICAgICBjb25zdCBhZGROZXdNZWRpdW1Qcmlvcml0eUVsID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25ldy10b2RvLW1lZGl1bScpO1xuICAgICAgICBjb25zdCBhZGROZXdNZWRpdW1Qcmlvcml0eTogSFRNTElucHV0RWxlbWVudCA9IGFkZE5ld01lZGl1bVByaW9yaXR5RWwhO1xuICAgICAgICBjb25zdCBhZGROZXdIaWdoUHJpb3JpdHlFbCA9IDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZXctdG9kby1oaWdoJyk7XG4gICAgICAgIGNvbnN0IGFkZE5ld0hpZ2hQcmlvcml0eTogSFRNTElucHV0RWxlbWVudCA9IGFkZE5ld0hpZ2hQcmlvcml0eUVsITtcbiAgICAgICAgY29uc3QgYWRkTG93TGFiZWxFbCA9IDxIVE1MTGFiZWxFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb3ctbmV3Jyk7XG4gICAgICAgIGNvbnN0IGFkZExvd0xhYmVsOiBIVE1MTGFiZWxFbGVtZW50ID0gYWRkTG93TGFiZWxFbCE7XG4gICAgICAgIGNvbnN0IGFkZE1lZGl1bUxhYmVsRWwgPSA8SFRNTExhYmVsRWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVkaXVtLW5ldycpO1xuICAgICAgICBjb25zdCBhZGRNZWRpdW1MYWJlbDogSFRNTExhYmVsRWxlbWVudCA9IGFkZE1lZGl1bUxhYmVsRWwhO1xuICAgICAgICBjb25zdCBhZGRIaWdoTGFiZWxFbCA9IDxIVE1MTGFiZWxFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oaWdoLW5ldycpO1xuICAgICAgICBjb25zdCBhZGRIaWdoTGFiZWw6IEhUTUxMYWJlbEVsZW1lbnQgPSBhZGRIaWdoTGFiZWxFbCE7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBwcm9qZWN0ID0gbWFuYWdlRGF0YS5nZXRTZWxlY3RlZFByb2plY3QoKTtcblxuICAgICAgICBhZGRQcm9qZWN0TmFtZS50ZXh0Q29udGVudCA9IHByb2plY3Q7XG4gICAgICAgIGFkZERhdGUuc2V0QXR0cmlidXRlKCd2YWx1ZScsIGN1cnJlbnREYXkpO1xuICAgICAgICBhZGRUb2RvUG9wdXAuY2xhc3NMaXN0LnJlbW92ZSgnaW52aXNpYmxlLWFkZC1uZXctdG9kbycpO1xuXG4gICAgICAgIGFkZE5ld0Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZSA9PiB7XG4gICAgICAgICAgICBtYW5hZ2VEYXRhLmFkZFByb2plY3RUb2RvKGUsIHRvZG9zLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgIGFkZFRvZG9Qb3B1cC5jbGFzc0xpc3QuYWRkKCdpbnZpc2libGUtYWRkLW5ldy10b2RvJyk7XG4gICAgICAgICAgICBhZGROZXdGb3JtLnJlc2V0KCk7XG4gICAgICAgICAgICBhZGREYXRlLnJlbW92ZUF0dHJpYnV0ZSgndmFsdWUnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBhZGRUb2RvRGVsZXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgbWFuYWdlRGF0YS5kZWxldGVQcm9qZWN0KHRvZG9zLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgICAgIGFkZFRvZG9Qb3B1cC5jbGFzc0xpc3QuYWRkKCdpbnZpc2libGUtYWRkLW5ldy10b2RvJyk7XG4gICAgICAgICAgICBhZGROZXdGb3JtLnJlc2V0KCk7XG4gICAgICAgICAgICBhZGREYXRlLnJlbW92ZUF0dHJpYnV0ZSgndmFsdWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYWRkTmV3TG93UHJpb3JpdHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoYWRkTG93TGFiZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdsb3ctbmV3JykpIHtcbiAgICAgICAgICAgICAgICBhZGRMb3dMYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdsb3ctbmV3Jyk7XG4gICAgICAgICAgICAgICAgYWRkTG93TGFiZWwuY2xhc3NMaXN0LmFkZCgnbG93LWNoZWNrZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZGRNZWRpdW1MYWJlbC5jbGFzc0xpc3QuY29udGFpbnMoJ21lZGl1bS1jaGVja2VkJykpIHtcbiAgICAgICAgICAgICAgICBhZGRNZWRpdW1MYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdtZWRpdW0tY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIGFkZE1lZGl1bUxhYmVsLmNsYXNzTGlzdC5hZGQoJ21lZGl1bS1uZXcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZGRIaWdoTGFiZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWdoLWNoZWNrZWQnKSkge1xuICAgICAgICAgICAgICAgIGFkZEhpZ2hMYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdoaWdoLWNoZWNrZWQnKTtcbiAgICAgICAgICAgICAgICBhZGRIaWdoTGFiZWwuY2xhc3NMaXN0LmFkZCgnaGlnaC1uZXcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBhZGROZXdNZWRpdW1Qcmlvcml0eS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChhZGRMb3dMYWJlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2xvdy1jaGVja2VkJykpIHtcbiAgICAgICAgICAgICAgICBhZGRMb3dMYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdsb3ctY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIGFkZExvd0xhYmVsLmNsYXNzTGlzdC5hZGQoJ2xvdy1uZXcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZGRNZWRpdW1MYWJlbC5jbGFzc0xpc3QuY29udGFpbnMoJ21lZGl1bS1uZXcnKSkge1xuICAgICAgICAgICAgICAgIGFkZE1lZGl1bUxhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ21lZGl1bS1uZXcnKTtcbiAgICAgICAgICAgICAgICBhZGRNZWRpdW1MYWJlbC5jbGFzc0xpc3QuYWRkKCdtZWRpdW0tY2hlY2tlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFkZEhpZ2hMYWJlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZ2gtY2hlY2tlZCcpKSB7XG4gICAgICAgICAgICAgICAgYWRkSGlnaExhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2gtY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIGFkZEhpZ2hMYWJlbC5jbGFzc0xpc3QuYWRkKCdoaWdoLW5ldycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGFkZE5ld0hpZ2hQcmlvcml0eS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChhZGRMb3dMYWJlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2xvdy1jaGVja2VkJykpIHtcbiAgICAgICAgICAgICAgICBhZGRMb3dMYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdsb3ctY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIGFkZExvd0xhYmVsLmNsYXNzTGlzdC5hZGQoJ2xvdy1uZXcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZGRNZWRpdW1MYWJlbC5jbGFzc0xpc3QuY29udGFpbnMoJ21lZGl1bS1jaGVja2VkJykpIHtcbiAgICAgICAgICAgICAgICBhZGRNZWRpdW1MYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdtZWRpdW0tY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIGFkZE1lZGl1bUxhYmVsLmNsYXNzTGlzdC5hZGQoJ21lZGl1bS1uZXcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZGRIaWdoTGFiZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWdoLW5ldycpKSB7XG4gICAgICAgICAgICAgICAgYWRkSGlnaExhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2gtbmV3Jyk7XG4gICAgICAgICAgICAgICAgYWRkSGlnaExhYmVsLmNsYXNzTGlzdC5hZGQoJ2hpZ2gtY2hlY2tlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVuZGVyTm90ZXNQb3B1cChlOiBFdmVudCwgdG9kb3M6IFByb2plY3RzT2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IG5vdGVzRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXAtbm90ZXMnKTtcbiAgICAgICAgY29uc3Qgbm90ZXNDYXJkOiBFbGVtZW50ID0gbm90ZXNFbCE7XG4gICAgICAgIGNvbnN0IG5vdGVzQ2xvc2VFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ub3Rlcy1jbG9zZScpO1xuICAgICAgICBjb25zdCBub3Rlc0Nsb3NlOiBFbGVtZW50ID0gbm90ZXNDbG9zZUVsITtcbiAgICAgICAgY29uc3Qgbm90ZXNUaXRsZUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5vdGVzLXRpdGxlJyk7XG4gICAgICAgIGNvbnN0IG5vdGVzVGl0bGU6IEVsZW1lbnQgPSBub3Rlc1RpdGxlRWwhOyBcbiAgICAgICAgY29uc3Qgbm90ZXNQcm9qZWN0RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubm90ZXMtcHJvamVjdCcpO1xuICAgICAgICBjb25zdCBub3Rlc1Byb2plY3Q6IEVsZW1lbnQgPSBub3Rlc1Byb2plY3RFbCE7IFxuICAgICAgICBjb25zdCBub3Rlc0R1ZURhdGVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ub3Rlcy1kYXRlJyk7XG4gICAgICAgIGNvbnN0IG5vdGVzRHVlRGF0ZTogRWxlbWVudCA9IG5vdGVzRHVlRGF0ZUVsITtcbiAgICAgICAgY29uc3Qgbm90ZXNQcmlvcml0eUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5vdGVzLXByaW9yaXR5Jyk7XG4gICAgICAgIGNvbnN0IG5vdGVzUHJpb3JpdHk6IEVsZW1lbnQgPSBub3Rlc1ByaW9yaXR5RWwhO1xuICAgICAgICBjb25zdCBub3Rlc0RldGFpbHNFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ub3Rlcy1kZXRhaWxzJyk7XG4gICAgICAgIGNvbnN0IG5vdGVzRGV0YWlsczogRWxlbWVudCA9IG5vdGVzRGV0YWlsc0VsITsgXG5cbiAgICAgICAgbm90ZXNUaXRsZS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgbm90ZXNQcm9qZWN0LmlubmVySFRNTCA9ICcnO1xuICAgICAgICBub3Rlc0R1ZURhdGUuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIG5vdGVzUHJpb3JpdHkuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIG5vdGVzRGV0YWlscy5pbm5lckhUTUwgPSAnJztcblxuICAgICAgICBsZXQgaXRlbTogbnVtYmVyO1xuICAgICAgICBsZXQgcHJvamVjdDogc3RyaW5nOyAgXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuXG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgaXRlbVBhcmVudCA9IHRhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgaWYgKGl0ZW1QYXJlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1HcmFuZHBhcmVudCA9IGl0ZW1QYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbUdyYW5kcGFyZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbSA9IE51bWJlcihpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHByb2plY3QgPSBpdGVtR3JhbmRwYXJlbnQuZGF0YXNldC5wcm9qZWN0ITtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXkgPSBmb3JtYXQobmV3IERhdGUodG9kb3NbcHJvamVjdF1baXRlbV0uZHVlRGF0ZSksICdkbycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtb250aCA9IGZvcm1hdChuZXcgRGF0ZSh0b2Rvc1twcm9qZWN0XVtpdGVtXS5kdWVEYXRlKSwgJ01NTScpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB5ZWFyID0gZm9ybWF0KG5ldyBEYXRlKHRvZG9zW3Byb2plY3RdW2l0ZW1dLmR1ZURhdGUpLCAneXl5eScpO1xuXG4gICAgICAgICAgICAgICAgICAgIG5vdGVzVGl0bGUudGV4dENvbnRlbnQgPSB0b2Rvc1twcm9qZWN0XVtpdGVtXS50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgbm90ZXNEdWVEYXRlLnRleHRDb250ZW50ID0gYCR7bW9udGh9ICR7ZGF5fSwgJHt5ZWFyfWA7XG4gICAgICAgICAgICAgICAgICAgIG5vdGVzUHJpb3JpdHkudGV4dENvbnRlbnQgPSB0b2Rvc1twcm9qZWN0XVtpdGVtXS5wcmlvcml0eVswXS50b1VwcGVyQ2FzZSgpICsgdG9kb3NbcHJvamVjdF1baXRlbV0ucHJpb3JpdHkuc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgICAgIG5vdGVzRGV0YWlscy50ZXh0Q29udGVudCA9IHRvZG9zW3Byb2plY3RdW2l0ZW1dLmRldGFpbHM7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2plY3QgPT09ICdhbGwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3Rlc1Byb2plY3QudGV4dENvbnRlbnQgPSAnQWxsJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9qZWN0ID09PSAndG9kYXknKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3Rlc1Byb2plY3QudGV4dENvbnRlbnQgPSAnVG9kYXknO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByb2plY3QgPT09ICd3ZWVrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm90ZXNQcm9qZWN0LnRleHRDb250ZW50ID0gJ1RoaXMgV2Vlayc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3Rlc1Byb2plY3QudGV4dENvbnRlbnQgPSB0b2Rvc1twcm9qZWN0XVtpdGVtXS5wcm9qZWN0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBub3Rlc0NhcmQuY2xhc3NMaXN0LnJlbW92ZSgnaW52aXNpYmxlLW5vdGVzJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgbm90ZXNDbG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IG5vdGVzQ2FyZC5jbGFzc0xpc3QuYWRkKCdpbnZpc2libGUtbm90ZXMnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbmRlckVkaXRQb3B1cChpbmRleDogbnVtYmVyLCBwcm9qZWN0TmFtZTogc3RyaW5nLCB0b2RvczogUHJvamVjdHNPYmplY3QsIGxpc3RDb250YWluZXI6IEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgZWRpdEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwLWVkaXQnKTtcbiAgICAgICAgY29uc3QgZWRpdENhcmQ6IEVsZW1lbnQgPSBlZGl0RWwhO1xuICAgICAgICBjb25zdCBlZGl0Q2xvc2VFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lZGl0LWNsb3NlJyk7XG4gICAgICAgIGNvbnN0IGVkaXRDbG9zZTogRWxlbWVudCA9IGVkaXRDbG9zZUVsITtcbiAgICAgICAgY29uc3QgZWRpdFRpdGxlRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZWRpdC10aXRsZS10ZXh0YXJlYScpO1xuICAgICAgICBjb25zdCBlZGl0VGl0bGU6IEVsZW1lbnQgPSBlZGl0VGl0bGVFbCE7XG4gICAgICAgIGNvbnN0IGVkaXREZXRhaWxzRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZWRpdC1kZXRhaWxzLXRleHRhcmVhJyk7XG4gICAgICAgIGNvbnN0IGVkaXREZXRhaWxzOiBFbGVtZW50ID0gZWRpdERldGFpbHNFbCE7XG4gICAgICAgIGNvbnN0IGVkaXREdWVEYXRlRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWRpdC1kYXRlJyk7XG4gICAgICAgIGNvbnN0IGVkaXREdWVEYXRlOiBFbGVtZW50ID0gZWRpdER1ZURhdGVFbCE7XG4gICAgICAgIGNvbnN0IGVkaXRMb3dFbCA9IDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZGl0LWxvdycpO1xuICAgICAgICBjb25zdCBlZGl0TG93UHJpb3JpdHk6IEhUTUxJbnB1dEVsZW1lbnQgPSBlZGl0TG93RWwhO1xuICAgICAgICBjb25zdCBlZGl0TWVkaXVtRWwgPSA8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWRpdC1tZWRpdW0nKTtcbiAgICAgICAgY29uc3QgZWRpdE1lZGl1bVByaW9yaXR5OiBIVE1MSW5wdXRFbGVtZW50ID0gZWRpdE1lZGl1bUVsITtcbiAgICAgICAgY29uc3QgZWRpdEhpZ2hFbCA9IDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZGl0LWhpZ2gnKTtcbiAgICAgICAgY29uc3QgZWRpdEhpZ2hQcmlvcml0eTogSFRNTElucHV0RWxlbWVudCA9IGVkaXRIaWdoRWwhO1xuICAgICAgICBjb25zdCBlZGl0TG93TGFiZWxFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZGl0LWxvdy1sYWJlbCcpO1xuICAgICAgICBjb25zdCBlZGl0TG93TGFiZWw6IEVsZW1lbnQgPSBlZGl0TG93TGFiZWxFbCE7XG4gICAgICAgIGNvbnN0IGVkaXRNZWRpdW1MYWJlbEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VkaXQtbWVkaXVtLWxhYmVsJyk7XG4gICAgICAgIGNvbnN0IGVkaXRNZWRpdW1MYWJlbDogRWxlbWVudCA9IGVkaXRNZWRpdW1MYWJlbEVsITtcbiAgICAgICAgY29uc3QgZWRpdEhpZ2hMYWJlbEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VkaXQtaGlnaC1sYWJlbCcpO1xuICAgICAgICBjb25zdCBlZGl0SGlnaExhYmVsOiBFbGVtZW50ID0gZWRpdEhpZ2hMYWJlbEVsITtcbiAgICAgICAgY29uc3QgZWRpdFN1Ym1pdEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVkaXQtZm9ybScpO1xuICAgICAgICBjb25zdCBlZGl0U3VibWl0OiBFbGVtZW50ID0gZWRpdFN1Ym1pdEVsITtcblxuICAgICAgICBlZGl0VGl0bGUuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIGVkaXREZXRhaWxzLmlubmVySFRNTCA9ICcnO1xuXG4gICAgICAgIGNvbnN0IGRhdGVPYmplY3QgPSBuZXcgRGF0ZSh0b2Rvc1twcm9qZWN0TmFtZV1baW5kZXhdLmR1ZURhdGUpO1xuICAgICAgICBjb25zdCBtb250aCA9IGZvcm1hdChkYXRlT2JqZWN0LCAnTU0nKTtcbiAgICAgICAgY29uc3QgZGF5ID0gZm9ybWF0KGRhdGVPYmplY3QsICdkZCcpO1xuICAgICAgICBjb25zdCB5ZWFyID0gZm9ybWF0KGRhdGVPYmplY3QsICd5eXl5Jyk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnREYXkgPSBgJHt5ZWFyfS0ke21vbnRofS0ke2RheX1gO1xuXG4gICAgICAgIGVkaXRUaXRsZS50ZXh0Q29udGVudCA9IHRvZG9zW3Byb2plY3ROYW1lXVtpbmRleF0udGl0bGU7XG4gICAgICAgIGVkaXREZXRhaWxzLnRleHRDb250ZW50ID0gdG9kb3NbcHJvamVjdE5hbWVdW2luZGV4XS5kZXRhaWxzO1xuICAgICAgICBlZGl0RHVlRGF0ZS5yZW1vdmVBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIGVkaXREdWVEYXRlLnNldEF0dHJpYnV0ZSgndmFsdWUnLCBjdXJyZW50RGF5KTtcblxuICAgICAgICBpZiAoZWRpdExvd0xhYmVsLmNsYXNzTGlzdC5jb250YWlucygnbG93LWNoZWNrZWQnKSkge1xuICAgICAgICAgICAgZWRpdExvd0xhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2xvdy1jaGVja2VkJyk7XG4gICAgICAgICAgICBlZGl0TG93TGFiZWwuY2xhc3NMaXN0LmFkZCgnbG93Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVkaXRNZWRpdW1MYWJlbC5jbGFzc0xpc3QuY29udGFpbnMoJ21lZGl1bS1jaGVja2VkJykpIHtcbiAgICAgICAgICAgIGVkaXRNZWRpdW1MYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdtZWRpdW0tY2hlY2tlZCcpO1xuICAgICAgICAgICAgZWRpdE1lZGl1bUxhYmVsLmNsYXNzTGlzdC5hZGQoJ21lZGl1bScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlZGl0SGlnaExhYmVsLmNsYXNzTGlzdC5jb250YWlucygnaGlnaC1jaGVja2VkJykpIHtcbiAgICAgICAgICAgIGVkaXRIaWdoTGFiZWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlnaC1jaGVja2VkJyk7XG4gICAgICAgICAgICBlZGl0SGlnaExhYmVsLmNsYXNzTGlzdC5hZGQoJ2hpZ2gnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b2Rvc1twcm9qZWN0TmFtZV1baW5kZXhdLnByaW9yaXR5ID09PSAnbG93Jykge1xuICAgICAgICAgICAgZWRpdExvd1ByaW9yaXR5LmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgZWRpdExvd0xhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2xvdycpO1xuICAgICAgICAgICAgZWRpdExvd0xhYmVsLmNsYXNzTGlzdC5hZGQoJ2xvdy1jaGVja2VkJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodG9kb3NbcHJvamVjdE5hbWVdW2luZGV4XS5wcmlvcml0eSA9PT0gJ21lZGl1bScpIHtcbiAgICAgICAgICAgIGVkaXRNZWRpdW1Qcmlvcml0eS5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGVkaXRNZWRpdW1MYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdtZWRpdW0nKTtcbiAgICAgICAgICAgIGVkaXRNZWRpdW1MYWJlbC5jbGFzc0xpc3QuYWRkKCdtZWRpdW0tY2hlY2tlZCcpO1xuICAgICAgICB9IGVsc2UgaWYgKHRvZG9zW3Byb2plY3ROYW1lXVtpbmRleF0ucHJpb3JpdHkgPT09ICdoaWdoJykge1xuICAgICAgICAgICAgZWRpdEhpZ2hQcmlvcml0eS5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGVkaXRIaWdoTGFiZWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlnaCcpO1xuICAgICAgICAgICAgZWRpdEhpZ2hMYWJlbC5jbGFzc0xpc3QuYWRkKCdoaWdoLWNoZWNrZWQnKTtcbiAgICAgICAgfSBcblxuICAgICAgICBlZGl0Q2FyZC5jbGFzc0xpc3QucmVtb3ZlKCdpbnZpc2libGUtZWRpdCcpO1xuXG4gICAgICAgIGVkaXRDbG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGVkaXRDYXJkLmNsYXNzTGlzdC5hZGQoJ2ludmlzaWJsZS1lZGl0JykpO1xuXG4gICAgICAgIGVkaXRTdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZSA9PiB7XG4gICAgICAgICAgICBlZGl0Q2FyZC5jbGFzc0xpc3QuYWRkKCdpbnZpc2libGUtZWRpdCcpO1xuICAgICAgICAgICAgbWFuYWdlRGF0YS5lZGl0VG9kbyhpbmRleCwgcHJvamVjdE5hbWUsIGUsIHRvZG9zLCBsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZWRpdExvd1ByaW9yaXR5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVkaXRMb3dMYWJlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2xvdycpKSB7XG4gICAgICAgICAgICAgICAgZWRpdExvd0xhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2xvdycpO1xuICAgICAgICAgICAgICAgIGVkaXRMb3dMYWJlbC5jbGFzc0xpc3QuYWRkKCdsb3ctY2hlY2tlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVkaXRNZWRpdW1MYWJlbC5jbGFzc0xpc3QuY29udGFpbnMoJ21lZGl1bS1jaGVja2VkJykpIHtcbiAgICAgICAgICAgICAgICBlZGl0TWVkaXVtTGFiZWwuY2xhc3NMaXN0LnJlbW92ZSgnbWVkaXVtLWNoZWNrZWQnKTtcbiAgICAgICAgICAgICAgICBlZGl0TWVkaXVtTGFiZWwuY2xhc3NMaXN0LmFkZCgnbWVkaXVtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWRpdEhpZ2hMYWJlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZ2gtY2hlY2tlZCcpKSB7XG4gICAgICAgICAgICAgICAgZWRpdEhpZ2hMYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdoaWdoLWNoZWNrZWQnKTtcbiAgICAgICAgICAgICAgICBlZGl0SGlnaExhYmVsLmNsYXNzTGlzdC5hZGQoJ2hpZ2gnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBlZGl0TWVkaXVtUHJpb3JpdHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZWRpdExvd0xhYmVsLmNsYXNzTGlzdC5jb250YWlucygnbG93LWNoZWNrZWQnKSkge1xuICAgICAgICAgICAgICAgIGVkaXRMb3dMYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdsb3ctY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIGVkaXRMb3dMYWJlbC5jbGFzc0xpc3QuYWRkKCdsb3cnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlZGl0TWVkaXVtTGFiZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdtZWRpdW0nKSkge1xuICAgICAgICAgICAgICAgIGVkaXRNZWRpdW1MYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdtZWRpdW0nKTtcbiAgICAgICAgICAgICAgICBlZGl0TWVkaXVtTGFiZWwuY2xhc3NMaXN0LmFkZCgnbWVkaXVtLWNoZWNrZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlZGl0SGlnaExhYmVsLmNsYXNzTGlzdC5jb250YWlucygnaGlnaC1jaGVja2VkJykpIHtcbiAgICAgICAgICAgICAgICBlZGl0SGlnaExhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2gtY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIGVkaXRIaWdoTGFiZWwuY2xhc3NMaXN0LmFkZCgnaGlnaCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGVkaXRIaWdoUHJpb3JpdHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZWRpdExvd0xhYmVsLmNsYXNzTGlzdC5jb250YWlucygnbG93LWNoZWNrZWQnKSkge1xuICAgICAgICAgICAgICAgIGVkaXRMb3dMYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdsb3ctY2hlY2tlZCcpO1xuICAgICAgICAgICAgICAgIGVkaXRMb3dMYWJlbC5jbGFzc0xpc3QuYWRkKCdsb3cnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlZGl0TWVkaXVtTGFiZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdtZWRpdW0tY2hlY2tlZCcpKSB7XG4gICAgICAgICAgICAgICAgZWRpdE1lZGl1bUxhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ21lZGl1bS1jaGVja2VkJyk7XG4gICAgICAgICAgICAgICAgZWRpdE1lZGl1bUxhYmVsLmNsYXNzTGlzdC5hZGQoJ21lZGl1bScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVkaXRIaWdoTGFiZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaWdoJykpIHtcbiAgICAgICAgICAgICAgICBlZGl0SGlnaExhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2gnKTtcbiAgICAgICAgICAgICAgICBlZGl0SGlnaExhYmVsLmNsYXNzTGlzdC5hZGQoJ2hpZ2gtY2hlY2tlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVuZGVyRGVsZXRlUG9wdXAoaW5kZXg6IG51bWJlciwgcHJvamVjdE5hbWU6IHN0cmluZywgdG9kb3M6IFByb2plY3RzT2JqZWN0LCBsaXN0Q29udGFpbmVyOiBFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGRlbGV0ZVBvcHVwRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXAtZGVsZXRlLXRvZG8nKTtcbiAgICAgICAgY29uc3QgZGVsZXRlUG9wdXA6IEVsZW1lbnQgPSBkZWxldGVQb3B1cEVsITtcbiAgICAgICAgY29uc3QgZGVsZXRlQ29uZmlybUVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRlbGV0ZS10b2RvLWNvbmZpcm0tYnRuJyk7XG4gICAgICAgIGNvbnN0IGRlbGV0ZUNvbmZpcm06IEVsZW1lbnQgPSBkZWxldGVDb25maXJtRWwhO1xuICAgICAgICBjb25zdCBkZWxldGVDYW5jZWxFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kZWxldGUtdG9kby1jYW5jZWwtYnRuJyk7XG4gICAgICAgIGNvbnN0IGRlbGV0ZUNhbmNlbDogRWxlbWVudCA9IGRlbGV0ZUNhbmNlbEVsITtcblxuICAgICAgICBkZWxldGVQb3B1cC5jbGFzc0xpc3QucmVtb3ZlKCdpbnZpc2libGUtZGVsZXRlLXRvZG8nKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIGRlbGV0ZUNvbmZpcm0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBtYW5hZ2VEYXRhLmRlbGV0ZVRvZG8oaW5kZXgsIHByb2plY3ROYW1lLCB0b2RvcywgbGlzdENvbnRhaW5lcik7XG4gICAgICAgICAgICBkZWxldGVQb3B1cC5jbGFzc0xpc3QuYWRkKCdpbnZpc2libGUtZGVsZXRlLXRvZG8nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVsZXRlQ2FuY2VsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gZGVsZXRlUG9wdXAuY2xhc3NMaXN0LmFkZCgnaW52aXNpYmxlLWRlbGV0ZS10b2RvJykpO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICByZW5kZXJGaWx0ZXJMaXN0LFxuICAgICAgICByZW5kZXJQcm9qZWN0TGlzdCxcbiAgICAgICAgcmVuZGVySGlnaGxpZ2h0ZWRDYXRlZ29yeSxcbiAgICAgICAgcmVuZGVyQWxsVG9kb3MsXG4gICAgICAgIHJlbmRlclRvZGF5VG9kb3MsXG4gICAgICAgIHJlbmRlcldlZWtUb2RvcyxcbiAgICAgICAgcmVuZGVyUHJvamVjdFRvZG9zLFxuICAgICAgICByZW5kZXJDaGVja2VkVG9kbyxcbiAgICAgICAgcmVuZGVyQWRkTmV3UG9wdXAsXG4gICAgICAgIHJlbmRlckVtcHR5UHJvamVjdFBvcHVwLFxuICAgICAgICByZW5kZXJBZGRUb2RvUG9wdXAsXG4gICAgICAgIHJlbmRlck5vdGVzUG9wdXAsXG4gICAgICAgIHJlbmRlckVkaXRQb3B1cCxcbiAgICAgICAgcmVuZGVyRGVsZXRlUG9wdXBcbiAgICB9O1xufSkoKTsiLCJpbXBvcnQgbWFuYWdlRGF0YSBmcm9tICcuL21hbmFnZURhdGEnO1xuaW1wb3J0IHsgUHJvamVjdHNPYmplY3QgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IHRvZGF5LCB3ZWVrQWdvLCB3ZWVrTmV4dCwgbW9udGhOZXh0IH0gZnJvbSAnLi4vdXRpbC9kYXRlcyc7XG5cbi8qKlxuICogXG4gKiBAcmV0dXJucyBhIGxpc3Qgb2YgdG9kb3MgdGhhdCBhcmUgZWl0aGVyIGFscmVhZHkgbG9jYWxseSBzdG9yZWQsIG9yIGEgZGVmYXVsdCBsaXN0XG4gKiBcbiAqL1xuZnVuY3Rpb24gZ2V0VG9kb3MoKSB7XG4gICAgbGV0IHRvZG9MaXN0OiBQcm9qZWN0c09iamVjdDtcblxuICAgIGNvbnN0IHN0b3JlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2RvcycpO1xuXG4gICAgaWYgKHN0b3JlZCAhPT0gbnVsbCkge1xuICAgICAgICB0b2RvTGlzdCA9IEpTT04ucGFyc2Uoc3RvcmVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0b2RvTGlzdCA9IHtcbiAgICAgICAgICAgICdhbGwnOiBbXSxcbiAgICAgICAgICAgICd0b2RheSc6IFtdLFxuICAgICAgICAgICAgJ3dlZWsnOiBbXSxcbiAgICAgICAgICAgICdLaXRjaGVuIHJlbm92YXRpb24nOiBbXVxuICAgICAgICB9O1xuICAgICAgICB0b2RvTGlzdFsnS2l0Y2hlbiByZW5vdmF0aW9uJ10/LnB1c2gobWFuYWdlRGF0YS5jcmVhdGVUb2RvKCdSZW1vdmUgdmlueWwgZmxvb3InLCAncmVwbGFjZSB3aXRoIHN1YmZsb29yJywgd2Vla05leHQsICdoaWdoJywgJ0tpdGNoZW4gcmVub3ZhdGlvbicpKTtcbiAgICAgICAgdG9kb0xpc3RbJ0tpdGNoZW4gcmVub3ZhdGlvbiddPy5wdXNoKG1hbmFnZURhdGEuY3JlYXRlVG9kbygnQnVpbGQgY2FiaW5ldHMnLCAncHJlLXBhaW50ZWQgY2FiaW5ldHMgb25seScsIHdlZWtBZ28sICdsb3cnLCAnS2l0Y2hlbiByZW5vdmF0aW9uJywgdHJ1ZSkpO1xuICAgICAgICB0b2RvTGlzdFsnS2l0Y2hlbiByZW5vdmF0aW9uJ10/LnB1c2gobWFuYWdlRGF0YS5jcmVhdGVUb2RvKCdJbnN0YWxsIGNvdW50ZXJ0b3AnLCAnbGVhdmUgcm9vbSBmb3IgYnV0Y2hlciBibG9jaycsIG1vbnRoTmV4dCwgJ21lZGl1bScsICdLaXRjaGVuIHJlbm92YXRpb24nKSk7XG4gICAgICAgIHRvZG9MaXN0WydhbGwnXT8ucHVzaChtYW5hZ2VEYXRhLmNyZWF0ZVRvZG8oJ0ZpbmlzaCBib29rIGZvciBib29rIGNsdWInLCAnbGV0IEFuZ2VsYSBib3Jyb3cgYWZ0ZXJ3YXJkJywgdG9kYXksICdoaWdoJywgJ2FsbCcpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRvZG9MaXN0O1xufVxuXG5leHBvcnQgY29uc3QgdG9kb3MgPSBnZXRUb2RvcygpOyIsImltcG9ydCBkaXNwbGF5RGF0YSBmcm9tICcuL21vZHVsZXMvZGlzcGxheURhdGEnO1xuaW1wb3J0IG1hbmFnZURhdGEgZnJvbSAnLi9tb2R1bGVzL21hbmFnZURhdGEnO1xuaW1wb3J0IHsgdG9kb3MgfSBmcm9tICcuL21vZHVsZXMvdG9kb0xpc3QnO1xuaW1wb3J0IHsgUHJvamVjdHNPYmplY3QgfSBmcm9tICcuL3V0aWwvdHlwZXMnO1xuaW1wb3J0ICcuL2luZGV4LmNzcyc7XG5cbmNvbnN0IGxpc3RDb250YWluZXJFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluLWxpc3QnKTtcbmNvbnN0IGxpc3RDb250YWluZXI6IEVsZW1lbnQgPSBsaXN0Q29udGFpbmVyRWwhXG5jb25zdCBkYXNoYm9hcmRFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluLWRhc2hib2FyZCcpO1xuY29uc3QgZGFzaGJvYXJkOiBFbGVtZW50ID0gZGFzaGJvYXJkRWwhO1xuY29uc3QgaGFtYnVyZ2VyRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmEtYmFycycpO1xuY29uc3QgaGFtYnVyZ2VyTWVudTogRWxlbWVudCA9IGhhbWJ1cmdlckVsITtcbmNvbnN0IGZpbHRlckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZpbHRlcnMtYnRuJyk7XG5jb25zdCBmaWx0ZXJCdG5zOiBOb2RlTGlzdE9mPEVsZW1lbnQ+ID0gZmlsdGVyRWwhO1xuY29uc3QgYWRkTmV3RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdHMtYnRuJyk7XG5jb25zdCBhZGROZXdCdG46IEVsZW1lbnQgPSBhZGROZXdFbCE7XG5cbmZ1bmN0aW9uIGluaXRpYWxMb2FkKHRvZG9zOiBQcm9qZWN0c09iamVjdCkge1xuICAgIGRpc3BsYXlEYXRhLnJlbmRlckZpbHRlckxpc3QodG9kb3MpO1xuICAgIGRpc3BsYXlEYXRhLnJlbmRlclByb2plY3RMaXN0KHRvZG9zLCBsaXN0Q29udGFpbmVyKTtcbiAgICBkaXNwbGF5RGF0YS5yZW5kZXJIaWdobGlnaHRlZENhdGVnb3J5KCk7XG4gICAgZGlzcGxheURhdGEucmVuZGVyQWxsVG9kb3ModG9kb3MsIGxpc3RDb250YWluZXIpO1xufTtcblxuaW5pdGlhbExvYWQodG9kb3MpO1xuXG4vLyBEYXNoYm9hcmQgdG9nZ2xlXG5oYW1idXJnZXJNZW51LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICg8SFRNTEVsZW1lbnQ+ZGFzaGJvYXJkKS5zdHlsZS52aXNpYmlsaXR5ID0gKDxIVE1MRWxlbWVudD5kYXNoYm9hcmQpLnN0eWxlLnZpc2liaWxpdHkgPT09ICdoaWRkZW4nID8gJ3Zpc2libGUnIDogJ2hpZGRlbic7XG59KTtcblxuLy8gRmlsdGVyIGJ1dHRvbnNcbmZpbHRlckJ0bnMuZm9yRWFjaChidG4gPT4ge1xuICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICBsZXQgcHJvamVjdE5hbWU6IHN0cmluZztcbiAgICAgICAgcHJvamVjdE5hbWUgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkudGV4dENvbnRlbnQhO1xuXG4gICAgICAgIGlmIChwcm9qZWN0TmFtZSA9PT0gJ0FsbCcpIHtcbiAgICAgICAgICAgIHByb2plY3ROYW1lID0gJ2FsbCc7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvamVjdE5hbWUgPT09ICdUb2RheScpIHtcbiAgICAgICAgICAgIHByb2plY3ROYW1lID0gJ3RvZGF5JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2plY3ROYW1lID0gJ3dlZWsnO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFuYWdlRGF0YS5zZXRTZWxlY3RlZFByb2plY3QodG9kb3MsIHByb2plY3ROYW1lLCBsaXN0Q29udGFpbmVyKTtcbiAgICB9KTtcbn0pO1xuXG4vLyBBZGQtTmV3IEJ1dHRvbiAgICBcbmFkZE5ld0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBkaXNwbGF5RGF0YS5yZW5kZXJBZGROZXdQb3B1cCh0b2RvcywgbGlzdENvbnRhaW5lcik7XG59KTsiXSwibmFtZXMiOlsic2VsZWN0ZWRQcm9qZWN0Iiwic2V0U2VsZWN0ZWRQcm9qZWN0IiwidG9kb3MiLCJjdXJyZW50UHJvamVjdCIsImxpc3RDb250YWluZXIiLCJ1cGRhdGVUb2RvcyIsImdldFNlbGVjdGVkUHJvamVjdCIsImNyZWF0ZVRvZG8iLCJ0aXRsZSIsImRldGFpbHMiLCJkdWVEYXRlIiwicHJpb3JpdHkiLCJwcm9qZWN0IiwiY2hlY2tlZCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwibWFuYWdlUmVyZW5kZXIiLCJjb25zb2xlIiwibG9nIiwiZGlzcGxheURhdGEiLCJyZW5kZXJGaWx0ZXJMaXN0IiwicmVuZGVyUHJvamVjdExpc3QiLCJyZW5kZXJIaWdobGlnaHRlZENhdGVnb3J5IiwicmVuZGVyQWxsVG9kb3MiLCJyZW5kZXJUb2RheVRvZG9zIiwicmVuZGVyV2Vla1RvZG9zIiwicHJvamVjdExlbmd0aCIsImxlbmd0aCIsImZvckVhY2giLCJ0b2RvIiwicmVuZGVyRW1wdHlQcm9qZWN0UG9wdXAiLCJyZW5kZXJQcm9qZWN0VG9kb3MiLCJhZGRQcm9qZWN0IiwiZSIsInByZXZlbnREZWZhdWx0IiwibmV3UHJvamVjdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInZhbHVlIiwidG9Mb3dlckNhc2UiLCJkZWxldGVQcm9qZWN0IiwiYWRkUHJvamVjdFRvZG8iLCJ0b2RvVGl0bGUiLCJ0b2RvRGV0YWlscyIsInRvZG9EYXRlIiwidG9kb1ByaW9yaXR5IiwidG9kb1Byb2plY3QiLCJuZXdUb2RvIiwic2xpY2UiLCJwdXNoIiwiYWRkVG9kbyIsImNoZWNrT2ZmVG9kbyIsImluZGV4IiwicHJvamVjdE5hbWUiLCJlZGl0VG9kbyIsInRvZG9EdWVEYXRlIiwiZGVsZXRlVG9kbyIsInNwbGljZSIsInJlcXVpcmVkQXJncyIsInJlcXVpcmVkIiwiYXJncyIsIlR5cGVFcnJvciIsIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiaXNEYXRlIiwiYXJndW1lbnRzIiwiRGF0ZSIsIk9iamVjdCIsInRvU3RyaW5nIiwiY2FsbCIsInRvRGF0ZSIsImFyZ3VtZW50IiwiYXJnU3RyIiwiZ2V0VGltZSIsIndhcm4iLCJFcnJvciIsInN0YWNrIiwiTmFOIiwiaXNWYWxpZCIsImRpcnR5RGF0ZSIsImRhdGUiLCJpc05hTiIsIk51bWJlciIsInRvSW50ZWdlciIsImRpcnR5TnVtYmVyIiwibnVtYmVyIiwiTWF0aCIsImNlaWwiLCJmbG9vciIsImFkZE1pbGxpc2Vjb25kcyIsImRpcnR5QW1vdW50IiwidGltZXN0YW1wIiwiYW1vdW50Iiwic3ViTWlsbGlzZWNvbmRzIiwiTUlMTElTRUNPTkRTX0lOX0RBWSIsInN0YXJ0T2ZVVENJU09XZWVrIiwid2Vla1N0YXJ0c09uIiwiZGF5IiwiZ2V0VVRDRGF5IiwiZGlmZiIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwic2V0VVRDSG91cnMiLCJnZXRVVENJU09XZWVrWWVhciIsInllYXIiLCJnZXRVVENGdWxsWWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzZXRVVENGdWxsWWVhciIsInN0YXJ0T2ZOZXh0WWVhciIsImZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIiLCJzdGFydE9mVGhpc1llYXIiLCJzdGFydE9mVVRDSVNPV2Vla1llYXIiLCJmb3VydGhPZkphbnVhcnkiLCJNSUxMSVNFQ09ORFNfSU5fV0VFSyIsImRlZmF1bHRPcHRpb25zIiwiZ2V0RGVmYXVsdE9wdGlvbnMiLCJzdGFydE9mVVRDV2VlayIsIm9wdGlvbnMiLCJfcmVmIiwiX3JlZjIiLCJfcmVmMyIsIl9vcHRpb25zJHdlZWtTdGFydHNPbiIsIl9vcHRpb25zJGxvY2FsZSIsIl9vcHRpb25zJGxvY2FsZSRvcHRpbyIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbCIsIl9kZWZhdWx0T3B0aW9ucyRsb2NhbDIiLCJsb2NhbGUiLCJSYW5nZUVycm9yIiwiZ2V0VVRDV2Vla1llYXIiLCJfb3B0aW9ucyRmaXJzdFdlZWtDb24iLCJmaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENXZWVrWWVhciIsImZpcnN0V2VlayIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsInNpZ24iLCJvdXRwdXQiLCJhYnMiLCJmb3JtYXR0ZXJzIiwieSIsInRva2VuIiwic2lnbmVkWWVhciIsIk0iLCJtb250aCIsImdldFVUQ01vbnRoIiwiU3RyaW5nIiwiZCIsImEiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJnZXRVVENIb3VycyIsInRvVXBwZXJDYXNlIiwiaCIsIkgiLCJtIiwiZ2V0VVRDTWludXRlcyIsInMiLCJnZXRVVENTZWNvbmRzIiwiUyIsIm51bWJlck9mRGlnaXRzIiwibWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwicG93IiwiRyIsImxvY2FsaXplIiwiZXJhIiwid2lkdGgiLCJvcmRpbmFsTnVtYmVyIiwidW5pdCIsImxpZ2h0Rm9ybWF0dGVycyIsIlkiLCJzaWduZWRXZWVrWWVhciIsIndlZWtZZWFyIiwiUiIsInUiLCJRIiwicXVhcnRlciIsImNvbnRleHQiLCJxIiwiTCIsInciLCJ3ZWVrIiwicm91bmQiLCJnZXRVVENXZWVrIiwiSSIsImlzb1dlZWsiLCJnZXRVVENJU09XZWVrIiwiRCIsImRheU9mWWVhciIsInNldFVUQ01vbnRoIiwic3RhcnRPZlllYXJUaW1lc3RhbXAiLCJkaWZmZXJlbmNlIiwiZ2V0VVRDRGF5T2ZZZWFyIiwiRSIsImRheU9mV2VlayIsImxvY2FsRGF5T2ZXZWVrIiwiYyIsImkiLCJpc29EYXlPZldlZWsiLCJkYXlQZXJpb2QiLCJiIiwiaG91cnMiLCJCIiwiSyIsImsiLCJYIiwiX2xvY2FsaXplIiwidGltZXpvbmVPZmZzZXQiLCJfb3JpZ2luYWxEYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMiLCJmb3JtYXRUaW1lem9uZSIsIngiLCJPIiwiZm9ybWF0VGltZXpvbmVTaG9ydCIsInoiLCJ0Iiwib3JpZ2luYWxEYXRlIiwiVCIsIm9mZnNldCIsImRpcnR5RGVsaW1pdGVyIiwiYWJzT2Zmc2V0IiwibWludXRlcyIsImRlbGltaXRlciIsImRhdGVMb25nRm9ybWF0dGVyIiwicGF0dGVybiIsImZvcm1hdExvbmciLCJ0aW1lTG9uZ0Zvcm1hdHRlciIsInRpbWUiLCJsb25nRm9ybWF0dGVycyIsInAiLCJQIiwiZGF0ZVRpbWVGb3JtYXQiLCJtYXRjaFJlc3VsdCIsIm1hdGNoIiwiZGF0ZVBhdHRlcm4iLCJ0aW1lUGF0dGVybiIsImRhdGVUaW1lIiwicmVwbGFjZSIsImdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMiLCJ1dGNEYXRlIiwiVVRDIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwicHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zIiwicHJvdGVjdGVkV2Vla1llYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiaW5kZXhPZiIsImlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiIsInRocm93UHJvdGVjdGVkRXJyb3IiLCJmb3JtYXQiLCJpbnB1dCIsImNvbmNhdCIsImZvcm1hdERpc3RhbmNlTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhXZWVrcyIsInhXZWVrcyIsImFib3V0WE1vbnRocyIsInhNb250aHMiLCJhYm91dFhZZWFycyIsInhZZWFycyIsIm92ZXJYWWVhcnMiLCJhbG1vc3RYWWVhcnMiLCJidWlsZEZvcm1hdExvbmdGbiIsInVuZGVmaW5lZCIsImRlZmF1bHRXaWR0aCIsImZvcm1hdHMiLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsImRpcnR5SW5kZXgiLCJ2YWx1ZXNBcnJheSIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwiX2RlZmF1bHRXaWR0aCIsIl93aWR0aCIsInZhbHVlcyIsImFyZ3VtZW50Q2FsbGJhY2siLCJidWlsZE1hdGNoRm4iLCJzdHJpbmciLCJtYXRjaFBhdHRlcm4iLCJtYXRjaFBhdHRlcm5zIiwiZGVmYXVsdE1hdGNoV2lkdGgiLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwia2V5IiwiQXJyYXkiLCJpc0FycmF5IiwiZmluZEluZGV4IiwidGVzdCIsImZpbmRLZXkiLCJ2YWx1ZUNhbGxiYWNrIiwicmVzdCIsIm9iamVjdCIsInByZWRpY2F0ZSIsImhhc093blByb3BlcnR5IiwiYXJyYXkiLCJjb2RlIiwiZm9ybWF0RGlzdGFuY2UiLCJjb3VudCIsInJlc3VsdCIsInRva2VuVmFsdWUiLCJhZGRTdWZmaXgiLCJjb21wYXJpc29uIiwiZm9ybWF0UmVsYXRpdmUiLCJfZGF0ZSIsIl9iYXNlRGF0ZSIsIl9vcHRpb25zIiwicmVtMTAwIiwibmFycm93IiwiYWJicmV2aWF0ZWQiLCJ3aWRlIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZUludCIsInBhcnNlUmVzdWx0IiwiYW55IiwiZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwiZXNjYXBlZFN0cmluZ1JlZ0V4cCIsImRvdWJsZVF1b3RlUmVnRXhwIiwidW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAiLCJkaXJ0eUZvcm1hdFN0ciIsIl9yZWY0IiwiX29wdGlvbnMkbG9jYWxlMiIsIl9vcHRpb25zJGxvY2FsZTIkb3B0aSIsIl9yZWY1IiwiX3JlZjYiLCJfcmVmNyIsIl9vcHRpb25zJGxvY2FsZTMiLCJfb3B0aW9ucyRsb2NhbGUzJG9wdGkiLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWwzIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsNCIsImZvcm1hdFN0ciIsImRlZmF1bHRMb2NhbGUiLCJmb3JtYXR0ZXJPcHRpb25zIiwibWFwIiwic3Vic3RyaW5nIiwiZmlyc3RDaGFyYWN0ZXIiLCJsb25nRm9ybWF0dGVyIiwiam9pbiIsImNsZWFuRXNjYXBlZFN0cmluZyIsImZvcm1hdHRlciIsInVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJtYXRjaGVkIiwiZGF0ZU9iamVjdCIsImN1cnJlbnREYXkiLCJ3ZWVrUGFzdCIsIndlZWtBZ28iLCJ3ZWVrRnV0dXJlIiwid2Vla05leHQiLCJtb250aEZ1dHVyZSIsIm1vbnRoTmV4dCIsInJlbmRlckNoZWNrZWRUb2RvIiwidG9kb0NvbnRhaW5lciIsInRvZG9JdGVtcyIsImNoaWxkcmVuIiwiaXRlbXNMZWZ0IiwiaXRlbXNSaWdodCIsImNoZWNrYm94IiwiaXRlbVRpdGxlIiwiaXRlbU5vdGVzIiwiaXRlbURhdGUiLCJpdGVtRWRpdCIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsInRvZ2dsZSIsInJlbmRlckFkZFRvZG9Qb3B1cCIsImFkZFRvZG9Qb3B1cCIsImFkZFByb2plY3ROYW1lIiwiYWRkTmV3Rm9ybSIsImFkZERhdGUiLCJnZXRFbGVtZW50QnlJZCIsImFkZFRvZG9EZWxldGUiLCJhZGROZXdMb3dQcmlvcml0eSIsImFkZE5ld01lZGl1bVByaW9yaXR5IiwiYWRkTmV3SGlnaFByaW9yaXR5IiwiYWRkTG93TGFiZWwiLCJhZGRNZWRpdW1MYWJlbCIsImFkZEhpZ2hMYWJlbCIsIm1hbmFnZURhdGEiLCJ0ZXh0Q29udGVudCIsInNldEF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZXNldCIsInJlbW92ZUF0dHJpYnV0ZSIsImNvbnRhaW5zIiwicmVuZGVyTm90ZXNQb3B1cCIsIm5vdGVzQ2FyZCIsIm5vdGVzQ2xvc2UiLCJub3Rlc1RpdGxlIiwibm90ZXNQcm9qZWN0Iiwibm90ZXNEdWVEYXRlIiwibm90ZXNQcmlvcml0eSIsIm5vdGVzRGV0YWlscyIsIml0ZW0iLCJpbm5lckhUTUwiLCJ0YXJnZXQiLCJIVE1MRWxlbWVudCIsIml0ZW1QYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiaXRlbUdyYW5kcGFyZW50IiwiZGF0YXNldCIsInJlbmRlckVkaXRQb3B1cCIsImVkaXRDYXJkIiwiZWRpdENsb3NlIiwiZWRpdFRpdGxlIiwiZWRpdERldGFpbHMiLCJlZGl0RHVlRGF0ZSIsImVkaXRMb3dQcmlvcml0eSIsImVkaXRNZWRpdW1Qcmlvcml0eSIsImVkaXRIaWdoUHJpb3JpdHkiLCJlZGl0TG93TGFiZWwiLCJlZGl0TWVkaXVtTGFiZWwiLCJlZGl0SGlnaExhYmVsIiwiZWRpdFN1Ym1pdCIsInJlbmRlckRlbGV0ZVBvcHVwIiwiZGVsZXRlUG9wdXAiLCJkZWxldGVDb25maXJtIiwiZGVsZXRlQ2FuY2VsIiwiYWxsVG9kb3NDb3VudCIsInRvZGF5VG9kb3NDb3VudCIsIndlZWtUb2Rvc0NvdW50IiwidG9kYXlUb2RvcyIsIndlZWtUb2RvcyIsImFsbFVuY2hlY2tlZFRvZG9zIiwidG9kYXlVbmNoZWNrZWRUb2RvcyIsIndlZWtVbmNoZWNrZWRUb2RvcyIsInJlZHVjZSIsInRvdGFsIiwiYWxsVG9kb3MiLCJwcm9qZWN0Q29udGFpbmVyIiwicHJvamVjdHNPYmplY3QiLCJ1bmNoZWNrZWRUb2RvcyIsInByb2plY3RJdGVtIiwiY3JlYXRlRWxlbWVudCIsInByb2plY3RUaXRsZSIsInByb2plY3RDb3VudGVyIiwiYXBwZW5kQ2hpbGQiLCJmaWx0ZXJCdG5zIiwicXVlcnlTZWxlY3RvckFsbCIsInByb2plY3RCdG5zIiwiYnRuIiwidG9kb0l0ZW0iLCJpdGVtTGVmdCIsIml0ZW1SaWdodCIsImNoZWNrYm94SWNvbiIsIml0ZW1OYW1lIiwibm90ZXNCdG4iLCJkYXRlVGV4dCIsImVkaXRJY29uIiwiZGVsZXRlSWNvbiIsImVkaXRJdGVtIiwiZWRpdFByb2plY3QiLCJ0b2RvTGlzdCIsInJlbmRlckFkZE5ld1BvcHVwIiwiYWRkTmV3UG9wdXAiLCJhZGROZXdDbG9zZSIsImFkZFRvZG9Gb3JtIiwiYWRkUHJvamVjdEZvcm0iLCJhZGRUb2RvQnRuIiwiYWRkUHJvamVjdEJ0biIsImFkZExvd1ByaW9yaXR5IiwiYWRkTWVkaXVtUHJpb3JpdHkiLCJhZGRIaWdoUHJpb3JpdHkiLCJzdHlsZSIsImRpc3BsYXkiLCJlbXB0eVBvcHVwIiwiZW1wdHlOYW1lIiwiZW1wdHlBZGRCdG4iLCJlbXB0eURlbGV0ZUJ0biIsInN0b3JlZCIsImdldEl0ZW0iLCJwYXJzZSIsImdldFRvZG9zIiwiZGFzaGJvYXJkIiwiaGFtYnVyZ2VyTWVudSIsImFkZE5ld0J0biIsImluaXRpYWxMb2FkIiwidmlzaWJpbGl0eSJdLCJzb3VyY2VSb290IjoiIn0=